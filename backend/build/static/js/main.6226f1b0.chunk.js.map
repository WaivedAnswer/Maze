{"version":3,"sources":["components/boardContext.js","models/tile.js","models/token.js","models/gameState.js","models/coordinate.js","models/tileDirection.js","images/up.png","images/down.png","images/left.png","images/right.png","images/coins_new.png","images/timer.png","images/axe2.png","images/sword.png","images/arrows2.png","images/potion.png","models/item.js","models/offscreen.js","components/offScreenIndicator.js","components/item.js","components/tileNormal.js","components/tileConnect.js","images/green-portal.png","images/orange-portal.png","images/yellow-portal.png","images/purple-portal.png","components/tilePortal.js","images/s1.png","components/tileExit.js","images/rock.png","components/tileBarrier.js","components/tileUnknown.js","components/tile.js","images/dwarf_right.png","images/warrior2.png","images/elf_bow.png","images/mage.png","components/token.js","images/escalator_down.png","images/escalator_up.png","models/escalator.js","components/escalator.js","components/wall.js","components/board.js","services/logger.js","services/gameService.js","models/wallModel.js","components/moveIndicator.js","components/playerIndicator.js","components/moves.js","components/notification.js","components/toolbar.js","components/Timer.js","components/game.js","components/menu.js","App.js","index.js"],"names":["BoardContext","React","createContext","TileType","Tile","coord","type","hasItem","item","tokenType","this","TokenType","Token","id","selectedBy","escaped","GameStates","Coordinate","x","y","TileDirection","getTile","grid","length","ItemType","Item","getOffsets","boardRect","tokenRect","left","Math","max","right","width","window","innerWidth","getHorizontalOffset","top","bottom","height","innerHeight","getVerticalOffset","getIndicatorInfo","myRef","parent","current","getBoundingClientRect","upDist","downDist","leftDist","rightDist","maxDist","offsets","direction","Error","OffScreenIndicator","directionImg","indicatorImg","indicatorInfo","indicatorPositionStyle","display","justifyContent","alignItems","imgStyle","imgScale","containerClassName","up","flexDirection","down","className","style","src","alt","itemImg","gameState","useState","setIndicatorInfo","useRef","parentRef","useContext","useEffect","checkIfInView","addEventListener","removeEventListener","showOffscreenIndicator","coinImg","timerImg","weapon","img","axe","color","sword","bow","potion","getWeapon","backgroundColor","JSON","stringify","ref","NormalTile","tile","Connect","tileImg","getTileDirection","tileDirection","Portal","onTeleport","orangePortal","purplePortal","yellowPortal","greenPortal","onClick","Exit","exit","Barrier","rockTile","UnknownTile","content","tileCoord","gridColumnStart","gridRowStart","imgClass","token","onTokenSelected","dwarf","elf","warrior","mage","EscalatorOrientation","EscalatorModel","startCoord","endCoord","min","abs","minX","getMinX","minY","getMinY","Escalator","escImg","escalator","onEscalate","rowStart","colStart","getOrientation","downImg","upImg","tileStyle","gridRow","getRowSpan","gridColumn","getColSpan","Wall","wall","wallStyle","getStartRow","getStartCol","zIndex","isHorizontal","borderTop","borderLeft","Board","tokens","escalators","walls","gameService","send","selected","teleport","escalatorId","escalate","onLeftBorder","onRightBorder","onTopBorder","onBottomBorder","getDirection","gridHeight","gridWidth","boardStyle","padding","overflow","gridTemplateColumns","gridTemplateRows","gap","Provider","value","onKeyPress","event","key","toLowerCase","moveDown","moveUp","moveLeft","moveRight","tabIndex","map","row","rowNum","colNum","toString","console","log","error","GameService","gameId","playerName","setMovements","movements","allowedMovements","sendBasicCommand","command","reset","sendMovement","doSomething","player","handlers","newHandler","filter","handler","push","Promise","resolve","reject","finalURL","location","host","connection","WebSocket","logger","onopen","onerror","onmessage","message","json","parse","data","e","handle","setInterval","readyState","messageObject","gameMessage","includes","WallModel","MoveIndicator","imgSrc","keyIcon","move","isSelf","OtherPlayer","allowedMoves","_","Moves","Notification","notification","isGood","Toolbar","remaining","Timer","remainingSeconds","getTimeStr","num","paddedString","substr","minutes","floor","seconds","getCoordinate","pos","parseInt","tileData","itemData","getTileType","getTiles","tiles","getTileRow","getTokens","tokenData","idx","selections","selection","find","split","join","getSelectedBy","Game","realPlayerName","updatedTiles","setTiles","setEscalators","setWalls","setTokens","setMoves","allPlayers","setAllPlayers","notificationMessage","setNotificationMessage","setRemainingSeconds","setGameService","remainingSections","setRemainingSections","setGameState","clearNotification","useParams","service","fade","board","start","end","getEscalators","getWalls","state","sender","setTimeout","a","connect","getInitialUpdate","addHandler","initialConnect","otherPlayerName","otherPlayers","playerInfo","hidden","moves","Menu","setPlayerName","navigate","useNavigate","joinCodeRef","createGameClick","axios","post","response","joinGameClick","onChange","target","placeholder","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6226f1b0.chunk.js","sourcesContent":["import React from 'react';\n\nconst BoardContext = React.createContext();\n\nexport default BoardContext;","let TileType = {\n    UNKNOWN: -1,\n    NORMAL: 1,\n    EXIT: 2,\n    WALL: 3,\n    CONNECT: 4,\n    PORTAL: 5\n}\n\nclass Tile {\n    constructor(coord, type, hasItem, item, tokenType) {\n        this.coord = coord\n        this.type = type\n        this.hasItem = hasItem\n        this.item = item\n        this.tokenType = tokenType\n    }\n}\n\nexport { Tile, TileType }\n","const TokenType = {\n    DWARF: 1,\n    MAGE: 2,\n    BARBARIAN: 3,\n    ELF: 4\n}\n\nclass Token {\n    constructor(id, coord, selectedBy, escaped, type) {\n        this.id = id\n        this.coord = coord\n        this.selectedBy = selectedBy\n        this.escaped = escaped\n        this.type = type\n    }\n}\n\nexport { Token, TokenType }","const GameStates = {\n    EXPLORE: 0,\n    STEAL: 1,\n    ESCAPE: 2,\n    LOSS: 3,\n    WIN: 4\n}\n\nexport { GameStates }","class Coordinate {\n    constructor(x, y) {\n        this.x = x\n        this.y = y\n    }\n\n    toString() {\n        return `(${this.x}, ${this.y})`\n    }\n}\n\nexport default Coordinate","import { TileType } from \"./tile\"\nimport Coordinate from \"./coordinate\"\n\nconst TileDirection = {\n    UP: 0,\n    DOWN: 1,\n    LEFT: 2,\n    RIGHT: 3,\n    UNKNOWN: 4\n}\n\nconst getTile  = (grid, coord) => {\n    if(coord.y < 0 || coord.y >= grid.length) {\n        return null\n    }\n    if(coord.x < 0 || coord.x >= grid[0].length) {\n        return null\n    }\n    return grid[coord.y][coord.x]\n}\n\nfunction getDirection(tile, grid) {\n    if(grid.length === 0 ) {\n        return TileDirection.UNKNOWN\n    }\n\n    const left = getTile(grid, new Coordinate(tile.coord.x - 1, tile.coord.y))\n    const right = getTile(grid, new Coordinate(tile.coord.x + 1, tile.coord.y))\n    const up = getTile(grid, new Coordinate(tile.coord.x, tile.coord.y - 1))\n    const down = getTile(grid, new Coordinate(tile.coord.x, tile.coord.y + 1))\n    const onLeftBorder = tile.coord.x === 0\n    const onRightBorder = tile.coord.x === grid[0].length - 1\n    const onTopBorder = tile.coord.y === 0\n    const onBottomBorder = tile.coord.y === grid.length - 1\n    if( onLeftBorder || (left && left.type === TileType.UNKNOWN)) {\n        return TileDirection.LEFT\n    } else if( onRightBorder || (right && right.type === TileType.UNKNOWN)) {\n        return TileDirection.RIGHT\n    } else if( onTopBorder || (up && up.type === TileType.UNKNOWN)) {\n        return TileDirection.UP\n    } else if( onBottomBorder || (down && down.type === TileType.UNKNOWN)) {\n        return TileDirection.DOWN\n    } else {\n        return TileDirection.UNKNOWN\n    }\n}\n\nexport { TileDirection, getDirection }\n","export default __webpack_public_path__ + \"static/media/up.552f859e.png\";","export default __webpack_public_path__ + \"static/media/down.40f8ab30.png\";","export default __webpack_public_path__ + \"static/media/left.aa0f5ff4.png\";","export default __webpack_public_path__ + \"static/media/right.9a984c67.png\";","export default __webpack_public_path__ + \"static/media/coins_new.2254d122.png\";","export default __webpack_public_path__ + \"static/media/timer.c21cbb42.png\";","export default __webpack_public_path__ + \"static/media/axe2.3337d039.png\";","export default __webpack_public_path__ + \"static/media/sword.003d0d39.png\";","export default __webpack_public_path__ + \"static/media/arrows2.6d27d5a7.png\";","export default __webpack_public_path__ + \"static/media/potion.dc85f7b3.png\";","let ItemType = {\n    COIN: 0,\n    TIMER: 1,\n    WEAPON: 2\n}\n\nclass Item {\n    constructor(type, tokenType) {\n        this.type = type\n        this.tokenType = tokenType\n    }\n}\n\nexport { Item, ItemType }","import {TileDirection} from\"../models/tileDirection\"\n\n\nconst getHorizontalOffset = (boardRect, tokenRect) => {\n    const left = Math.max(boardRect.left, tokenRect.left)\n    if(left < boardRect.right - tokenRect.width) {\n        return {left: left}\n    } else {\n        return {right: window.innerWidth - boardRect.right}\n    }\n}\n\nconst getVerticalOffset = (boardRect, tokenRect) => {\n    const top = Math.max(boardRect.top, tokenRect.top)\n    if(top < boardRect.bottom - tokenRect.height) {\n        return {top: top}\n    } else {\n        return {bottom: window.innerHeight - boardRect.bottom}\n    }\n}\n\nconst getOffsets = (boardRect, tokenRect) => {\n    return { ...getHorizontalOffset(boardRect, tokenRect),\n        ...getVerticalOffset(boardRect, tokenRect)}\n}\n\nconst getIndicatorInfo = (myRef, parent) => {\n    if(!myRef.current || !parent.current) {\n        return null\n    }\n    const tokenRect = myRef.current.getBoundingClientRect()\n    const boardRect = parent.current.getBoundingClientRect()\n    const isInView = (\n        tokenRect.top <= boardRect.bottom &&\n        tokenRect.left <= boardRect.right &&\n        tokenRect.bottom >= boardRect.top &&\n        tokenRect.right >= boardRect.left\n    );\n    if(isInView) {\n        return null\n    }\n    const upDist = boardRect.top - tokenRect.bottom\n    const downDist = tokenRect.top - boardRect.bottom\n    const leftDist = boardRect.left - tokenRect.right\n    const rightDist = tokenRect.left - boardRect.right\n\n\n    const maxDist = Math.max(upDist, downDist, leftDist, rightDist)\n    const offsets = getOffsets(boardRect, tokenRect)\n    if(upDist === maxDist) {\n       return {direction: TileDirection.UP, \n            ...offsets}\n    } else if(downDist === maxDist) {\n        return {direction: TileDirection.DOWN,\n            bottom: window.innerHeight - boardRect.bottom,\n            ...offsets}\n    } else if(rightDist === maxDist) {\n        return{direction: TileDirection.RIGHT,\n            ...offsets}\n    } else if(leftDist === maxDist) {\n        return{direction: TileDirection.LEFT,\n            ...offsets}\n    } else {\n        throw new Error(\"No direction specified\")\n    }\n}\n\nexport { getIndicatorInfo }","import {TileDirection} from \"../models/tileDirection\"\nimport {TokenType} from \"../models/token\"\n\nimport up from \"../images/up.png\"\nimport down from \"../images/down.png\"\nimport left from \"../images/left.png\"\nimport right from \"../images/right.png\"\n\nconst OffScreenIndicator = ({indicatorImg, indicatorInfo }) => {\n    let directionImg\n    let indicatorPositionStyle = {\n        display: \"flex\",\n        bottom: indicatorInfo.bottom,\n        top: indicatorInfo.top,\n        left: indicatorInfo.left,\n        right: indicatorInfo.right,\n        justifyContent: \"center\",\n        alignItems: \"center\"\n    }\n    const imgStyle = {\n        height: indicatorInfo.imgScale,\n        width: indicatorInfo.imgScale\n    }\n    let imgClassName = \"offscreen-image\"\n    let containerClassName = \"offscreen\"\n    switch(indicatorInfo.tokenType) {\n        case TokenType.BARBARIAN:\n            containerClassName += \" barbarian\"\n            break\n        case TokenType.DWARF:\n            containerClassName += \" dwarf\"\n            break\n        case TokenType.ELF:\n            containerClassName += \" elf\"\n            break\n        case TokenType.MAGE:\n            containerClassName += \" mage\"\n            break\n        default:\n    }\n\n    switch(indicatorInfo.direction) {\n        case TileDirection.UP:\n            directionImg = up\n            indicatorPositionStyle.flexDirection = \"column\"\n            break\n        case TileDirection.DOWN:\n            directionImg = down\n            indicatorPositionStyle.flexDirection = \"column-reverse\"\n            break\n        case TileDirection.LEFT:\n            directionImg = left\n            indicatorPositionStyle.flexDirection = \"row\"\n            break\n        case TileDirection.RIGHT:\n            directionImg = right\n            indicatorPositionStyle.flexDirection = \"row-reverse\"\n            break\n        default:\n            throw new Error(\"Unsupported offscreen direction\")\n    }\n\n\n\n    \n    return (\n        <div className={containerClassName} style={indicatorPositionStyle}>\n            <img src={directionImg} className=\"offscreen-direction\" alt=\"offscreen direction\"/>\n            <img src={indicatorImg} style={imgStyle} className={imgClassName} alt='offscreen indicator' /> \n        </div>\n       \n    )\n}\n\nexport default OffScreenIndicator","import React, {useState, useEffect, useRef, useContext} from 'react'\nimport coinImg from \"../images/coins_new.png\"\nimport timerImg from \"../images/timer.png\"\nimport axe from \"../images/axe2.png\"\nimport sword from \"../images/sword.png\"\nimport bow from \"../images/arrows2.png\"\nimport potion from \"../images/potion.png\"\nimport {ItemType} from \"../models/item\"\nimport {TokenType} from \"../models/token\"\nimport {GameStates} from \"../models/gameState\"\nimport { getIndicatorInfo } from '../models/offscreen'\n\nimport BoardContext from \"./boardContext\"\nimport OffScreenIndicator from './offScreenIndicator'\n\nconst getWeapon = ( item ) => {\n    switch(item.tokenType) {\n        case TokenType.DWARF:\n            return {\n                img: axe,\n                color: 'orange'\n            }\n        case TokenType.BARBARIAN:\n            return {\n                img: sword,\n                color: 'yellow'\n            }\n        case TokenType.ELF:\n            return {\n                img: bow,\n                color: 'green'\n            }\n        case TokenType.MAGE:\n            return {\n                img: potion,\n                color: 'purple'\n            }\n        default:\n            throw new Error( \"Invalid token type\" )\n    }\n}\n    \nconst Item = ({item, gameState}) => {\n    const [indicatorInfo, setIndicatorInfo] = useState(null)\n    const myRef = useRef(null);\n    const parentRef = useContext(BoardContext)\n    useEffect(() => {\n    const parent = parentRef\n    function checkIfInView() {\n        const indicatorInfo = getIndicatorInfo(myRef, parentRef)\n        if(indicatorInfo) {\n            indicatorInfo.tokenType = item.tokenType\n        }\n        setIndicatorInfo(indicatorInfo)\n    }\n\n    parent.current.addEventListener('scroll', checkIfInView);\n    checkIfInView();\n\n    return () => {\n        parent.current.removeEventListener('scroll', checkIfInView);\n    };\n    }, [parentRef]);\n    let itemImg\n    let className = 'item'\n    let style = {}\n    let showOffscreenIndicator = false\n    switch(item.type) {\n        case ItemType.COIN:\n            itemImg = coinImg\n            className += ' coin'\n            break;\n        case ItemType.TIMER:\n            itemImg = timerImg\n            className += ' time'\n            break;\n        case ItemType.WEAPON:\n            const weapon = getWeapon(item)\n            itemImg = weapon.img\n            className += ' weapon'\n            style.backgroundColor = weapon.color\n            showOffscreenIndicator = indicatorInfo !== null && (gameState === GameStates.STEAL)\n            break\n        default:\n            throw new Error('Unknown item type: ' + JSON.stringify(item))\n    }\n\n    return (\n        <div  ref={myRef} className={className} style={style} >\n            <img src={itemImg} alt='item' />\n            { showOffscreenIndicator ?  <OffScreenIndicator indicatorInfo={indicatorInfo} indicatorImg={itemImg} /> : \"\"  }\n        </div>\n    )\n}\n\nexport default Item","import Item from \"./item\"\n\n\nconst NormalTile = ({tile, gameState }) => {\n    let className = 'tile'\n    return (\n        <div className={className}>\n            { tile.hasItem ? <Item item={tile.item} gameState={gameState}/> : null}\n        </div>\n       \n    )\n}\n\nexport default NormalTile","\nimport { TokenType } from \"../models/token\"\nimport { GameStates } from \"../models/gameState\"\nimport { TileDirection } from \"../models/tileDirection\"\n\nimport up from \"../images/up.png\"\nimport down from \"../images/down.png\"\nimport left from \"../images/left.png\"\nimport right from \"../images/right.png\"\n\nimport NormalTile from \"./tileNormal\"\n\n\nconst Connect = ({tile, getTileDirection, gameState }) => {\n    let className = 'tile-connect'\n    let tileImg\n    const tileDirection = getTileDirection(tile)\n    const show = tileDirection !== TileDirection.UNKNOWN && gameState === GameStates.EXPLORE\n\n    if(!show) {\n        return (<NormalTile tile = {tile}/>)\n    }\n    switch(tileDirection) {\n        case TileDirection.UP:\n            tileImg = up\n            break\n        case TileDirection.DOWN:\n            tileImg = down\n            break\n        case TileDirection.LEFT:\n            tileImg = left\n            break\n        case TileDirection.RIGHT:\n            tileImg = right\n            break\n        default:\n            //do nothing\n    }\n    switch(tile.tokenType) {\n        case TokenType.DWARF:\n            className += ' connect-dwarf'\n            break;\n        case TokenType.MAGE:\n            className += ' connect-mage'\n            break;\n        case TokenType.BARBARIAN:\n            className += ' connect-barbarian'\n            break;\n        case TokenType.ELF:\n            className += ' connect-elf'\n            break;\n        default:\n            throw new Error('Unknown token type')\n    }\n\n\n    //temporary hack, when the tile direction is unknown the connection point must be connected\n\n    return (\n         <div className={className}>\n            <img src={tileImg} className=\"tile-image\"  alt='' />\n        </div>    \n    )\n}\n\nexport default Connect","export default __webpack_public_path__ + \"static/media/green-portal.e3d54e5f.png\";","export default __webpack_public_path__ + \"static/media/orange-portal.e0a89eb5.png\";","export default __webpack_public_path__ + \"static/media/yellow-portal.f832ee4b.png\";","export default __webpack_public_path__ + \"static/media/purple-portal.f9f584fe.png\";","import { TokenType } from \"../models/token\"\nimport {GameStates} from \"../models/gameState\"\n\nimport greenPortal from \"../images/green-portal.png\"\nimport orangePortal from \"../images/orange-portal.png\"\nimport yellowPortal from \"../images/yellow-portal.png\"\nimport purplePortal from \"../images/purple-portal.png\"\n\nimport NormalTile from \"./tileNormal\"\n\nconst Portal = ({tile, gameState, onTeleport }) => {\n    const show = gameState === GameStates.EXPLORE || gameState === GameStates.STEAL\n    if(!show) {\n        return (<NormalTile tile = {tile}/>)\n    }\n    let className = 'tile-portal'\n    let tileImg\n\n    switch(tile.tokenType) {\n        case TokenType.DWARF:\n            tileImg = orangePortal\n            break;\n        case TokenType.MAGE:\n            tileImg = purplePortal\n            break;\n        case TokenType.BARBARIAN:\n            tileImg = yellowPortal\n            break;\n        case TokenType.ELF:\n            tileImg = greenPortal\n            break;\n        default:\n            throw new Error('Unknown token type')\n    }\n\n    const handleClick = () => {\n        onTeleport(tile.coord)\n    }\n\n    return (\n        <div className={className}>\n            <img src={tileImg} className=\"tile-image\" onClick={handleClick} alt='' /> \n        </div>\n    )\n}\n\nexport default Portal","export default __webpack_public_path__ + \"static/media/s1.cd3f2f2d.png\";","import React, {useState, useEffect, useRef, useContext} from 'react'\nimport { TokenType } from \"../models/token\"\nimport {GameStates} from \"../models/gameState\"\n\nimport exit from \"../images/s1.png\"\nimport { getIndicatorInfo } from '../models/offscreen'\n\nimport BoardContext from \"./boardContext\"\nimport OffScreenIndicator from './offScreenIndicator'\n\nconst Exit = ({tile, gameState }) => {\n    const [indicatorInfo, setIndicatorInfo] = useState(null)\n    const myRef = useRef(null);\n    const parentRef = useContext(BoardContext)\n    useEffect(() => {\n    const parent = parentRef\n    function checkIfInView() {\n        const indicatorInfo = getIndicatorInfo(myRef, parentRef)\n        if(indicatorInfo) {\n            indicatorInfo.tokenType = tile.tokenType\n        }\n        setIndicatorInfo(indicatorInfo)\n    }\n\n    parent.current.addEventListener('scroll', checkIfInView);\n    checkIfInView();\n\n    return () => {\n        parent.current.removeEventListener('scroll', checkIfInView);\n    };\n    }, [parentRef]);\n\n    let className = 'tile-exit'\n    const tileImg = exit\n    switch(tile.tokenType) {\n        case TokenType.DWARF:\n            className += ' exit-dwarf'\n            break;\n        case TokenType.MAGE:\n            className += ' exit-mage'\n            break;\n        case TokenType.BARBARIAN:\n            className += ' exit-barbarian'\n            break;\n        case TokenType.ELF:\n            className += ' exit-elf'\n            break;\n        default:\n            throw new Error('Unknown token type')\n    }\n\n    return (\n        <div ref={myRef} className={className}>\n            <img src={tileImg} className=\"tile-image\"  alt='' /> \n            {  indicatorInfo !== null && gameState === GameStates.ESCAPE ? <OffScreenIndicator indicatorInfo={indicatorInfo} indicatorImg={tileImg} /> : \"\"  }\n        </div>\n    )\n}\n\nexport default Exit","export default __webpack_public_path__ + \"static/media/rock.3d4d808c.png\";","import rockTile from \"../images/rock.png\"\n\nconst Barrier = () => {\n    let className = 'tile-exit'\n    const tileImg = rockTile\n    className = 'tile-wall'\n\n    return (\n        <div className={className}>\n            <img src={tileImg} className=\"tile-image\"  alt='' /> \n        </div>\n    )\n}\n\nexport default Barrier","const UnknownTile = () => {\n    const className = 'tile-unknown'\n    return (\n        <div className={className}>\n        </div>\n    )\n}\n\nexport default UnknownTile","import { TileType } from \"../models/tile\"\n\nimport Connect from \"./tileConnect\"\nimport Portal from \"./tilePortal\"\nimport Exit from \"./tileExit\"\nimport Barrier from \"./tileBarrier\"\nimport NormalTile from \"./tileNormal\"\nimport UnknownTile from \"./tileUnknown\"\n\n\nconst Tile = ({tile, onTeleport, getTileDirection, gameState }) => {\n    let content\n    switch (tile.type) {\n        case TileType.EXIT:\n            content = <Exit tile={tile} gameState={gameState} />\n            break\n        case TileType.WALL:\n            content = <Barrier/>\n            break\n        case TileType.UNKNOWN:\n            content = <UnknownTile />\n            break\n        case TileType.CONNECT:\n            content = <Connect tile={tile} gameState={gameState} getTileDirection={getTileDirection} />\n            break\n        case TileType.PORTAL:\n            content = <Portal tile={tile} gameState={gameState} onTeleport={onTeleport}/>\n            break\n        case TileType.NORMAL:\n            content = <NormalTile tile={tile} gameState={gameState}/>\n            break\n        default:\n            throw new Error(\"Invalid tile type\")\n    }\n\n    const tileStyle = (tileCoord) => {\n        const style =  {\n        gridColumnStart: `${tileCoord.x + 1}`,\n        gridRowStart: `${tileCoord.y + 1}`,\n     }\n     return style\n    }\n\n    return (\n        <div className='tile-container' style={tileStyle(tile.coord)}>\n            { content }\n           \n        </div>\n       \n    )\n}\n\nexport default Tile","export default __webpack_public_path__ + \"static/media/dwarf_right.3de0ca4b.png\";","export default __webpack_public_path__ + \"static/media/warrior2.a0cb9f8d.png\";","export default __webpack_public_path__ + \"static/media/elf_bow.93f90f79.png\";","export default __webpack_public_path__ + \"static/media/mage.23ebe66e.png\";","import React, {useState, useEffect, useRef, useContext} from 'react'\nimport dwarf from \"../images/dwarf_right.png\"\nimport warrior from \"../images/warrior2.png\"\nimport elf from \"../images/elf_bow.png\"\nimport mage from \"../images/mage.png\"\n\nimport { TokenType } from \"../models/token\"\nimport { getIndicatorInfo } from '../models/offscreen'\n\nimport BoardContext from \"./boardContext\"\nimport OffScreenIndicator from './offScreenIndicator'\n\nconst Token = ({ token, onTokenSelected}) => {\n    const [indicatorInfo, setIndicatorInfo] = useState(null)\n    const myRef = useRef(null);\n    const parentRef = useContext(BoardContext)\n    useEffect(() => {\n    const parent = parentRef\n    function checkIfInView() {\n        const indicatorInfo = getIndicatorInfo(myRef, parentRef)\n        if (indicatorInfo && token ) {\n            indicatorInfo.tokenType = token.type\n            if(token.type === TokenType.DWARF) {\n                indicatorInfo.imgScale = \"60%\"\n            }\n        }\n        setIndicatorInfo(indicatorInfo)\n    }\n\n    parent.current.addEventListener('scroll', checkIfInView);\n    checkIfInView();\n\n    return () => {\n        parent.current.removeEventListener('scroll', checkIfInView);\n    };\n    }, [parentRef]);\n\n    if(!token || token.escaped ) {\n        return ''\n    }\n\n    let imgClass\n    if (token.selectedBy) {\n        imgClass = 'token-selected'\n    } else if (!token.selectedBy) {\n        imgClass = 'token'\n    }\n\n    let img\n    switch(token.type) {\n        case TokenType.DWARF:\n            img = dwarf\n            imgClass += \" token-dwarf\"\n            break;\n        case TokenType.ELF:\n            img = elf\n            imgClass += \" token-elf\"\n            break;\n        case TokenType.BARBARIAN:\n            img = warrior\n            imgClass += \" token-barbarian\"\n            break;\n        case TokenType.MAGE:\n            img = mage\n            imgClass += \" token-mage\"\n            break;\n        default:\n            throw new Error(\"Unknown token type\")\n    }\n\n    \n    \n    const onClick = () => {\n        if (token) {\n            onTokenSelected(token)\n        }\n    }\n\n    const tileStyle = (tileCoord) => {\n        const style =  {\n        gridColumnStart: `${tileCoord.x + 1}`,\n        gridRowStart: `${tileCoord.y + 1}`,\n     }\n     return style\n    }\n\n    return (\n        <div \n        ref={myRef} \n        className={imgClass} style={tileStyle(token.coord)} onClick={onClick}>\n            <img src={img} alt='token' />\n           { indicatorInfo !== null ? <OffScreenIndicator indicatorInfo={indicatorInfo} indicatorImg={img} /> : \"\"  }\n        </div>\n    )\n}\n\nexport default Token","export default __webpack_public_path__ + \"static/media/escalator_down.03b0327b.png\";","export default __webpack_public_path__ + \"static/media/escalator_up.671e7897.png\";","const EscalatorOrientation = {\n    DOWN: 0,\n    UP: 1\n}\n\nclass EscalatorModel {\n    constructor(id, startCoord, endCoord) {\n        this.id = id\n        this.startCoord = startCoord\n        this.endCoord = endCoord\n    }\n\n    getMinX() {\n        return Math.min(this.startCoord.x, this.endCoord.x)\n    }\n\n    getMinY() {\n        return Math.min(this.startCoord.y, this.endCoord.y)\n    }\n\n    getRowSpan() {\n        return Math.abs(this.startCoord.y - this.endCoord.y) + 1\n    }\n\n    getColSpan() {\n       return Math.abs(this.startCoord.x - this.endCoord.x) + 1\n    }\n\n    getOrientation() {\n        const minX = this.getMinX()\n        const minY = this.getMinY()\n        if( (minX === this.startCoord.x && minY === this.startCoord.y) \n            || (minX === this.endCoord.x && minY === this.endCoord.y )) {\n            return EscalatorOrientation.DOWN\n        } else {\n            return EscalatorOrientation.UP\n        }\n    }\n}\n\nexport { EscalatorModel, EscalatorOrientation }","import downImg from \"../images/escalator_down.png\"\nimport upImg from \"../images/escalator_up.png\"\nimport {EscalatorOrientation} from '../models/escalator'\n\nconst Escalator = ({ escalator, onEscalate }) => {\n    const rowStart = escalator.getMinY() + 1\n    const colStart = escalator.getMinX() + 1\n    let escImg\n    switch(escalator.getOrientation()) {\n        case EscalatorOrientation.DOWN:\n            escImg = downImg\n            break;\n        case EscalatorOrientation.UP:\n            escImg = upImg\n            break;\n        default:\n            throw new Error (\"Invalid Orientation\")\n    }\n\n    const tileStyle = {\n        gridRow: `${rowStart} / span ${escalator.getRowSpan()}`,\n        gridColumn: `${colStart} / span ${escalator.getColSpan()}`,\n    }\n\n    const handleClick = () => {\n        onEscalate(escalator.id)\n    }\n\n    return (\n        < div className = 'escalator' style = {tileStyle} >\n            <img className = 'escalator-img' src={escImg} onClick={handleClick} alt='escalator' />\n        </div>\n    )\n}\n\nexport default Escalator","\nconst Wall = ( {wall}) => {\n    const wallStyle = {\n        gridRow: `${wall.getStartRow()} / span ${wall.getRowSpan()}`,\n        gridColumn: `${wall.getStartCol()} / span ${wall.getColSpan()}`,\n        zIndex: 1\n    }\n\n    if(wall.isHorizontal()) {\n        wallStyle.borderTop = '10px solid #000000'\n        wallStyle.height ='0px'\n    } else {\n        wallStyle.borderLeft = '10px solid #000000'\n        wallStyle.width = '0px'\n    }\n\n    return (\n        < div className = 'wall' style = {wallStyle} >\n        </div>\n    )\n}\n\nexport default Wall","import React, {useRef} from 'react'\n\n\nimport BoardContext from './boardContext'\nimport Tile from './tile'\nimport { getDirection } from '../models/tileDirection'\nimport Token  from './token'\nimport Escalator from './escalator'\nimport Wall from './wall'\n\nconst Board = ({ gameState, grid, tokens, escalators, walls, gameService }) => {\n    \n    const myRef = useRef(null)\n    const handleKeyPress = (event) => {\n        if (event.key.toLowerCase() === 's') {\n            gameService.moveDown()\n        } else if (event.key.toLowerCase() === 'w') {\n            gameService.moveUp()\n        } else if (event.key.toLowerCase() === 'a') {\n            gameService.moveLeft()\n        } else if (event.key.toLowerCase() === 'd') {\n            gameService.moveRight()\n        }\n    }\n\n    const onTokenSelected = (token) => {\n        //sends with token.id (Where does this come from? is it always populated correctly?)\n        gameService.send(JSON.stringify(\n            {\n                type: \"SELECTED\",\n                selected: token.id\n            }\n        ))\n    }\n\n    const onTeleport = (coord) => {\n        gameService.teleport(coord)\n    }\n\n    const onEscalate = (escalatorId) => {\n        gameService.escalate(escalatorId)\n    }\n\n    const getTileDirection = (tile) => {\n        return getDirection(tile, grid)\n    }\n\n    const gridHeight = grid.length\n\n    const gridWidth = grid.length === 0 ? 0 : grid[0].length\n\n    const boardStyle = {\n        padding: '36px',\n        overflow: 'auto',\n        display: 'grid',\n        gridTemplateColumns: `repeat(${gridWidth}, 64px)`,\n        gridTemplateRows: `repeat(${gridHeight}, 64px)`,\n        gap: '0px'\n     } \n\n    return (\n        <BoardContext.Provider value={myRef}>\n            <div className=\"game-board\" ref={myRef} style= {boardStyle} onKeyPress={handleKeyPress} tabIndex={0}>\n                {\n                    grid.map((row, rowNum) =>\n                            row.map((tile, colNum) =>\n                                <Tile key={tile.coord.toString()} tile = {tile} onTeleport={onTeleport} getTileDirection={getTileDirection} gameState={gameState} />\n                            )\n                    )}\n                {\n                    escalators.map( (escalator) => <Escalator escalator={escalator} onEscalate={onEscalate}/>)\n                }\n                {\n                    tokens.map( (token) => <Token token={token} onTokenSelected={onTokenSelected}/>)\n                }\n                {\n                    walls.map( (wall) => <Wall wall={wall}/>  )\n                }     \n            </div>\n        </BoardContext.Provider>\n    )\n}\n\nexport default Board","const debug = (...params) => {\n    //console.log(...params)\n}\n\nconst info = (...params) => {\n    console.log(...params)\n}\n\nconst warn = (...params) => {\n    console.log(...params)\n}\nconst error = (...params) => {\n    console.error(...params)\n}\n\nexport default {\n    debug,\n    info,\n    warn,\n    error\n}","import logger from './logger'\n\nclass GameService {\n\n    constructor(gameId, playerName) {\n        this.handlers = []\n        this.gameId = gameId\n        this.playerName = playerName\n        this.allowedMovements = []\n    }\n\n    addHandler(newHandler) {\n        this.handlers = this.handlers.filter(handler => handler.id !== newHandler.id)\n        this.handlers.push(newHandler)\n    }\n\n    connect() {\n        return new Promise((resolve, reject) => {\n            let websocketURL = process.env.NODE_ENV === 'development' ? 'ws://127.0.0.1:3001' : 'wss://' + window.location.host\n            let finalURL = websocketURL+`?playerName=${this.playerName}`\n            this.connection = new WebSocket(finalURL)\n            logger.debug(\"Connecting to:\" + finalURL)\n            this.connection.onopen = () => {\n                resolve()\n            }\n            this.connection.onerror = (error) => {\n                logger.error(error)\n                logger.error('Sorry, but there\\'s some problem with your '\n                    + 'connection or the server is down.')\n                    reject(error)\n            }\n            \n            // most important part - incoming messages\n            this.connection.onmessage = (message) => {\n                try {\n                    var json = JSON.parse(message.data);\n                } catch (e) {\n                   logger.error('Invalid JSON: ', message.data);\n                    return\n                }\n            \n                if(json.gameId && json.gameId !== this.gameId) {\n                    logger.warn('Sent message for different game')\n                    return\n                }\n\n                for (let handler of this.handlers) {\n                    handler.handle(json)\n                }\n            }\n            setInterval(() => {\n                if (this.connection.readyState !== 1) {\n                    logger.error('Error missing connection');\n                }\n            }, 3000);\n          });\n       \n    }\n\n    getInitialUpdate() { \n        this.sendBasicCommand('INITIAL')\n    }\n\n    send(message) {\n        let messageObject = JSON.parse(message)\n        messageObject.gameId = this.gameId\n        let gameMessage = JSON.stringify(messageObject)\n\n        logger.debug(\"SEND: \" + gameMessage)\n        this.connection.send(gameMessage)\n    }\n\n    setMovements = (movements) => {\n        this.allowedMovements = movements\n    }\n    \n    sendBasicCommand = (command) => {\n        this.send(JSON.stringify(\n            {\n                type: command\n            }\n        ))\n    }\n    \n    sendMovement(command){\n        if (!this.allowedMovements.includes(command)) {\n            return\n        }\n        this.sendBasicCommand(command)\n    }\n    \n    reset = () => {\n        this.sendBasicCommand('RESET')\n    }\n    \n    moveRight = () => {\n       this.sendMovement('RIGHT')\n    }\n    \n    moveLeft = () => {\n        this.sendMovement('LEFT')\n    }\n    \n    moveDown = () => {\n        this.sendMovement('DOWN')\n    }\n    \n    moveUp = () => {\n        this.sendMovement('UP')\n    }\n    \n    doSomething = (playerName) => {\n        this.send(JSON.stringify(\n            {\n                type: 'DO-SOMETHING',\n                player: playerName\n            }\n        ))\n    }\n\n    teleport = (coord) => {\n        this.send(JSON.stringify(\n            {\n                type: \"TELEPORT\",\n                coord: coord\n            }\n        ))\n    }\n\n    escalate = (escalatorId) => {\n        this.send(JSON.stringify(\n            {\n                type: \"ESCALATE\",\n                id: escalatorId\n            }\n        ))\n    }\n\n\n}\n\nexport default GameService","class WallModel {\n    constructor(startCoord, endCoord) {\n        this.startCoord = startCoord\n        this.endCoord = endCoord\n    }\n\n    getStartRow() {\n        return Math.min(this.startCoord.y, this.endCoord.y) + 1\n    }\n\n    getStartCol() {\n        return Math.min(this.startCoord.x, this.endCoord.x) + 1\n    }\n\n    getRowSpan() {\n        return Math.max(1, Math.abs(this.startCoord.y - this.endCoord.y))\n    }\n\n    getColSpan() {\n        return Math.max(1, Math.abs(this.startCoord.x - this.endCoord.x))\n    }\n\n    isHorizontal() {\n        return this.startCoord.y === this.endCoord.y\n    }\n}\n\nexport { WallModel }","import up from \"../images/up.png\"\nimport down from \"../images/down.png\"\nimport left from \"../images/left.png\"\nimport right from \"../images/right.png\"\nconst MoveIndicator = ({ move, isSelf }) => {\n    let imgSrc\n    let keyIcon\n    if(move === 'LEFT') {\n        imgSrc = left\n        keyIcon = 'A'\n    } else if(move ==='RIGHT') {\n        imgSrc = right\n        keyIcon = 'D'\n    } else if(move ==='UP') {\n        imgSrc = up\n        keyIcon = 'W'\n    } else if(move ==='DOWN') {\n        imgSrc = down\n        keyIcon = 'S'\n    } else {\n        console.log(\"Fail, move: \" + move)\n    }\n    return (\n        < div className ='move-icon'>\n           <img src={imgSrc} alt='move' />\n           {isSelf ? <span>{keyIcon}</span> : \"\"}\n        </div>\n    )\n}\n\nexport default MoveIndicator","import MoveIndicator from './moveIndicator'\n\nconst OtherPlayer = ({ playerName, allowedMoves, doSomething }) => {\n\n    const onClickDoSomething = (_) => {\n        doSomething(playerName)\n    }\n    return (\n        < div className='player-other'>\n            <div className='player-bar'>\n                <label>{playerName}</label>\n                {\n                    allowedMoves.map(move =>  <MoveIndicator key={move} move={move} isSelf={false}></MoveIndicator>)\n                }\n                <button className='doSomethingButton' onClick={onClickDoSomething}>!</button>\n                \n            </div>\n        </div>\n    )\n}\n\nexport default OtherPlayer","import MoveIndicator from './moveIndicator'\n\nconst Moves = ({ playerName, allowedMoves }) => {\n\n    return (\n        < div className='player-self'>\n            <span id='mainPlayer'>{playerName}</span>\n            <h2>Moves</h2>\n            <div className = 'player-moves' >\n                {\n                    allowedMoves.map(move =>  <MoveIndicator key={move} move={move} isSelf={true}></MoveIndicator>)\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default Moves","import React from 'react'\n\nconst Notification = ({ notification }) => {\n    if (notification === null) {\n        return null\n    }\n\n    return (\n        <div className={notification.isGood ? 'notification' : 'notification-bad'}>\n            {notification.message}\n        </div>\n    )\n}\n\nexport default Notification","import React from 'react'\nimport { GameStates } from \"../models/gameState\"\n\nconst Toolbar = ({ gameState, remaining }) => {\n\n    let message = \"\"\n    if(gameState !== null) {\n        switch(gameState) {\n            case GameStates.EXPLORE:\n                message = \"Explore the maze! Remaining: \" + remaining\n                break\n            case GameStates.STEAL:\n                message = \"Steal the weapons!\"\n                break\n            case GameStates.ESCAPE:\n                message = \"Escape the Maze!\"\n                break\n            case GameStates.LOSS:\n                message = \"Game Over\"\n                break\n            case GameStates.WIN:\n                message = \"Win!\"\n                break\n            default:\n                throw new Error(\"Invalid game state\")\n        }\n    }\n    \n\n    return (\n        <div className='toolbar'>\n            {message}\n        </div>\n    )\n}\n\nexport default Toolbar","import React from 'react'\n\nconst Timer = ({ remainingSeconds }) => {\n    if (!remainingSeconds) {\n        return \"\"\n    }\n    const getTimeStr = (num) => {\n        const paddedString = \"00\" + num\n        return paddedString.substr(paddedString.length - 2)\n    }\n    const minutes = getTimeStr(Math.floor(remainingSeconds / 60))\n    const seconds = getTimeStr(remainingSeconds % 60)\n\n    const criticalTime = 10\n    const className = remainingSeconds > criticalTime ? 'timer' : 'timer-critical'\n    return (\n        <div className={className}>\n            {`${minutes}:${seconds}`}\n        </div>\n    )\n}\n\nexport default Timer","import '../App.css'\nimport React, { useState, useEffect } from 'react'\nimport Board from './board'\nimport GameService from '../services/gameService'\nimport logger from '../services/logger'\nimport Coordinate from '../models/coordinate'\nimport {GameStates} from '../models/gameState'\nimport {EscalatorModel} from '../models/escalator'\nimport {WallModel} from '../models/wallModel'\nimport { Tile, TileType } from '../models/tile'\nimport { Item } from '../models/item'\nimport { Token } from '../models/token'\nimport OtherPlayer from './playerIndicator'\nimport Moves from './moves'\nimport Notification from './notification'\nimport Toolbar from './toolbar'\nimport Timer from './Timer'\nimport { useParams } from 'react-router-dom'\n\n\nconst getCoordinate = (pos) => {\n  const x = parseInt(pos.x)\n  const y = parseInt(pos.y)\n  return new Coordinate(x, y)\n}\n\nconst getTileType = (type) => {\n  switch(type) {\n    case 0:\n      return TileType.NORMAL\n    case 1:\n      return TileType.WALL\n    case 2:\n      return TileType.EXIT\n    case 3:\n      return TileType.CONNECT\n    case 4:\n      return TileType.PORTAL\n    default:\n      return TileType.UNKNOWN\n  }\n}\n\nconst getTile = (tileData) => {\n  const itemData = tileData.item\n  let item\n  if(itemData) {\n    item = new Item(itemData.type, itemData.tokenType)\n  }\n\n  return new Tile(getCoordinate(tileData.pos), \n  getTileType(tileData.type), \n  tileData.hasItem, \n  item,\n  tileData.tokenType)\n}\n\nconst getTileRow = (row) => {\n  return row.map(tileData => getTile(tileData))\n}\n\nconst getTiles = (tiles) => {\n  const grid = tiles.map( row => getTileRow(row))\n  return grid\n}\n\nconst getEscalators = (escalators) => {\n  return escalators.map( escalator => new EscalatorModel(escalator.id, getCoordinate(escalator.start), getCoordinate(escalator.end)))\n}\n\nconst getWalls = (walls) => {\n  return walls.map( wall => new WallModel(getCoordinate(wall.start), getCoordinate(wall.end)))\n}\n\nconst getInitials = (str) => {\n  const split = str.split(\" \")\n  return split.map(substr => substr[0]).join('')\n}\n\nconst getSelectedBy = (selections, idx) => {\n  let selection = selections.find(selection => selection.selection === idx)\n  if (selection) {\n    return getInitials(selection.selectedBy)\n  }\n  return null\n}\n\nconst getTokens = (data) => {\n  const newTokens = data.tokens.map((tokenData, idx) =>\n  new Token(idx,\n    getCoordinate(tokenData.pos),\n    getSelectedBy(data.selections, idx),\n    tokenData.escaped,\n    tokenData.type))\n  return newTokens\n}\n\nfunction Game({realPlayerName}) {\n  const [updatedTiles, setTiles] = useState([[]])\n  const [escalators, setEscalators] = useState([])\n  const [walls, setWalls] = useState([])\n  const [tokens, setTokens] = useState([])\n  const [allowedMoves, setMoves] = useState([])\n  const [allPlayers, setAllPlayers] = useState([])\n  const [notificationMessage, setNotificationMessage] = useState(null)\n  const [remainingSeconds, setRemainingSeconds] = useState(null)\n  const [gameService, setGameService] = useState(null)\n  const [remainingSections, setRemainingSections] = useState(0)\n  const [gameState, setGameState] = useState(null)\n\n  const clearNotification = () => {\n    setNotificationMessage(null)\n  }\n  let { gameId } = useParams();\n  useEffect(() => {\n    let service = new GameService(gameId, realPlayerName)\n    const notify = (message, fade, isGood) => {\n      setNotificationMessage({\n        message: message,\n        isGood: isGood\n      })\n      if (!fade) {\n        return\n      }\n      setTimeout(() => {\n        clearNotification()\n      }, 5000)\n    }\n\n    let handler = {\n      id: 'app-updates',\n      handle: (json) => {\n        if (json.type === 'token-update') {\n          logger.debug('Token update!')\n          setTokens(getTokens(json.data))\n        } else if (json.type === 'board-update') {\n          logger.debug('Board UPDATE')\n          setTiles(getTiles(json.data.board.tiles))\n          setEscalators(getEscalators(json.data.board.escalators))\n          setWalls(getWalls(json.data.board.walls))\n          setTokens(getTokens(json.data.tokenData))\n          setRemainingSections(json.data.remainingSections)\n          setGameState(json.data.state)\n          clearNotification()\n        } else if (json.type === 'win') {\n          setGameState(GameStates.WIN)\n        } else if (json.type === 'movements') {\n          logger.debug(\"Setting movement\")\n          service.setMovements(json.data.movements)\n          setMoves(json.data.movements)\n        } else if (json.type === 'all-players') {\n          setAllPlayers(json.data)\n        } else if (json.type === 'do-something') {\n          notify(`${json.data.sender} wants you to do something.`, true, true)\n        } else if (json.type === 'timer-update') {\n          // probably can update in a different way \n          //date to finish makes this less chatty\n          //could have an interval here that counts down\n          //timer-update is sent only on time pickups and connections\n          setRemainingSeconds(json.data.seconds)\n        } else if (json.type === 'lose') {\n          setGameState(GameStates.LOSS)\n        }\n      }\n    }\n    service.addHandler(handler)\n    async function initialConnect() {\n      await service.connect()\n      service.getInitialUpdate()\n    }\n    initialConnect()\n    setGameService(service)\n  },\n  [gameId])\n\n\n  const reset = (_) => {\n    gameService.reset()\n  }\n\n  const doSomething = (otherPlayerName) => {\n    gameService.doSomething(otherPlayerName)\n  }\n\n  const otherPlayers = allPlayers.filter(playerInfo => playerInfo.playerName !== realPlayerName)\n  const showConnections = remainingSections !== 0\n  return (\n    <div className=\"App\">\n      <Notification notification={notificationMessage} />\n      <div className=\"board-space\">\n        <Toolbar gameState={gameState} remaining={remainingSections}/>\n        <div className=\"board-controls\">\n          <Timer remainingSeconds={remainingSeconds} />\n          <br />\n          <Moves playerName={realPlayerName} allowedMoves={allowedMoves} />\n          <br />\n          <h2 hidden={!otherPlayers.length}>Other Players:</h2>\n          {\n            otherPlayers.map(player => <OtherPlayer key={player.playerName}\n              playerName={player.playerName}\n              allowedMoves={player.moves}\n              isSelf={false}\n              doSomething={doSomething} />)\n          }\n          <button className='button' id='reset-button' onClick={reset}>Reset</button>\n        </div>\n        <Board gameState={gameState} grid={updatedTiles} tokens={tokens} escalators={escalators} walls={walls} gameService={gameService} />\n      </div>\n\n    </div >\n  );\n}\n\nexport default Game;\n","import React, { useRef } from 'react'\nimport {\n  useNavigate\n} from \"react-router-dom\"\nimport axios from 'axios';\nimport logger from '../services/logger'\n\nfunction Menu({playerName, setPlayerName}) {\n  const navigate = useNavigate();\n  const joinCodeRef = useRef(null)\n\n  const createGameClick = async () => {\n    const response = await axios.post('/games', {gameId: joinCodeRef.current.value});\n\n    logger.debug(response.data)\n    // The server responds with the id of the new user\n    const gameId = response.data.gameId;\n    logger.debug('Game Id response:' + gameId)\n    navigate(`/game/${gameId}`);\n  };\n\n  const joinGameClick = async () => {\n    const gameId = joinCodeRef.current.value\n    navigate(`/game/${gameId}`);\n  };\n\n  const handleNameChange = (event) => {\n    setPlayerName(event.target.value)\n  }\n\n  return (\n    <div className=\"menu\">\n      <h1>Magic Maze</h1>\n      <div className=\"menuSelections\">\n        <div className=\"menuRow\" >\n          <input type=\"text\" value={playerName} onChange={handleNameChange} placeholder='Nickname' className=\"inputText\" />\n        </div>\n        <div className=\"menuRow\" >\n        <input type=\"text\" ref={joinCodeRef} placeholder='Game Code' className=\"inputText\" />\n        </div>\n        <div className =\"menuRow\">\n          <button onClick={() => createGameClick()} className = \"button\" >Create</button>\n          <button onClick={joinGameClick} className = \"button\" >Join</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Menu;\n","import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './components/game';\nimport {\n  BrowserRouter as Router,\n  Routes, Route\n} from \"react-router-dom\"\nimport Menu from './components/menu';\n\n\nfunction App() {\n    const [playerName, setPlayerName] = useState('');\n  \n    return (\n    <Router>\n        <Routes>\n          <Route path=\"/game/:gameId\" element={<Game  realPlayerName = {playerName} />}/>\n          <Route path=\"/\" element={<Menu playerName={playerName} setPlayerName={setPlayerName}/>}/>\n         </Routes>\n      </Router>\n    );\n  }\n  \n  export default App;\nReactDOM.render(\n  <React.StrictMode>\n   \n   \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {\n  BrowserRouter as Router,\n  Routes, Route\n} from \"react-router-dom\"\nimport Menu from './components/menu';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}