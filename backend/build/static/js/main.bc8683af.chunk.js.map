{"version":3,"sources":["components/boardContext.js","models/tile.js","models/token.js","models/gameState.js","models/coordinate.js","models/tileDirection.js","images/up.png","images/down.png","images/left.png","images/right.png","images/coins_new.png","images/timer.png","images/axe2.png","images/sword.png","images/arrows2.png","images/potion.png","models/item.js","components/item.js","images/green-portal.png","images/orange-portal.png","images/yellow-portal.png","images/purple-portal.png","components/tilePortal.js","images/s1.png","components/tileExit.js","images/rock.png","components/tileBarrier.js","components/tileNormal.js","components/tileConnect.js","components/tileUnknown.js","components/tile.js","images/dwarf_right.png","images/warrior2.png","images/elf_bow.png","images/mage.png","components/offScreenIndicator.js","components/token.js","images/escalator_down.png","images/escalator_up.png","models/escalator.js","components/escalator.js","components/wall.js","components/board.js","services/logger.js","services/gameService.js","models/wallModel.js","components/moveIndicator.js","components/playerIndicator.js","components/moves.js","components/notification.js","components/toolbar.js","components/Timer.js","components/game.js","components/menu.js","App.js","index.js"],"names":["BoardContext","React","createContext","TileType","Tile","coord","type","hasItem","item","tokenType","this","TokenType","Token","id","selectedBy","escaped","GameStates","Coordinate","x","y","TileDirection","getTile","grid","length","ItemType","Item","itemImg","className","style","coinImg","timerImg","weapon","img","axe","color","sword","bow","potion","Error","getWeapon","backgroundColor","JSON","stringify","src","alt","Portal","tile","gameState","onTeleport","tileImg","orangePortal","purplePortal","yellowPortal","greenPortal","onClick","Exit","exit","Barrier","rockTile","NormalTile","Connect","getTileDirection","tileDirection","up","down","left","right","UnknownTile","content","tileCoord","gridColumnStart","gridRowStart","OffScreenIndicator","directionImg","indicatorImg","indicatorInfo","indicatorPositionStyle","display","bottom","justifyContent","alignItems","console","log","direction","flexDirection","getRightOffset","boardRect","tokenRect","Math","min","width","max","getBottomOffset","height","imgClass","token","onTokenSelected","useState","setIndicatorInfo","myRef","useRef","parentRef","useContext","useEffect","parent","checkIfInView","current","getBoundingClientRect","top","upDist","downDist","leftDist","rightDist","maxDist","addEventListener","removeEventListener","dwarf","elf","warrior","mage","ref","EscalatorOrientation","EscalatorModel","startCoord","endCoord","abs","minX","getMinX","minY","getMinY","Escalator","escImg","escalator","onEscalate","rowStart","colStart","getOrientation","downImg","upImg","tileStyle","gridRow","getRowSpan","gridColumn","getColSpan","Wall","wall","wallStyle","getStartRow","getStartCol","zIndex","isHorizontal","borderTop","borderLeft","Board","tokens","escalators","walls","gameService","send","selected","teleport","escalatorId","escalate","onLeftBorder","onRightBorder","onTopBorder","onBottomBorder","getDirection","gridHeight","gridWidth","boardStyle","marginLeft","marginTop","overflow","gridTemplateColumns","gridTemplateRows","gap","Provider","value","onKeyPress","event","key","toLowerCase","moveDown","moveUp","moveLeft","moveRight","tabIndex","map","row","rowNum","colNum","toString","error","GameService","gameId","playerName","setMovements","movements","allowedMovements","sendBasicCommand","command","reset","sendMovement","doSomething","player","handlers","newHandler","filter","handler","push","Promise","resolve","reject","finalURL","window","location","host","connection","WebSocket","logger","onopen","onerror","onmessage","message","json","parse","data","e","handle","setInterval","readyState","messageObject","gameMessage","includes","WallModel","MoveIndicator","imgSrc","keyIcon","move","isSelf","OtherPlayer","allowedMoves","_","Moves","Notification","notification","isGood","Toolbar","remaining","Timer","remainingSeconds","getTimeStr","num","paddedString","substr","minutes","floor","seconds","getCoordinate","pos","parseInt","tileData","itemData","getTileType","getTiles","tiles","getTileRow","getTokens","tokenData","idx","selections","selection","find","split","join","getSelectedBy","Game","realPlayerName","updatedTiles","setTiles","setEscalators","setWalls","setTokens","setMoves","allPlayers","setAllPlayers","notificationMessage","setNotificationMessage","setRemainingSeconds","setGameService","remainingSections","setRemainingSections","setGameState","clearNotification","useParams","service","fade","board","start","end","getEscalators","getWalls","state","sender","setTimeout","a","connect","getInitialUpdate","addHandler","initialConnect","otherPlayerName","otherPlayers","playerInfo","hidden","moves","Menu","setPlayerName","navigate","useNavigate","joinCodeRef","createGameClick","axios","post","response","joinGameClick","onChange","target","placeholder","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAIeA,G,MAFMC,IAAMC,iB,OCFvBC,GACU,EADVA,EAEQ,EAFRA,EAGM,EAHNA,EAIM,EAJNA,EAKS,EALTA,EAMQ,EAGNC,EACF,WAAYC,EAAOC,EAAMC,EAASC,EAAMC,GAAY,oBAChDC,KAAKL,MAAQA,EACbK,KAAKJ,KAAOA,EACZI,KAAKH,QAAUA,EACfG,KAAKF,KAAOA,EACZE,KAAKD,UAAYA,GCfnBE,EACK,EADLA,EAEI,EAFJA,EAGS,EAHTA,EAIG,EAGHC,EACF,WAAYC,EAAIR,EAAOS,EAAYC,EAAST,GAAO,oBAC/CI,KAAKG,GAAKA,EACVH,KAAKL,MAAQA,EACbK,KAAKI,WAAaA,EAClBJ,KAAKK,QAAUA,EACfL,KAAKJ,KAAOA,GCbdU,EACO,EADPA,EAEK,EAFLA,EAGM,EAHNA,EAII,EAJJA,EAKG,E,QCMMC,E,WAVX,WAAYC,EAAGC,GAAI,oBACfT,KAAKQ,EAAIA,EACTR,KAAKS,EAAIA,E,4CAGb,WACI,MAAM,IAAN,OAAWT,KAAKQ,EAAhB,aAAsBR,KAAKS,EAA3B,S,KCJFC,EACE,EADFA,EAEI,EAFJA,EAGI,EAHJA,EAIK,EAJLA,EAKO,EAGPC,EAAW,SAACC,EAAMjB,GACpB,OAAGA,EAAMc,EAAI,GAAKd,EAAMc,GAAKG,EAAKC,QAG/BlB,EAAMa,EAAI,GAAKb,EAAMa,GAAKI,EAAK,GAAGC,OAF1B,KAKJD,EAAKjB,EAAMc,GAAGd,EAAMa,IClBhB,UAA0B,+BCA1B,MAA0B,iCCA1B,MAA0B,iCCA1B,MAA0B,kCCA1B,MAA0B,sCCA1B,MAA0B,kCCA1B,MAA0B,iCCA1B,MAA0B,kCCA1B,MAA0B,oCCA1B,MAA0B,mCCArCM,EACM,EADNA,EAEO,EAFPA,EAGQ,EAGNC,EACF,WAAYnB,EAAMG,GAAY,oBAC1BC,KAAKJ,KAAOA,EACZI,KAAKD,UAAYA,G,OC2DVgB,EA/BF,SAAC,GAAY,IAClBC,EADOlB,EAAU,EAAVA,KAEPmB,EAAY,OACZC,EAAQ,GACZ,OAAOpB,EAAKF,MACR,KAAKkB,EACDE,EAAUG,EACVF,GAAa,QACb,MACJ,KAAKH,EACDE,EAAUI,EACVH,GAAa,QACb,MACJ,KAAKH,EACD,IAAMO,EAzCA,SAAEvB,GAChB,OAAOA,EAAKC,WACR,KAAKE,EACD,MAAO,CACHqB,IAAKC,EACLC,MAAO,UAEf,KAAKvB,EACD,MAAO,CACHqB,IAAKG,EACLD,MAAO,UAEf,KAAKvB,EACD,MAAO,CACHqB,IAAKI,EACLF,MAAO,SAEf,KAAKvB,EACD,MAAO,CACHqB,IAAKK,EACLH,MAAO,UAEf,QACI,MAAM,IAAII,MAAO,uBAkBFC,CAAU/B,GACzBkB,EAAUK,EAAOC,IACjBL,GAAa,UACbC,EAAMY,gBAAkBT,EAAOG,MAC/B,MACJ,QACI,MAAM,IAAII,MAAM,sBAAwBG,KAAKC,UAAUlC,IAI/D,OACI,qBAAKmB,UAAWA,EAAWC,MAAOA,EAAlC,SACI,qBAAKe,IAAKjB,EAASkB,IAAI,YC/DpB,OAA0B,yCCA1B,OAA0B,0CCA1B,OAA0B,0CCA1B,OAA0B,0CC8C1BC,GApCA,SAAC,GAAoC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,UAAWC,EAAiB,EAAjBA,WAE9B,KADaD,IAAc/B,GAEvB,OAAQ,cAAC,GAAD,CAAY8B,KAAQA,IAEhC,IACIG,EAEJ,OAAOH,EAAKrC,WACR,KAAKE,EACDsC,EAAUC,GACV,MACJ,KAAKvC,EACDsC,EAAUE,GACV,MACJ,KAAKxC,EACDsC,EAAUG,GACV,MACJ,KAAKzC,EACDsC,EAAUI,GACV,MACJ,QACI,MAAM,IAAIf,MAAM,sBAOxB,OACI,qBAAKX,UAzBO,cAyBZ,SACI,qBAAKgB,IAAKM,EAAStB,UAAU,aAAa2B,QAN9B,WAChBN,EAAWF,EAAKzC,QAKoDuC,IAAI,QCzCjE,OAA0B,+BC+B1BW,GA3BF,SAAC,GAAwB,IAAvBT,EAAsB,EAAtBA,KACPnB,GAD6B,EAAhBoB,UACD,aACVE,EAAUO,GAChB,OAAOV,EAAKrC,WACR,KAAKE,EACDgB,GAAa,cACb,MACJ,KAAKhB,EACDgB,GAAa,aACb,MACJ,KAAKhB,EACDgB,GAAa,kBACb,MACJ,KAAKhB,EACDgB,GAAa,YACb,MACJ,QACI,MAAM,IAAIW,MAAM,sBAGxB,OACI,qBAAKX,UAAWA,EAAhB,SACI,qBAAKgB,IAAKM,EAAStB,UAAU,aAAciB,IAAI,QC1B5C,OAA0B,iCCc1Ba,GAZC,WACZ,IACMR,EAAUS,GAGhB,MAFY,YAGR,qBAAK/B,UAHG,YAGR,SACI,qBAAKgB,IAAKM,EAAStB,UAAU,aAAciB,IAAI,QCW5Ce,GAVI,SAAC,GAAa,IAAZb,EAAW,EAAXA,KAEjB,OACI,qBAAKnB,UAFO,OAEZ,SACMmB,EAAKvC,QAAU,cAAC,EAAD,CAAMC,KAAMsC,EAAKtC,OAAU,QCmDzCoD,GApDC,SAAC,GAA0C,IAEnDX,EAFUH,EAAwC,EAAxCA,KAAMe,EAAkC,EAAlCA,iBAAkBd,EAAgB,EAAhBA,UAClCpB,EAAY,eAEVmC,EAAgBD,EAAiBf,GAGvC,KAFagB,IAAkB1C,GAAyB2B,IAAc/B,GAGlE,OAAQ,cAAC,GAAD,CAAY8B,KAAQA,IAEhC,OAAOgB,GACH,KAAK1C,EACD6B,EAAUc,EACV,MACJ,KAAK3C,EACD6B,EAAUe,EACV,MACJ,KAAK5C,EACD6B,EAAUgB,EACV,MACJ,KAAK7C,EACD6B,EAAUiB,EAKlB,OAAOpB,EAAKrC,WACR,KAAKE,EACDgB,GAAa,iBACb,MACJ,KAAKhB,EACDgB,GAAa,gBACb,MACJ,KAAKhB,EACDgB,GAAa,qBACb,MACJ,KAAKhB,EACDgB,GAAa,eACb,MACJ,QACI,MAAM,IAAIW,MAAM,sBAMxB,OACK,qBAAKX,UAAWA,EAAhB,SACG,qBAAKgB,IAAKM,EAAStB,UAAU,aAAciB,IAAI,QCpD5CuB,GARK,WAEhB,OACI,qBAAKxC,UAFS,kBCmDPvB,GA1CF,SAAC,GAAsD,IAC5DgE,EADOtB,EAAoD,EAApDA,KAAME,EAA8C,EAA9CA,WAAYa,EAAkC,EAAlCA,iBAAkBd,EAAgB,EAAhBA,UAE/C,OAAQD,EAAKxC,MACT,KAAKH,EACDiE,EAAU,cAAC,GAAD,CAAMtB,KAAMA,EAAMC,UAAWA,IACvC,MACJ,KAAK5C,EACDiE,EAAU,cAAC,GAAD,IACV,MACJ,KAAKjE,EACDiE,EAAU,cAAC,GAAD,IACV,MACJ,KAAKjE,EACDiE,EAAU,cAAC,GAAD,CAAStB,KAAMA,EAAMC,UAAWA,EAAWc,iBAAkBA,IACvE,MACJ,KAAK1D,EACDiE,EAAU,cAAC,GAAD,CAAQtB,KAAMA,EAAMC,UAAWA,EAAWC,WAAYA,IAChE,MACJ,KAAK7C,EACDiE,EAAU,cAAC,GAAD,CAAYtB,KAAMA,IAC5B,MACJ,QACI,MAAM,IAAIR,MAAM,qBAGxB,IAAmB+B,EAQnB,OACI,qBAAK1C,UAAU,iBAAiBC,OATjByC,EASkCvB,EAAKzC,MARvC,CACfiE,gBAAgB,GAAD,OAAKD,EAAUnD,EAAI,GAClCqD,aAAa,GAAD,OAAKF,EAAUlD,EAAI,KAM/B,SACMiD,KC7CC,OAA0B,wCCA1B,OAA0B,qCCA1B,OAA0B,oCCA1B,OAA0B,iCCkD1BI,GA3CY,SAAC,GAAoC,IACxDC,EADqBC,EAAkC,EAAlCA,aAAcC,EAAoB,EAApBA,cAEnCC,EAAyB,CACzBC,QAAS,OACTC,OAAQH,EAAcG,OACtBZ,MAAOS,EAAcT,MACrBa,eAAgB,SAChBC,WAAY,UAGhB,OADAC,QAAQC,IAAI,cACLP,EAAcQ,WACjB,KAAK/D,EACDqD,EAAeV,EACfa,EAAuBQ,cAAgB,SACvC,MACJ,KAAKhE,EACDqD,EAAeT,EACfY,EAAuBQ,cAAgB,iBACvC,MACJ,KAAKhE,EACDqD,EAAeR,EACfW,EAAuBQ,cAAgB,MACvC,MACJ,KAAKhE,EACDqD,EAAeP,EACfU,EAAuBQ,cAAgB,cACvC,MACJ,QACI,MAAM,IAAI9C,MAAM,mCAMxB,OACI,sBAAKX,UAAU,YAAYC,MAAOgD,EAAlC,UACI,qBAAKjC,IAAK8B,EAAc9C,UAAU,sBAAsBiB,IAAI,wBAC5D,qBAAKD,IAAK+B,EAAc/C,UAAU,kBAAkBiB,IAAI,4BChC9DyC,GAAiB,SAACC,EAAWC,GAC/B,OAAOC,KAAKC,IAAIH,EAAUI,MAAOF,KAAKG,IAAIL,EAAUpB,MAAQqB,EAAUrB,MAAO,KAG3E0B,GAAkB,SAACN,EAAWC,GAChC,OAAOC,KAAKC,IAAIH,EAAUO,OAAQL,KAAKG,IAAIL,EAAUR,OAASS,EAAUT,OAAQ,KAuHrElE,GApHD,SAAC,GAA+B,IA+DtCkF,EAOA9D,EAtES+D,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,gBACpB,EAA0CC,mBAAS,MAAnD,mBAAOtB,EAAP,KAAsBuB,EAAtB,KACMC,EAAQC,iBAAO,MACfC,EAAYC,qBAAWtG,GAwD7B,GAvDAuG,qBAAU,WACV,IAAMC,EAASH,EACf,SAASI,IACL,GAAIV,GAAUI,EAAMO,SAAYF,EAAOE,QAAvC,CAIA,IAAMnB,EAAYY,EAAMO,QAAQC,wBAC1BrB,EAAYkB,EAAOE,QAAQC,wBAOjC,GALIpB,EAAUqB,IAAMtB,EAAUR,QAC1BS,EAAUtB,KAAOqB,EAAUpB,OAC3BqB,EAAUT,OAASQ,EAAUsB,KAC7BrB,EAAUrB,MAAQoB,EAAUrB,KAG5BiC,EAAiB,UADrB,CAIA,IAAMW,EAASvB,EAAUsB,IAAMrB,EAAUT,OACnCgC,EAAWvB,EAAUqB,IAAMtB,EAAUR,OACrCiC,EAAWzB,EAAUrB,KAAOsB,EAAUrB,MACtC8C,EAAYzB,EAAUtB,KAAOqB,EAAUpB,MAGvC+C,EAAUzB,KAAKG,IAAIkB,EAAQC,EAAUC,EAAUC,GACrD,GAAGH,IAAWI,EACVf,EAAiB,CAACf,UAAW/D,EACzB0D,OAAQ,EACRZ,MAAOmB,GAAeC,EAAWC,UAClC,GAAGuB,IAAaG,EACnBf,EAAiB,CAACf,UAAW/D,EACzB0D,OAAQ,EACRZ,MAAOmB,GAAeC,EAAWC,UAClC,GAAGyB,IAAcC,EACpBf,EAAiB,CAACf,UAAW/D,EACzB0D,OAASc,GAAgBN,EAAWC,GACpCrB,MAAO,QACR,IAAG6C,IAAaE,EAKnB,MAAM,IAAI3E,MAAM,0BAJhB4D,EAAiB,CAACf,UAAW/D,EACzB0D,OAASc,GAAgBN,EAAWC,GACpCrB,MAAO,WArCXgC,EAAiB,MA8CzB,OAHAM,EAAOE,QAAQQ,iBAAiB,SAAUT,GAC1CA,IAEO,WACHD,EAAOE,QAAQS,oBAAoB,SAAUV,MAE9C,CAACV,EAAOM,KAEPN,GAASA,EAAMhF,QACf,MAAO,GAWX,OAPIgF,EAAMjF,WACNgF,EAAW,iBACHC,EAAMjF,aACdgF,EAAW,SAIRC,EAAMzF,MACT,KAAKK,EACDqB,EAAMoF,GACNtB,GAAY,eACZ,MACJ,KAAKnF,EACDqB,EAAMqF,GACNvB,GAAY,aACZ,MACJ,KAAKnF,EACDqB,EAAMsF,GACNxB,GAAY,mBACZ,MACJ,KAAKnF,EACDqB,EAAMuF,GACNzB,GAAY,cACZ,MACJ,QACI,MAAM,IAAIxD,MAAM,sBAKxB,IAMmB+B,EAQnB,OACI,sBAAKmD,IAAKrB,EAAOxE,UAAWmE,EAAUlE,OATvByC,EASwC0B,EAAM1F,MAR9C,CACfiE,gBAAgB,GAAD,OAAKD,EAAUnD,EAAI,GAClCqD,aAAa,GAAD,OAAKF,EAAUlD,EAAI,KAMsCmC,QAfzD,WACRyC,GACAC,EAAgBD,IAapB,UACI,qBAAKpD,IAAKX,EAAKY,IAAI,UACC,OAAlB+B,EAAyB,cAAC,GAAD,CAAoBA,cAAeA,EAAeD,aAAc1C,IAAU,OCnIlG,OAA0B,2CCA1B,OAA0B,yCCAnCyF,GACI,EADJA,GAEE,EAGFC,G,WACF,WAAY7G,EAAI8G,EAAYC,GAAW,oBACnClH,KAAKG,GAAKA,EACVH,KAAKiH,WAAaA,EAClBjH,KAAKkH,SAAWA,E,2CAGpB,WACI,OAAOpC,KAAKC,IAAI/E,KAAKiH,WAAWzG,EAAGR,KAAKkH,SAAS1G,K,qBAGrD,WACI,OAAOsE,KAAKC,IAAI/E,KAAKiH,WAAWxG,EAAGT,KAAKkH,SAASzG,K,wBAGrD,WACI,OAAOqE,KAAKqC,IAAInH,KAAKiH,WAAWxG,EAAIT,KAAKkH,SAASzG,GAAK,I,wBAG3D,WACG,OAAOqE,KAAKqC,IAAInH,KAAKiH,WAAWzG,EAAIR,KAAKkH,SAAS1G,GAAK,I,4BAG1D,WACI,IAAM4G,EAAOpH,KAAKqH,UACZC,EAAOtH,KAAKuH,UAClB,OAAKH,IAASpH,KAAKiH,WAAWzG,GAAK8G,IAAStH,KAAKiH,WAAWxG,GACpD2G,IAASpH,KAAKkH,SAAS1G,GAAK8G,IAAStH,KAAKkH,SAASzG,EAChDsG,GAEAA,O,KCAJS,GA/BG,SAAC,GAA+B,IAG1CC,EAHaC,EAA4B,EAA5BA,UAAWC,EAAiB,EAAjBA,WACtBC,EAAWF,EAAUH,UAAY,EACjCM,EAAWH,EAAUL,UAAY,EAEvC,OAAOK,EAAUI,kBACb,KAAKf,GACDU,EAASM,GACT,MACJ,KAAKhB,GACDU,EAASO,GACT,MACJ,QACI,MAAM,IAAIpG,MAAO,uBAGzB,IAAMqG,EAAY,CACdC,QAAQ,GAAD,OAAKN,EAAL,mBAAwBF,EAAUS,cACzCC,WAAW,GAAD,OAAKP,EAAL,mBAAwBH,EAAUW,eAOhD,OACI,qBAAMpH,UAAY,YAAYC,MAAS+G,EAAvC,SACI,qBAAKhH,UAAY,gBAAgBgB,IAAKwF,EAAQ7E,QANlC,WAChB+E,EAAWD,EAAUvH,KAKmD+B,IAAI,iBCRrEoG,GArBF,SAAC,GAAa,IAAXC,EAAU,EAAVA,KACNC,EAAY,CACdN,QAAQ,GAAD,OAAKK,EAAKE,cAAV,mBAAkCF,EAAKJ,cAC9CC,WAAW,GAAD,OAAKG,EAAKG,cAAV,mBAAkCH,EAAKF,cACjDM,OAAQ,GAWZ,OARGJ,EAAKK,gBACJJ,EAAUK,UAAY,qBACtBL,EAAUrD,OAAQ,QAElBqD,EAAUM,WAAa,qBACvBN,EAAUxD,MAAQ,OAIlB,qBAAM/D,UAAY,OAAOC,MAASsH,KCmE3BO,GA1ED,SAAC,GAAiE,IAA/D1G,EAA8D,EAA9DA,UAAWzB,EAAmD,EAAnDA,KAAMoI,EAA6C,EAA7CA,OAAQC,EAAqC,EAArCA,WAAYC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YAEnD1D,EAAQC,iBAAO,MAafJ,EAAkB,SAACD,GAErB8D,EAAYC,KAAKrH,KAAKC,UAClB,CACIpC,KAAM,WACNyJ,SAAUhE,EAAMlF,OAKtBmC,EAAa,SAAC3C,GAChBwJ,EAAYG,SAAS3J,IAGnBgI,EAAa,SAAC4B,GAChBJ,EAAYK,SAASD,IAGnBpG,EAAmB,SAACf,GACtB,OrCvBR,SAAsBA,EAAMxB,GACxB,GAAmB,IAAhBA,EAAKC,OACJ,OAAOH,EAGX,IAAM6C,EAAO5C,EAAQC,EAAM,IAAIL,EAAW6B,EAAKzC,MAAMa,EAAI,EAAG4B,EAAKzC,MAAMc,IACjE+C,EAAQ7C,EAAQC,EAAM,IAAIL,EAAW6B,EAAKzC,MAAMa,EAAI,EAAG4B,EAAKzC,MAAMc,IAClE4C,EAAK1C,EAAQC,EAAM,IAAIL,EAAW6B,EAAKzC,MAAMa,EAAG4B,EAAKzC,MAAMc,EAAI,IAC/D6C,EAAO3C,EAAQC,EAAM,IAAIL,EAAW6B,EAAKzC,MAAMa,EAAG4B,EAAKzC,MAAMc,EAAI,IACjEgJ,EAAgC,IAAjBrH,EAAKzC,MAAMa,EAC1BkJ,EAAgBtH,EAAKzC,MAAMa,IAAMI,EAAK,GAAGC,OAAS,EAClD8I,EAA+B,IAAjBvH,EAAKzC,MAAMc,EACzBmJ,EAAiBxH,EAAKzC,MAAMc,IAAMG,EAAKC,OAAS,EACtD,OAAI4I,GAAiBlG,GAAQA,EAAK3D,OAASH,EAChCiB,EACAgJ,GAAkBlG,GAASA,EAAM5D,OAASH,EAC1CiB,EACAiJ,GAAgBtG,GAAMA,EAAGzD,OAASH,EAClCiB,EACAkJ,GAAmBtG,GAAQA,EAAK1D,OAASH,EACzCiB,EAEAA,EqCCAmJ,CAAazH,EAAMxB,IAGxBkJ,EAAalJ,EAAKC,OAElBkJ,EAA4B,IAAhBnJ,EAAKC,OAAe,EAAID,EAAK,GAAGC,OAE5CmJ,EAAa,CACfC,WAAY,OACZC,UAAW,OACXC,SAAU,OACVhG,QAAS,OACTiG,oBAAoB,UAAD,OAAYL,EAAZ,WACnBM,iBAAiB,UAAD,OAAYP,EAAZ,WAChBQ,IAAK,OAGT,OACI,cAAC,EAAaC,SAAd,CAAuBC,MAAO/E,EAA9B,SACI,sBAAKxE,UAAU,aAAa6F,IAAKrB,EAAOvE,MAAQ8I,EAAYS,WAlD7C,SAACC,GACY,MAA5BA,EAAMC,IAAIC,cACVzB,EAAY0B,WACuB,MAA5BH,EAAMC,IAAIC,cACjBzB,EAAY2B,SACuB,MAA5BJ,EAAMC,IAAIC,cACjBzB,EAAY4B,WACuB,MAA5BL,EAAMC,IAAIC,eACjBzB,EAAY6B,aA0C4EC,SAAU,EAAlG,UAEQrK,EAAKsK,KAAI,SAACC,EAAKC,GAAN,OACDD,EAAID,KAAI,SAAC9I,EAAMiJ,GAAP,OACJ,cAAC,GAAD,CAAkCjJ,KAAQA,EAAME,WAAYA,EAAYa,iBAAkBA,EAAkBd,UAAWA,GAA5GD,EAAKzC,MAAM2L,kBAIlCrC,EAAWiC,KAAK,SAACxD,GAAD,OAAe,cAAC,GAAD,CAAWA,UAAWA,EAAWC,WAAYA,OAG5EqB,EAAOkC,KAAK,SAAC7F,GAAD,OAAW,cAAC,GAAD,CAAOA,MAAOA,EAAOC,gBAAiBA,OAG7D4D,EAAMgC,KAAK,SAAC3C,GAAD,OAAU,cAAC,GAAD,CAAMA,KAAMA,a,SC9DtC,GAfD,aAeC,GAPF,WAAgB,IAAD,GACxB,EAAAhE,SAAQC,IAAR,oBAMW,GAJD,WAAgB,IAAD,GACzB,EAAAD,SAAQgH,MAAR,oBCiIWC,G,WAzIX,WAAYC,EAAQC,GAAa,IAAD,gCAoEhCC,aAAe,SAACC,GACZ,EAAKC,iBAAmBD,GArEI,KAwEhCE,iBAAmB,SAACC,GAChB,EAAK3C,KAAKrH,KAAKC,UACX,CACIpC,KAAMmM,MA3Ec,KAuFhCC,MAAQ,WACJ,EAAKF,iBAAiB,UAxFM,KA2FhCd,UAAY,WACT,EAAKiB,aAAa,UA5FW,KA+FhClB,SAAW,WACP,EAAKkB,aAAa,SAhGU,KAmGhCpB,SAAW,WACP,EAAKoB,aAAa,SApGU,KAuGhCnB,OAAS,WACL,EAAKmB,aAAa,OAxGU,KA2GhCC,YAAc,SAACR,GACX,EAAKtC,KAAKrH,KAAKC,UACX,CACIpC,KAAM,eACNuM,OAAQT,MA/GY,KAoHhCpC,SAAW,SAAC3J,GACR,EAAKyJ,KAAKrH,KAAKC,UACX,CACIpC,KAAM,WACND,MAAOA,MAxHa,KA6HhC6J,SAAW,SAACD,GACR,EAAKH,KAAKrH,KAAKC,UACX,CACIpC,KAAM,WACNO,GAAIoJ,MAhIZvJ,KAAKoM,SAAW,GAChBpM,KAAKyL,OAASA,EACdzL,KAAK0L,WAAaA,EAClB1L,KAAK6L,iBAAmB,G,8CAG5B,SAAWQ,GACPrM,KAAKoM,SAAWpM,KAAKoM,SAASE,QAAO,SAAAC,GAAO,OAAIA,EAAQpM,KAAOkM,EAAWlM,MAC1EH,KAAKoM,SAASI,KAAKH,K,qBAGvB,WAAW,IAAD,OACN,OAAO,IAAII,SAAQ,SAACC,EAASC,GACzB,IACIC,EADgF,SAAWC,OAAOC,SAASC,KACnF,eAAD,OAAgB,EAAKrB,YAChD,EAAKsB,WAAa,IAAIC,UAAUL,GAChCM,GAAa,iBAAmBN,GAChC,EAAKI,WAAWG,OAAS,WACrBT,KAEJ,EAAKM,WAAWI,QAAU,SAAC7B,GACvB2B,GAAa3B,GACb2B,GAAa,+EAETP,EAAOpB,IAIf,EAAKyB,WAAWK,UAAY,SAACC,GACzB,IACI,IAAIC,EAAOxL,KAAKyL,MAAMF,EAAQG,MAChC,MAAOC,GAEL,YADDR,GAAa,iBAAkBI,EAAQG,MAI1C,GAAGF,EAAK9B,QAAU8B,EAAK9B,SAAW,EAAKA,OACnCyB,GAAY,uCADhB,CARqC,qBAajB,EAAKd,UAbY,IAarC,2BAAmC,SACvBuB,OAAOJ,IAdkB,iCAiBzCK,aAAY,WAC2B,IAA/B,EAAKZ,WAAWa,YAChBX,GAAa,8BAElB,U,8BAKX,WACIlN,KAAK8L,iBAAiB,a,kBAG1B,SAAKwB,GACD,IAAIQ,EAAgB/L,KAAKyL,MAAMF,GAC/BQ,EAAcrC,OAASzL,KAAKyL,OAC5B,IAAIsC,EAAchM,KAAKC,UAAU8L,GAEjCZ,GAAa,SAAWa,GACxB/N,KAAKgN,WAAW5D,KAAK2E,K,0BAezB,SAAahC,GACJ/L,KAAK6L,iBAAiBmC,SAASjC,IAGpC/L,KAAK8L,iBAAiBC,O,KCxFxBkC,G,WACF,WAAYhH,EAAYC,GAAW,oBAC/BlH,KAAKiH,WAAaA,EAClBjH,KAAKkH,SAAWA,E,+CAGpB,WACI,OAAOpC,KAAKC,IAAI/E,KAAKiH,WAAWxG,EAAGT,KAAKkH,SAASzG,GAAK,I,yBAG1D,WACI,OAAOqE,KAAKC,IAAI/E,KAAKiH,WAAWzG,EAAGR,KAAKkH,SAAS1G,GAAK,I,wBAG1D,WACI,OAAOsE,KAAKG,IAAI,EAAGH,KAAKqC,IAAInH,KAAKiH,WAAWxG,EAAIT,KAAKkH,SAASzG,M,wBAGlE,WACI,OAAOqE,KAAKG,IAAI,EAAGH,KAAKqC,IAAInH,KAAKiH,WAAWzG,EAAIR,KAAKkH,SAAS1G,M,0BAGlE,WACI,OAAOR,KAAKiH,WAAWxG,IAAMT,KAAKkH,SAASzG,M,KCOpCyN,GA1BO,SAAC,GAAsB,IACrCC,EACAC,EAFiBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OAkB3B,MAfY,SAATD,GACCF,EAAS5K,EACT6K,EAAU,KACI,UAARC,GACNF,EAAS3K,EACT4K,EAAU,KACI,OAARC,GACNF,EAAS9K,EACT+K,EAAU,KACI,SAARC,GACNF,EAAS7K,EACT8K,EAAU,KAEV7J,QAAQC,IAAI,eAAiB6J,GAG7B,sBAAMpN,UAAW,YAAjB,UACG,qBAAKgB,IAAKkM,EAAQjM,IAAI,SACrBoM,EAAS,+BAAOF,IAAkB,OCJ/BG,GAnBK,SAAC,GAA+C,IAA7C7C,EAA4C,EAA5CA,WAAY8C,EAAgC,EAAhCA,aAActC,EAAkB,EAAlBA,YAK7C,OACI,qBAAMjL,UAAU,eAAhB,SACI,sBAAKA,UAAU,aAAf,UACI,gCAAQyK,IAEJ8C,EAAatD,KAAI,SAAAmD,GAAI,OAAK,cAAC,GAAD,CAA0BA,KAAMA,EAAMC,QAAQ,GAA1BD,MAElD,wBAAQpN,UAAU,oBAAoB2B,QAVvB,SAAC6L,GACxBvC,EAAYR,IASJ,qBCGDgD,GAfD,SAAC,GAAkC,IAAhChD,EAA+B,EAA/BA,WAAY8C,EAAmB,EAAnBA,aAEzB,OACI,sBAAMvN,UAAU,cAAhB,UACI,sBAAMd,GAAG,aAAT,SAAuBuL,IACvB,uCACA,qBAAKzK,UAAY,eAAjB,SAEQuN,EAAatD,KAAI,SAAAmD,GAAI,OAAK,cAAC,GAAD,CAA0BA,KAAMA,EAAMC,QAAQ,GAA1BD,YCInDM,GAZM,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACpB,OAAqB,OAAjBA,EACO,KAIP,qBAAK3N,UAAW2N,EAAaC,OAAS,eAAiB,mBAAvD,SACKD,EAAatB,WC2BXwB,GAjCC,SAAC,GAA8B,IAA5BzM,EAA2B,EAA3BA,UAAW0M,EAAgB,EAAhBA,UAEtBzB,EAAU,GACd,GAAiB,OAAdjL,EACC,OAAOA,GACH,KAAK/B,EACDgN,EAAU,gCAAkCyB,EAC5C,MACJ,KAAKzO,EACDgN,EAAU,qBACV,MACJ,KAAKhN,EACDgN,EAAU,mBACV,MACJ,KAAKhN,EACDgN,EAAU,YACV,MACJ,KAAKhN,EACDgN,EAAU,OACV,MACJ,QACI,MAAM,IAAI1L,MAAM,sBAK5B,OACI,qBAAKX,UAAU,UAAf,SACKqM,KCTE0B,GApBD,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,iBACb,IAAKA,EACD,MAAO,GAEX,IAAMC,EAAa,SAACC,GAChB,IAAMC,EAAe,KAAOD,EAC5B,OAAOC,EAAaC,OAAOD,EAAavO,OAAS,IAE/CyO,EAAUJ,EAAWpK,KAAKyK,MAAMN,EAAmB,KACnDO,EAAUN,EAAWD,EAAmB,IAGxChO,EAAYgO,EADG,GAC+B,QAAU,iBAC9D,OACI,qBAAKhO,UAAWA,EAAhB,mBACQqO,EADR,YACmBE,M,QCGrBC,GAAgB,SAACC,GACrB,IAAMlP,EAAImP,SAASD,EAAIlP,GACjBC,EAAIkP,SAASD,EAAIjP,GACvB,OAAO,IAAIF,EAAWC,EAAGC,IAoBrBE,GAAU,SAACiP,GACf,IACI9P,EADE+P,EAAWD,EAAS9P,KAM1B,OAJG+P,IACD/P,EAAO,IAAIiB,EAAK8O,EAASjQ,KAAMiQ,EAAS9P,YAGnC,IAAIL,EAAK+P,GAAcG,EAASF,KAxBrB,SAAC9P,GACnB,OAAOA,GACL,KAAK,EACH,OAAOH,EACT,KAAK,EACH,OAAOA,EACT,KAAK,EACH,OAAOA,EACT,KAAK,EACH,OAAOA,EACT,KAAK,EACH,OAAOA,EACT,QACE,OAAOA,GAYXqQ,CAAYF,EAAShQ,MACrBgQ,EAAS/P,QACTC,EACA8P,EAAS7P,YAOLgQ,GAAW,SAACC,GAEhB,OADaA,EAAM9E,KAAK,SAAAC,GAAG,OALV,SAACA,GAClB,OAAOA,EAAID,KAAI,SAAA0E,GAAQ,OAAIjP,GAAQiP,MAIJK,CAAW9E,OAyBtC+E,GAAY,SAACzC,GAOjB,OANkBA,EAAKzE,OAAOkC,KAAI,SAACiF,EAAWC,GAAZ,OAClC,IAAIlQ,EAAMkQ,EACRX,GAAcU,EAAUT,KAXN,SAACW,EAAYD,GACjC,IAAIE,EAAYD,EAAWE,MAAK,SAAAD,GAAS,OAAIA,EAAUA,YAAcF,KACrE,OAAIE,EACiBA,EAAUlQ,WAPboQ,MAAM,KACXtF,KAAI,SAAAmE,GAAM,OAAIA,EAAO,MAAIoB,KAAK,IAQpC,KAOLC,CAAcjD,EAAK4C,WAAYD,GAC/BD,EAAU9P,QACV8P,EAAUvQ,UAwHC+Q,OApHf,YAAiC,IAAlBC,EAAiB,EAAjBA,eACb,EAAiCrL,mBAAS,CAAC,KAA3C,mBAAOsL,EAAP,KAAqBC,EAArB,KACA,EAAoCvL,mBAAS,IAA7C,mBAAO0D,EAAP,KAAmB8H,EAAnB,KACA,EAA0BxL,mBAAS,IAAnC,mBAAO2D,EAAP,KAAc8H,EAAd,KACA,EAA4BzL,mBAAS,IAArC,mBAAOyD,EAAP,KAAeiI,EAAf,KACA,EAAiC1L,mBAAS,IAA1C,mBAAOiJ,EAAP,KAAqB0C,EAArB,KACA,EAAoC3L,mBAAS,IAA7C,mBAAO4L,EAAP,KAAmBC,EAAnB,KACA,EAAsD7L,mBAAS,MAA/D,mBAAO8L,EAAP,KAA4BC,EAA5B,KACA,EAAgD/L,mBAAS,MAAzD,mBAAO0J,EAAP,KAAyBsC,EAAzB,KACA,EAAsChM,mBAAS,MAA/C,mBAAO4D,EAAP,KAAoBqI,EAApB,KACA,EAAkDjM,mBAAS,GAA3D,mBAAOkM,EAAP,KAA0BC,EAA1B,KACA,EAAkCnM,mBAAS,MAA3C,mBAAOlD,EAAP,KAAkBsP,EAAlB,KAEMC,EAAoB,WACxBN,EAAuB,OAEnB7F,GAAWoG,eAAXpG,OACN5F,qBAAU,WACR,IAAIiM,EAAU,IAAItG,GAAYC,GAAQmF,GAclCrE,EAAU,CACZpM,GAAI,cACJwN,OAAQ,SAACJ,GAfI,IAACD,EAASyE,EAgBH,iBAAdxE,EAAK3N,MACPsN,GAAa,iBACb+D,EAAUf,GAAU3C,EAAKE,QACF,iBAAdF,EAAK3N,MACdsN,GAAa,gBACb4D,EAASf,GAASxC,EAAKE,KAAKuE,MAAMhC,QAClCe,EAxEY,SAAC9H,GACrB,OAAOA,EAAWiC,KAAK,SAAAxD,GAAS,OAAI,IAAIV,GAAeU,EAAUvH,GAAIsP,GAAc/H,EAAUuK,OAAQxC,GAAc/H,EAAUwK,SAuEvGC,CAAc5E,EAAKE,KAAKuE,MAAM/I,aAC5C+H,EArEO,SAAC9H,GAChB,OAAOA,EAAMgC,KAAK,SAAA3C,GAAI,OAAI,IAAI0F,GAAUwB,GAAclH,EAAK0J,OAAQxC,GAAclH,EAAK2J,SAoErEE,CAAS7E,EAAKE,KAAKuE,MAAM9I,QAClC+H,EAAUf,GAAU3C,EAAKE,KAAK0C,YAC9BuB,EAAqBnE,EAAKE,KAAKgE,mBAC/BE,EAAapE,EAAKE,KAAK4E,OACvBT,KACuB,QAAdrE,EAAK3N,KACd+R,EAAarR,GACU,cAAdiN,EAAK3N,MACdsN,GAAa,oBACb4E,EAAQnG,aAAa4B,EAAKE,KAAK7B,WAC/BsF,EAAS3D,EAAKE,KAAK7B,YACI,gBAAd2B,EAAK3N,KACdwR,EAAc7D,EAAKE,MACI,iBAAdF,EAAK3N,MApCJ0N,EAqCH,GAAD,OAAIC,EAAKE,KAAK6E,OAAd,+BArCaP,GAqCsC,EApC7DT,EAAuB,CACrBhE,QAASA,EACTuB,QAkCiE,IAhC9DkD,GAGLQ,YAAW,WACTX,MACC,MA4BwB,iBAAdrE,EAAK3N,KAKd2R,EAAoBhE,EAAKE,KAAK+B,SACP,SAAdjC,EAAK3N,MACd+R,EAAarR,KA/CL,4CAoDd,sBAAAkS,EAAA,sEACQV,EAAQW,UADhB,OAEEX,EAAQY,mBAFV,4CApDc,sBAmDdZ,EAAQa,WAAWpG,GAnDL,mCAwDdqG,GACApB,EAAeM,KAEjB,CAACrG,KAGD,IAIMS,GAAc,SAAC2G,GACnB1J,EAAY+C,YAAY2G,IAGpBC,GAAe3B,EAAW7E,QAAO,SAAAyG,GAAU,OAAIA,EAAWrH,aAAekF,KAE/E,OACE,sBAAK3P,UAAU,MAAf,UACE,cAAC,GAAD,CAAc2N,aAAcyC,IAC5B,sBAAKpQ,UAAU,cAAf,UACE,cAAC,GAAD,CAASoB,UAAWA,EAAW0M,UAAW0C,IAC1C,sBAAKxQ,UAAU,iBAAf,UACE,cAAC,GAAD,CAAOgO,iBAAkBA,IACzB,uBACA,cAAC,GAAD,CAAOvD,WAAYkF,EAAgBpC,aAAcA,IACjD,uBACA,oBAAIwE,QAASF,GAAajS,OAA1B,4BAEEiS,GAAa5H,KAAI,SAAAiB,GAAM,OAAI,cAAC,GAAD,CACzBT,WAAYS,EAAOT,WACnB8C,aAAcrC,EAAO8G,MACrB3E,QAAQ,EACRpC,YAAaA,IAJ8BC,EAAOT,eAMtD,wBAAQzK,UAAU,SAASd,GAAG,eAAeyC,QA5BvC,SAAC6L,GACbtF,EAAY6C,SA2BN,sBAEF,cAAC,GAAD,CAAO3J,UAAWA,EAAWzB,KAAMiQ,EAAc7H,OAAQA,EAAQC,WAAYA,EAAYC,MAAOA,EAAOC,YAAaA,W,kBC7J7G+J,OA1Cf,YAA4C,IAA7BxH,EAA4B,EAA5BA,WAAYyH,EAAgB,EAAhBA,cACnBC,EAAWC,eACXC,EAAc5N,iBAAO,MAErB6N,EAAe,uCAAG,8BAAAf,EAAA,sEACCgB,KAAMC,KAAK,SAAU,CAAChI,OAAQ6H,EAAYtN,QAAQwE,QADnD,OAChBkJ,EADgB,OAGtBxG,GAAawG,EAASjG,MAEhBhC,EAASiI,EAASjG,KAAKhC,OAC7ByB,GAAa,oBAAsBzB,GACnC2H,EAAS,SAAD,OAAU3H,IAPI,2CAAH,qDAUfkI,EAAa,uCAAG,4BAAAnB,EAAA,sDACd/G,EAAS6H,EAAYtN,QAAQwE,MACnC4I,EAAS,SAAD,OAAU3H,IAFE,2CAAH,qDASnB,OACE,sBAAKxK,UAAU,OAAf,UACE,4CACA,sBAAKA,UAAU,iBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,uBAAOrB,KAAK,OAAO4K,MAAOkB,EAAYkI,SATrB,SAAClJ,GACxByI,EAAczI,EAAMmJ,OAAOrJ,QAQ6CsJ,YAAY,WAAW7S,UAAU,gBAErG,qBAAKA,UAAU,UAAf,SACA,uBAAOrB,KAAK,OAAOkH,IAAKwM,EAAaQ,YAAY,YAAY7S,UAAU,gBAEvE,sBAAKA,UAAW,UAAhB,UACE,wBAAQ2B,QAAS,kBAAM2Q,KAAmBtS,UAAY,SAAtD,oBACA,wBAAQ2B,QAAS+Q,EAAe1S,UAAY,SAA5C,4BCnBO8S,OAbjB,WACI,MAAoCxO,mBAAS,IAA7C,mBAAOmG,EAAP,KAAmByH,EAAnB,KAEA,OACA,cAAC,KAAD,UACI,eAAC,KAAD,WACE,cAAC,KAAD,CAAOa,KAAK,gBAAgBC,QAAS,cAAC,GAAD,CAAOrD,eAAkBlF,MAC9D,cAAC,KAAD,CAAOsI,KAAK,IAAIC,QAAS,cAAC,GAAD,CAAMvI,WAAYA,EAAYyH,cAAeA,YAOhFe,IAASC,OACP,cAAC,IAAMC,WAAP,IAIAC,SAASC,eAAe,SCnB1BJ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.bc8683af.chunk.js","sourcesContent":["import React from 'react';\n\nconst BoardContext = React.createContext();\n\nexport default BoardContext;","let TileType = {\n    UNKNOWN: -1,\n    NORMAL: 1,\n    EXIT: 2,\n    WALL: 3,\n    CONNECT: 4,\n    PORTAL: 5\n}\n\nclass Tile {\n    constructor(coord, type, hasItem, item, tokenType) {\n        this.coord = coord\n        this.type = type\n        this.hasItem = hasItem\n        this.item = item\n        this.tokenType = tokenType\n    }\n}\n\nexport { Tile, TileType }\n","const TokenType = {\n    DWARF: 1,\n    MAGE: 2,\n    BARBARIAN: 3,\n    ELF: 4\n}\n\nclass Token {\n    constructor(id, coord, selectedBy, escaped, type) {\n        this.id = id\n        this.coord = coord\n        this.selectedBy = selectedBy\n        this.escaped = escaped\n        this.type = type\n    }\n}\n\nexport { Token, TokenType }","const GameStates = {\n    EXPLORE: 0,\n    STEAL: 1,\n    ESCAPE: 2,\n    LOSS: 3,\n    WIN: 4\n}\n\nexport { GameStates }","class Coordinate {\n    constructor(x, y) {\n        this.x = x\n        this.y = y\n    }\n\n    toString() {\n        return `(${this.x}, ${this.y})`\n    }\n}\n\nexport default Coordinate","import { TileType } from \"./tile\"\nimport Coordinate from \"./coordinate\"\n\nconst TileDirection = {\n    UP: 0,\n    DOWN: 1,\n    LEFT: 2,\n    RIGHT: 3,\n    UNKNOWN: 4\n}\n\nconst getTile  = (grid, coord) => {\n    if(coord.y < 0 || coord.y >= grid.length) {\n        return null\n    }\n    if(coord.x < 0 || coord.x >= grid[0].length) {\n        return null\n    }\n    return grid[coord.y][coord.x]\n}\n\nfunction getDirection(tile, grid) {\n    if(grid.length === 0 ) {\n        return TileDirection.UNKNOWN\n    }\n\n    const left = getTile(grid, new Coordinate(tile.coord.x - 1, tile.coord.y))\n    const right = getTile(grid, new Coordinate(tile.coord.x + 1, tile.coord.y))\n    const up = getTile(grid, new Coordinate(tile.coord.x, tile.coord.y - 1))\n    const down = getTile(grid, new Coordinate(tile.coord.x, tile.coord.y + 1))\n    const onLeftBorder = tile.coord.x === 0\n    const onRightBorder = tile.coord.x === grid[0].length - 1\n    const onTopBorder = tile.coord.y === 0\n    const onBottomBorder = tile.coord.y === grid.length - 1\n    if( onLeftBorder || (left && left.type === TileType.UNKNOWN)) {\n        return TileDirection.LEFT\n    } else if( onRightBorder || (right && right.type === TileType.UNKNOWN)) {\n        return TileDirection.RIGHT\n    } else if( onTopBorder || (up && up.type === TileType.UNKNOWN)) {\n        return TileDirection.UP\n    } else if( onBottomBorder || (down && down.type === TileType.UNKNOWN)) {\n        return TileDirection.DOWN\n    } else {\n        return TileDirection.UNKNOWN\n    }\n}\n\nexport { TileDirection, getDirection }\n","export default __webpack_public_path__ + \"static/media/up.552f859e.png\";","export default __webpack_public_path__ + \"static/media/down.40f8ab30.png\";","export default __webpack_public_path__ + \"static/media/left.aa0f5ff4.png\";","export default __webpack_public_path__ + \"static/media/right.9a984c67.png\";","export default __webpack_public_path__ + \"static/media/coins_new.2254d122.png\";","export default __webpack_public_path__ + \"static/media/timer.c21cbb42.png\";","export default __webpack_public_path__ + \"static/media/axe2.3337d039.png\";","export default __webpack_public_path__ + \"static/media/sword.003d0d39.png\";","export default __webpack_public_path__ + \"static/media/arrows2.6d27d5a7.png\";","export default __webpack_public_path__ + \"static/media/potion.dc85f7b3.png\";","let ItemType = {\n    COIN: 0,\n    TIMER: 1,\n    WEAPON: 2\n}\n\nclass Item {\n    constructor(type, tokenType) {\n        this.type = type\n        this.tokenType = tokenType\n    }\n}\n\nexport { Item, ItemType }","import React from 'react'\nimport coinImg from \"../images/coins_new.png\"\nimport timerImg from \"../images/timer.png\"\nimport axe from \"../images/axe2.png\"\nimport sword from \"../images/sword.png\"\nimport bow from \"../images/arrows2.png\"\nimport potion from \"../images/potion.png\"\nimport {ItemType} from \"../models/item\"\nimport {TokenType} from \"../models/token\"\n\nconst getWeapon = ( item ) => {\n    switch(item.tokenType) {\n        case TokenType.DWARF:\n            return {\n                img: axe,\n                color: 'orange'\n            }\n        case TokenType.BARBARIAN:\n            return {\n                img: sword,\n                color: 'yellow'\n            }\n        case TokenType.ELF:\n            return {\n                img: bow,\n                color: 'green'\n            }\n        case TokenType.MAGE:\n            return {\n                img: potion,\n                color: 'purple'\n            }\n        default:\n            throw new Error( \"Invalid token type\" )\n    }\n}\n    \nconst Item = ({item}) => {\n    let itemImg\n    let className = 'item'\n    let style = {}\n    switch(item.type) {\n        case ItemType.COIN:\n            itemImg = coinImg\n            className += ' coin'\n            break;\n        case ItemType.TIMER:\n            itemImg = timerImg\n            className += ' time'\n            break;\n        case ItemType.WEAPON:\n            const weapon = getWeapon(item)\n            itemImg = weapon.img\n            className += ' weapon'\n            style.backgroundColor = weapon.color\n            break\n        default:\n            throw new Error('Unknown item type: ' + JSON.stringify(item))\n    }\n\n\n    return (\n        <div className={className} style={style} >\n            <img src={itemImg} alt='item' />\n        </div>\n    )\n}\n\nexport default Item","export default __webpack_public_path__ + \"static/media/green-portal.e3d54e5f.png\";","export default __webpack_public_path__ + \"static/media/orange-portal.e0a89eb5.png\";","export default __webpack_public_path__ + \"static/media/yellow-portal.f832ee4b.png\";","export default __webpack_public_path__ + \"static/media/purple-portal.f9f584fe.png\";","import { TokenType } from \"../models/token\"\nimport {GameStates} from \"../models/gameState\"\n\nimport greenPortal from \"../images/green-portal.png\"\nimport orangePortal from \"../images/orange-portal.png\"\nimport yellowPortal from \"../images/yellow-portal.png\"\nimport purplePortal from \"../images/purple-portal.png\"\n\nimport NormalTile from \"./tileNormal\"\n\nconst Portal = ({tile, gameState, onTeleport }) => {\n    const show = gameState !== GameStates.ESCAPE\n    if(!show) {\n        return (<NormalTile tile = {tile}/>)\n    }\n    let className = 'tile-portal'\n    let tileImg\n\n    switch(tile.tokenType) {\n        case TokenType.DWARF:\n            tileImg = orangePortal\n            break;\n        case TokenType.MAGE:\n            tileImg = purplePortal\n            break;\n        case TokenType.BARBARIAN:\n            tileImg = yellowPortal\n            break;\n        case TokenType.ELF:\n            tileImg = greenPortal\n            break;\n        default:\n            throw new Error('Unknown token type')\n    }\n\n    const handleClick = () => {\n        onTeleport(tile.coord)\n    }\n\n    return (\n        <div className={className}>\n            <img src={tileImg} className=\"tile-image\" onClick={handleClick} alt='' /> \n        </div>\n    )\n}\n\nexport default Portal","export default __webpack_public_path__ + \"static/media/s1.cd3f2f2d.png\";","import { TokenType } from \"../models/token\"\n\nimport exit from \"../images/s1.png\"\n\nconst Exit = ({tile, gameState }) => {\n    let className = 'tile-exit'\n    const tileImg = exit\n    switch(tile.tokenType) {\n        case TokenType.DWARF:\n            className += ' exit-dwarf'\n            break;\n        case TokenType.MAGE:\n            className += ' exit-mage'\n            break;\n        case TokenType.BARBARIAN:\n            className += ' exit-barbarian'\n            break;\n        case TokenType.ELF:\n            className += ' exit-elf'\n            break;\n        default:\n            throw new Error('Unknown token type')\n    }\n\n    return (\n        <div className={className}>\n            <img src={tileImg} className=\"tile-image\"  alt='' /> \n        </div>\n    )\n}\n\nexport default Exit","export default __webpack_public_path__ + \"static/media/rock.3d4d808c.png\";","import rockTile from \"../images/rock.png\"\n\nconst Barrier = () => {\n    let className = 'tile-exit'\n    const tileImg = rockTile\n    className = 'tile-wall'\n\n    return (\n        <div className={className}>\n            <img src={tileImg} className=\"tile-image\"  alt='' /> \n        </div>\n    )\n}\n\nexport default Barrier","import { TileType } from \"../models/tile\"\nimport { TokenType } from \"../models/token\"\n\nimport Item from \"./item\"\nimport Connect from \"./tileConnect\"\nimport Portal from \"./tilePortal\"\nimport Exit from \"./tileExit\"\nimport Barrier from \"./tileBarrier\"\n\n\nconst NormalTile = ({tile }) => {\n    let className = 'tile'\n    return (\n        <div className={className}>\n            { tile.hasItem ? <Item item={tile.item}/> : null}\n        </div>\n       \n    )\n}\n\nexport default NormalTile","\nimport { TokenType } from \"../models/token\"\nimport { GameStates } from \"../models/gameState\"\nimport { TileDirection } from \"../models/tileDirection\"\n\nimport up from \"../images/up.png\"\nimport down from \"../images/down.png\"\nimport left from \"../images/left.png\"\nimport right from \"../images/right.png\"\n\nimport NormalTile from \"./tileNormal\"\n\n\nconst Connect = ({tile, getTileDirection, gameState }) => {\n    let className = 'tile-connect'\n    let tileImg\n    const tileDirection = getTileDirection(tile)\n    const show = tileDirection !== TileDirection.UNKNOWN && gameState === GameStates.EXPLORE\n\n    if(!show) {\n        return (<NormalTile tile = {tile}/>)\n    }\n    switch(tileDirection) {\n        case TileDirection.UP:\n            tileImg = up\n            break\n        case TileDirection.DOWN:\n            tileImg = down\n            break\n        case TileDirection.LEFT:\n            tileImg = left\n            break\n        case TileDirection.RIGHT:\n            tileImg = right\n            break\n        default:\n            //do nothing\n    }\n    switch(tile.tokenType) {\n        case TokenType.DWARF:\n            className += ' connect-dwarf'\n            break;\n        case TokenType.MAGE:\n            className += ' connect-mage'\n            break;\n        case TokenType.BARBARIAN:\n            className += ' connect-barbarian'\n            break;\n        case TokenType.ELF:\n            className += ' connect-elf'\n            break;\n        default:\n            throw new Error('Unknown token type')\n    }\n\n\n    //temporary hack, when the tile direction is unknown the connection point must be connected\n\n    return (\n         <div className={className}>\n            <img src={tileImg} className=\"tile-image\"  alt='' />\n        </div>    \n    )\n}\n\nexport default Connect","const UnknownTile = () => {\n    const className = 'tile-unknown'\n    return (\n        <div className={className}>\n        </div>\n    )\n}\n\nexport default UnknownTile","import { TileType } from \"../models/tile\"\n\nimport Connect from \"./tileConnect\"\nimport Portal from \"./tilePortal\"\nimport Exit from \"./tileExit\"\nimport Barrier from \"./tileBarrier\"\nimport NormalTile from \"./tileNormal\"\nimport UnknownTile from \"./tileUnknown\"\n\n\nconst Tile = ({tile, onTeleport, getTileDirection, gameState }) => {\n    let content\n    switch (tile.type) {\n        case TileType.EXIT:\n            content = <Exit tile={tile} gameState={gameState} />\n            break\n        case TileType.WALL:\n            content = <Barrier/>\n            break\n        case TileType.UNKNOWN:\n            content = <UnknownTile />\n            break\n        case TileType.CONNECT:\n            content = <Connect tile={tile} gameState={gameState} getTileDirection={getTileDirection} />\n            break\n        case TileType.PORTAL:\n            content = <Portal tile={tile} gameState={gameState} onTeleport={onTeleport}/>\n            break\n        case TileType.NORMAL:\n            content = <NormalTile tile={tile}/>\n            break\n        default:\n            throw new Error(\"Invalid tile type\")\n    }\n\n    const tileStyle = (tileCoord) => {\n        const style =  {\n        gridColumnStart: `${tileCoord.x + 1}`,\n        gridRowStart: `${tileCoord.y + 1}`,\n     }\n     return style\n    }\n\n    return (\n        <div className='tile-container' style={tileStyle(tile.coord)}>\n            { content }\n           \n        </div>\n       \n    )\n}\n\nexport default Tile","export default __webpack_public_path__ + \"static/media/dwarf_right.3de0ca4b.png\";","export default __webpack_public_path__ + \"static/media/warrior2.a0cb9f8d.png\";","export default __webpack_public_path__ + \"static/media/elf_bow.93f90f79.png\";","export default __webpack_public_path__ + \"static/media/mage.23ebe66e.png\";","import {TileDirection} from\"../models/tileDirection\"\n\nimport up from \"../images/up.png\"\nimport down from \"../images/down.png\"\nimport left from \"../images/left.png\"\nimport right from \"../images/right.png\"\n\nconst OffScreenIndicator = ({indicatorImg, indicatorInfo }) => {\n    let directionImg\n    let indicatorPositionStyle = {\n        display: \"flex\",\n        bottom: indicatorInfo.bottom,\n        right: indicatorInfo.right,\n        justifyContent: \"center\",\n        alignItems: \"center\"\n    }\n    console.log('Offscreen!')\n    switch(indicatorInfo.direction) {\n        case TileDirection.UP:\n            directionImg = up\n            indicatorPositionStyle.flexDirection = \"column\"\n            break\n        case TileDirection.DOWN:\n            directionImg = down\n            indicatorPositionStyle.flexDirection = \"column-reverse\"\n            break\n        case TileDirection.LEFT:\n            directionImg = left\n            indicatorPositionStyle.flexDirection = \"row\"\n            break\n        case TileDirection.RIGHT:\n            directionImg = right\n            indicatorPositionStyle.flexDirection = \"row-reverse\"\n            break\n        default:\n            throw new Error(\"Unsupported offscreen direction\")\n    }\n\n\n\n    \n    return (\n        <div className='offscreen' style={indicatorPositionStyle}>\n            <img src={directionImg} className=\"offscreen-direction\" alt=\"offscreen direction\"/>\n            <img src={indicatorImg} className=\"offscreen-image\" alt='offscreen indicator' /> \n        </div>\n       \n    )\n}\n\nexport default OffScreenIndicator","import React, {useState, useEffect, useRef, useContext} from 'react'\nimport dwarf from \"../images/dwarf_right.png\"\nimport warrior from \"../images/warrior2.png\"\nimport elf from \"../images/elf_bow.png\"\nimport mage from \"../images/mage.png\"\n\nimport { TokenType } from \"../models/token\"\nimport {TileDirection} from\"../models/tileDirection\"\n\nimport BoardContext from \"./boardContext\"\nimport OffScreenIndicator from './offScreenIndicator'\n\nconst getRightOffset = (boardRect, tokenRect) => {\n    return Math.min(boardRect.width, Math.max(boardRect.right - tokenRect.right, 0))\n}\n\nconst getBottomOffset = (boardRect, tokenRect) => {\n    return Math.min(boardRect.height, Math.max(boardRect.bottom - tokenRect.bottom, 0))\n} \n\nconst Token = ({ token, onTokenSelected}) => {\n    const [indicatorInfo, setIndicatorInfo] = useState(null)\n    const myRef = useRef(null);\n    const parentRef = useContext(BoardContext)\n    useEffect(() => {\n    const parent = parentRef\n    function checkIfInView() {\n        if(!token || !myRef.current || !parent.current) {\n            setIndicatorInfo(null)\n            return\n        }\n        const tokenRect = myRef.current.getBoundingClientRect()\n        const boardRect = parent.current.getBoundingClientRect()\n        const isInView = (\n            tokenRect.top < boardRect.bottom &&\n            tokenRect.left < boardRect.right &&\n            tokenRect.bottom > boardRect.top &&\n            tokenRect.right > boardRect.left\n        );\n        if(isInView) {\n            setIndicatorInfo(null)\n            return\n        }\n        const upDist = boardRect.top - tokenRect.bottom\n        const downDist = tokenRect.top - boardRect.bottom\n        const leftDist = boardRect.left - tokenRect.right\n        const rightDist = tokenRect.left - boardRect.right\n\n\n        const maxDist = Math.max(upDist, downDist, leftDist, rightDist)\n        if(upDist === maxDist) {\n            setIndicatorInfo({direction: TileDirection.UP, \n                bottom: 0,\n                right: getRightOffset(boardRect, tokenRect)})\n        } else if(downDist === maxDist) {\n            setIndicatorInfo({direction: TileDirection.DOWN,\n                bottom: 0,\n                right: getRightOffset(boardRect, tokenRect)})\n        } else if(rightDist === maxDist) {\n            setIndicatorInfo({direction: TileDirection.RIGHT,\n                bottom:  getBottomOffset(boardRect, tokenRect),\n                right: 0})\n        } else if(leftDist === maxDist) {\n            setIndicatorInfo({direction: TileDirection.LEFT,\n                bottom:  getBottomOffset(boardRect, tokenRect),\n                right: 0})\n        } else {\n            throw new Error(\"No direction specified\")\n        }\n    }\n\n    parent.current.addEventListener('scroll', checkIfInView);\n    checkIfInView();\n\n    return () => {\n        parent.current.removeEventListener('scroll', checkIfInView);\n    };\n    }, [token, parentRef]);\n\n    if(!token || token.escaped ) {\n        return ''\n    }\n\n    let imgClass\n    if (token.selectedBy) {\n        imgClass = 'token-selected'\n    } else if (!token.selectedBy) {\n        imgClass = 'token'\n    }\n\n    let img\n    switch(token.type) {\n        case TokenType.DWARF:\n            img = dwarf\n            imgClass += \" token-dwarf\"\n            break;\n        case TokenType.ELF:\n            img = elf\n            imgClass += \" token-elf\"\n            break;\n        case TokenType.BARBARIAN:\n            img = warrior\n            imgClass += \" token-barbarian\"\n            break;\n        case TokenType.MAGE:\n            img = mage\n            imgClass += \" token-mage\"\n            break;\n        default:\n            throw new Error(\"Unknown token type\")\n    }\n\n    \n    \n    const onClick = () => {\n        if (token) {\n            onTokenSelected(token)\n        }\n    }\n\n    const tileStyle = (tileCoord) => {\n        const style =  {\n        gridColumnStart: `${tileCoord.x + 1}`,\n        gridRowStart: `${tileCoord.y + 1}`,\n     }\n     return style\n    }\n\n    return (\n        <div ref={myRef} className={imgClass} style={tileStyle(token.coord)} onClick={onClick}>\n            <img src={img} alt='token' />\n           {  indicatorInfo !== null ? <OffScreenIndicator indicatorInfo={indicatorInfo} indicatorImg={img} /> : \"\"  }\n        </div>\n    )\n}\n\nexport default Token","export default __webpack_public_path__ + \"static/media/escalator_down.03b0327b.png\";","export default __webpack_public_path__ + \"static/media/escalator_up.671e7897.png\";","const EscalatorOrientation = {\n    DOWN: 0,\n    UP: 1\n}\n\nclass EscalatorModel {\n    constructor(id, startCoord, endCoord) {\n        this.id = id\n        this.startCoord = startCoord\n        this.endCoord = endCoord\n    }\n\n    getMinX() {\n        return Math.min(this.startCoord.x, this.endCoord.x)\n    }\n\n    getMinY() {\n        return Math.min(this.startCoord.y, this.endCoord.y)\n    }\n\n    getRowSpan() {\n        return Math.abs(this.startCoord.y - this.endCoord.y) + 1\n    }\n\n    getColSpan() {\n       return Math.abs(this.startCoord.x - this.endCoord.x) + 1\n    }\n\n    getOrientation() {\n        const minX = this.getMinX()\n        const minY = this.getMinY()\n        if( (minX === this.startCoord.x && minY === this.startCoord.y) \n            || (minX === this.endCoord.x && minY === this.endCoord.y )) {\n            return EscalatorOrientation.DOWN\n        } else {\n            return EscalatorOrientation.UP\n        }\n    }\n}\n\nexport { EscalatorModel, EscalatorOrientation }","import downImg from \"../images/escalator_down.png\"\nimport upImg from \"../images/escalator_up.png\"\nimport {EscalatorOrientation} from '../models/escalator'\n\nconst Escalator = ({ escalator, onEscalate }) => {\n    const rowStart = escalator.getMinY() + 1\n    const colStart = escalator.getMinX() + 1\n    let escImg\n    switch(escalator.getOrientation()) {\n        case EscalatorOrientation.DOWN:\n            escImg = downImg\n            break;\n        case EscalatorOrientation.UP:\n            escImg = upImg\n            break;\n        default:\n            throw new Error (\"Invalid Orientation\")\n    }\n\n    const tileStyle = {\n        gridRow: `${rowStart} / span ${escalator.getRowSpan()}`,\n        gridColumn: `${colStart} / span ${escalator.getColSpan()}`,\n    }\n\n    const handleClick = () => {\n        onEscalate(escalator.id)\n    }\n\n    return (\n        < div className = 'escalator' style = {tileStyle} >\n            <img className = 'escalator-img' src={escImg} onClick={handleClick} alt='escalator' />\n        </div>\n    )\n}\n\nexport default Escalator","\nconst Wall = ( {wall}) => {\n    const wallStyle = {\n        gridRow: `${wall.getStartRow()} / span ${wall.getRowSpan()}`,\n        gridColumn: `${wall.getStartCol()} / span ${wall.getColSpan()}`,\n        zIndex: 1\n    }\n\n    if(wall.isHorizontal()) {\n        wallStyle.borderTop = '10px solid #000000'\n        wallStyle.height ='0px'\n    } else {\n        wallStyle.borderLeft = '10px solid #000000'\n        wallStyle.width = '0px'\n    }\n\n    return (\n        < div className = 'wall' style = {wallStyle} >\n        </div>\n    )\n}\n\nexport default Wall","import React, {useRef} from 'react'\n\n\nimport BoardContext from './boardContext'\nimport Tile from './tile'\nimport { getDirection } from '../models/tileDirection'\nimport Token  from './token'\nimport Escalator from './escalator'\nimport Wall from './wall'\n\nconst Board = ({ gameState, grid, tokens, escalators, walls, gameService }) => {\n    \n    const myRef = useRef(null)\n    const handleKeyPress = (event) => {\n        if (event.key.toLowerCase() === 's') {\n            gameService.moveDown()\n        } else if (event.key.toLowerCase() === 'w') {\n            gameService.moveUp()\n        } else if (event.key.toLowerCase() === 'a') {\n            gameService.moveLeft()\n        } else if (event.key.toLowerCase() === 'd') {\n            gameService.moveRight()\n        }\n    }\n\n    const onTokenSelected = (token) => {\n        //sends with token.id (Where does this come from? is it always populated correctly?)\n        gameService.send(JSON.stringify(\n            {\n                type: \"SELECTED\",\n                selected: token.id\n            }\n        ))\n    }\n\n    const onTeleport = (coord) => {\n        gameService.teleport(coord)\n    }\n\n    const onEscalate = (escalatorId) => {\n        gameService.escalate(escalatorId)\n    }\n\n    const getTileDirection = (tile) => {\n        return getDirection(tile, grid)\n    }\n\n    const gridHeight = grid.length\n\n    const gridWidth = grid.length === 0 ? 0 : grid[0].length\n\n    const boardStyle = {\n        marginLeft: '36px',\n        marginTop: '36px',\n        overflow: 'auto',\n        display: 'grid',\n        gridTemplateColumns: `repeat(${gridWidth}, 64px)`,\n        gridTemplateRows: `repeat(${gridHeight}, 64px)`,\n        gap: '0px'\n     } \n\n    return (\n        <BoardContext.Provider value={myRef}>\n            <div className=\"game-board\" ref={myRef} style= {boardStyle} onKeyPress={handleKeyPress} tabIndex={0}>\n                {\n                    grid.map((row, rowNum) =>\n                            row.map((tile, colNum) =>\n                                <Tile key={tile.coord.toString()} tile = {tile} onTeleport={onTeleport} getTileDirection={getTileDirection} gameState={gameState} />\n                            )\n                    )}\n                {\n                    escalators.map( (escalator) => <Escalator escalator={escalator} onEscalate={onEscalate}/>)\n                }\n                {\n                    tokens.map( (token) => <Token token={token} onTokenSelected={onTokenSelected}/>)\n                }\n                {\n                    walls.map( (wall) => <Wall wall={wall}/>  )\n                }     \n            </div>\n        </BoardContext.Provider>\n    )\n}\n\nexport default Board","const debug = (...params) => {\n    //console.log(...params)\n}\n\nconst info = (...params) => {\n    console.log(...params)\n}\n\nconst warn = (...params) => {\n    console.log(...params)\n}\nconst error = (...params) => {\n    console.error(...params)\n}\n\nexport default {\n    debug,\n    info,\n    warn,\n    error\n}","import logger from './logger'\n\nclass GameService {\n\n    constructor(gameId, playerName) {\n        this.handlers = []\n        this.gameId = gameId\n        this.playerName = playerName\n        this.allowedMovements = []\n    }\n\n    addHandler(newHandler) {\n        this.handlers = this.handlers.filter(handler => handler.id !== newHandler.id)\n        this.handlers.push(newHandler)\n    }\n\n    connect() {\n        return new Promise((resolve, reject) => {\n            let websocketURL = process.env.NODE_ENV === 'development' ? 'ws://127.0.0.1:3001' : 'wss://' + window.location.host\n            let finalURL = websocketURL+`?playerName=${this.playerName}`\n            this.connection = new WebSocket(finalURL)\n            logger.debug(\"Connecting to:\" + finalURL)\n            this.connection.onopen = () => {\n                resolve()\n            }\n            this.connection.onerror = (error) => {\n                logger.error(error)\n                logger.error('Sorry, but there\\'s some problem with your '\n                    + 'connection or the server is down.')\n                    reject(error)\n            }\n            \n            // most important part - incoming messages\n            this.connection.onmessage = (message) => {\n                try {\n                    var json = JSON.parse(message.data);\n                } catch (e) {\n                   logger.error('Invalid JSON: ', message.data);\n                    return\n                }\n            \n                if(json.gameId && json.gameId !== this.gameId) {\n                    logger.warn('Sent message for different game')\n                    return\n                }\n\n                for (let handler of this.handlers) {\n                    handler.handle(json)\n                }\n            }\n            setInterval(() => {\n                if (this.connection.readyState !== 1) {\n                    logger.error('Error missing connection');\n                }\n            }, 3000);\n          });\n       \n    }\n\n    getInitialUpdate() { \n        this.sendBasicCommand('INITIAL')\n    }\n\n    send(message) {\n        let messageObject = JSON.parse(message)\n        messageObject.gameId = this.gameId\n        let gameMessage = JSON.stringify(messageObject)\n\n        logger.debug(\"SEND: \" + gameMessage)\n        this.connection.send(gameMessage)\n    }\n\n    setMovements = (movements) => {\n        this.allowedMovements = movements\n    }\n    \n    sendBasicCommand = (command) => {\n        this.send(JSON.stringify(\n            {\n                type: command\n            }\n        ))\n    }\n    \n    sendMovement(command){\n        if (!this.allowedMovements.includes(command)) {\n            return\n        }\n        this.sendBasicCommand(command)\n    }\n    \n    reset = () => {\n        this.sendBasicCommand('RESET')\n    }\n    \n    moveRight = () => {\n       this.sendMovement('RIGHT')\n    }\n    \n    moveLeft = () => {\n        this.sendMovement('LEFT')\n    }\n    \n    moveDown = () => {\n        this.sendMovement('DOWN')\n    }\n    \n    moveUp = () => {\n        this.sendMovement('UP')\n    }\n    \n    doSomething = (playerName) => {\n        this.send(JSON.stringify(\n            {\n                type: 'DO-SOMETHING',\n                player: playerName\n            }\n        ))\n    }\n\n    teleport = (coord) => {\n        this.send(JSON.stringify(\n            {\n                type: \"TELEPORT\",\n                coord: coord\n            }\n        ))\n    }\n\n    escalate = (escalatorId) => {\n        this.send(JSON.stringify(\n            {\n                type: \"ESCALATE\",\n                id: escalatorId\n            }\n        ))\n    }\n\n\n}\n\nexport default GameService","class WallModel {\n    constructor(startCoord, endCoord) {\n        this.startCoord = startCoord\n        this.endCoord = endCoord\n    }\n\n    getStartRow() {\n        return Math.min(this.startCoord.y, this.endCoord.y) + 1\n    }\n\n    getStartCol() {\n        return Math.min(this.startCoord.x, this.endCoord.x) + 1\n    }\n\n    getRowSpan() {\n        return Math.max(1, Math.abs(this.startCoord.y - this.endCoord.y))\n    }\n\n    getColSpan() {\n        return Math.max(1, Math.abs(this.startCoord.x - this.endCoord.x))\n    }\n\n    isHorizontal() {\n        return this.startCoord.y === this.endCoord.y\n    }\n}\n\nexport { WallModel }","import up from \"../images/up.png\"\nimport down from \"../images/down.png\"\nimport left from \"../images/left.png\"\nimport right from \"../images/right.png\"\nconst MoveIndicator = ({ move, isSelf }) => {\n    let imgSrc\n    let keyIcon\n    if(move === 'LEFT') {\n        imgSrc = left\n        keyIcon = 'A'\n    } else if(move ==='RIGHT') {\n        imgSrc = right\n        keyIcon = 'D'\n    } else if(move ==='UP') {\n        imgSrc = up\n        keyIcon = 'W'\n    } else if(move ==='DOWN') {\n        imgSrc = down\n        keyIcon = 'S'\n    } else {\n        console.log(\"Fail, move: \" + move)\n    }\n    return (\n        < div className ='move-icon'>\n           <img src={imgSrc} alt='move' />\n           {isSelf ? <span>{keyIcon}</span> : \"\"}\n        </div>\n    )\n}\n\nexport default MoveIndicator","import MoveIndicator from './moveIndicator'\n\nconst OtherPlayer = ({ playerName, allowedMoves, doSomething }) => {\n\n    const onClickDoSomething = (_) => {\n        doSomething(playerName)\n    }\n    return (\n        < div className='player-other'>\n            <div className='player-bar'>\n                <label>{playerName}</label>\n                {\n                    allowedMoves.map(move =>  <MoveIndicator key={move} move={move} isSelf={false}></MoveIndicator>)\n                }\n                <button className='doSomethingButton' onClick={onClickDoSomething}>!</button>\n                \n            </div>\n        </div>\n    )\n}\n\nexport default OtherPlayer","import MoveIndicator from './moveIndicator'\n\nconst Moves = ({ playerName, allowedMoves }) => {\n\n    return (\n        < div className='player-self'>\n            <span id='mainPlayer'>{playerName}</span>\n            <h2>Moves</h2>\n            <div className = 'player-moves' >\n                {\n                    allowedMoves.map(move =>  <MoveIndicator key={move} move={move} isSelf={true}></MoveIndicator>)\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default Moves","import React from 'react'\n\nconst Notification = ({ notification }) => {\n    if (notification === null) {\n        return null\n    }\n\n    return (\n        <div className={notification.isGood ? 'notification' : 'notification-bad'}>\n            {notification.message}\n        </div>\n    )\n}\n\nexport default Notification","import React from 'react'\nimport { GameStates } from \"../models/gameState\"\n\nconst Toolbar = ({ gameState, remaining }) => {\n\n    let message = \"\"\n    if(gameState !== null) {\n        switch(gameState) {\n            case GameStates.EXPLORE:\n                message = \"Explore the maze! Remaining: \" + remaining\n                break\n            case GameStates.STEAL:\n                message = \"Steal the weapons!\"\n                break\n            case GameStates.ESCAPE:\n                message = \"Escape the Maze!\"\n                break\n            case GameStates.LOSS:\n                message = \"Game Over\"\n                break\n            case GameStates.WIN:\n                message = \"Win!\"\n                break\n            default:\n                throw new Error(\"Invalid game state\")\n        }\n    }\n    \n\n    return (\n        <div className='toolbar'>\n            {message}\n        </div>\n    )\n}\n\nexport default Toolbar","import React from 'react'\n\nconst Timer = ({ remainingSeconds }) => {\n    if (!remainingSeconds) {\n        return \"\"\n    }\n    const getTimeStr = (num) => {\n        const paddedString = \"00\" + num\n        return paddedString.substr(paddedString.length - 2)\n    }\n    const minutes = getTimeStr(Math.floor(remainingSeconds / 60))\n    const seconds = getTimeStr(remainingSeconds % 60)\n\n    const criticalTime = 10\n    const className = remainingSeconds > criticalTime ? 'timer' : 'timer-critical'\n    return (\n        <div className={className}>\n            {`${minutes}:${seconds}`}\n        </div>\n    )\n}\n\nexport default Timer","import '../App.css'\nimport React, { useState, useEffect } from 'react'\nimport Board from './board'\nimport GameService from '../services/gameService'\nimport logger from '../services/logger'\nimport Coordinate from '../models/coordinate'\nimport {GameStates} from '../models/gameState'\nimport {EscalatorModel} from '../models/escalator'\nimport {WallModel} from '../models/wallModel'\nimport { Tile, TileType } from '../models/tile'\nimport { Item } from '../models/item'\nimport { Token } from '../models/token'\nimport OtherPlayer from './playerIndicator'\nimport Moves from './moves'\nimport Notification from './notification'\nimport Toolbar from './toolbar'\nimport Timer from './Timer'\nimport { useParams } from 'react-router-dom'\n\n\nconst getCoordinate = (pos) => {\n  const x = parseInt(pos.x)\n  const y = parseInt(pos.y)\n  return new Coordinate(x, y)\n}\n\nconst getTileType = (type) => {\n  switch(type) {\n    case 0:\n      return TileType.NORMAL\n    case 1:\n      return TileType.WALL\n    case 2:\n      return TileType.EXIT\n    case 3:\n      return TileType.CONNECT\n    case 4:\n      return TileType.PORTAL\n    default:\n      return TileType.UNKNOWN\n  }\n}\n\nconst getTile = (tileData) => {\n  const itemData = tileData.item\n  let item\n  if(itemData) {\n    item = new Item(itemData.type, itemData.tokenType)\n  }\n\n  return new Tile(getCoordinate(tileData.pos), \n  getTileType(tileData.type), \n  tileData.hasItem, \n  item,\n  tileData.tokenType)\n}\n\nconst getTileRow = (row) => {\n  return row.map(tileData => getTile(tileData))\n}\n\nconst getTiles = (tiles) => {\n  const grid = tiles.map( row => getTileRow(row))\n  return grid\n}\n\nconst getEscalators = (escalators) => {\n  return escalators.map( escalator => new EscalatorModel(escalator.id, getCoordinate(escalator.start), getCoordinate(escalator.end)))\n}\n\nconst getWalls = (walls) => {\n  return walls.map( wall => new WallModel(getCoordinate(wall.start), getCoordinate(wall.end)))\n}\n\nconst getInitials = (str) => {\n  const split = str.split(\" \")\n  return split.map(substr => substr[0]).join('')\n}\n\nconst getSelectedBy = (selections, idx) => {\n  let selection = selections.find(selection => selection.selection === idx)\n  if (selection) {\n    return getInitials(selection.selectedBy)\n  }\n  return null\n}\n\nconst getTokens = (data) => {\n  const newTokens = data.tokens.map((tokenData, idx) =>\n  new Token(idx,\n    getCoordinate(tokenData.pos),\n    getSelectedBy(data.selections, idx),\n    tokenData.escaped,\n    tokenData.type))\n  return newTokens\n}\n\nfunction Game({realPlayerName}) {\n  const [updatedTiles, setTiles] = useState([[]])\n  const [escalators, setEscalators] = useState([])\n  const [walls, setWalls] = useState([])\n  const [tokens, setTokens] = useState([])\n  const [allowedMoves, setMoves] = useState([])\n  const [allPlayers, setAllPlayers] = useState([])\n  const [notificationMessage, setNotificationMessage] = useState(null)\n  const [remainingSeconds, setRemainingSeconds] = useState(null)\n  const [gameService, setGameService] = useState(null)\n  const [remainingSections, setRemainingSections] = useState(0)\n  const [gameState, setGameState] = useState(null)\n\n  const clearNotification = () => {\n    setNotificationMessage(null)\n  }\n  let { gameId } = useParams();\n  useEffect(() => {\n    let service = new GameService(gameId, realPlayerName)\n    const notify = (message, fade, isGood) => {\n      setNotificationMessage({\n        message: message,\n        isGood: isGood\n      })\n      if (!fade) {\n        return\n      }\n      setTimeout(() => {\n        clearNotification()\n      }, 5000)\n    }\n\n    let handler = {\n      id: 'app-updates',\n      handle: (json) => {\n        if (json.type === 'token-update') {\n          logger.debug('Token update!')\n          setTokens(getTokens(json.data))\n        } else if (json.type === 'board-update') {\n          logger.debug('Board UPDATE')\n          setTiles(getTiles(json.data.board.tiles))\n          setEscalators(getEscalators(json.data.board.escalators))\n          setWalls(getWalls(json.data.board.walls))\n          setTokens(getTokens(json.data.tokenData))\n          setRemainingSections(json.data.remainingSections)\n          setGameState(json.data.state)\n          clearNotification()\n        } else if (json.type === 'win') {\n          setGameState(GameStates.WIN)\n        } else if (json.type === 'movements') {\n          logger.debug(\"Setting movement\")\n          service.setMovements(json.data.movements)\n          setMoves(json.data.movements)\n        } else if (json.type === 'all-players') {\n          setAllPlayers(json.data)\n        } else if (json.type === 'do-something') {\n          notify(`${json.data.sender} wants you to do something.`, true, true)\n        } else if (json.type === 'timer-update') {\n          // probably can update in a different way \n          //date to finish makes this less chatty\n          //could have an interval here that counts down\n          //timer-update is sent only on time pickups and connections\n          setRemainingSeconds(json.data.seconds)\n        } else if (json.type === 'lose') {\n          setGameState(GameStates.LOSS)\n        }\n      }\n    }\n    service.addHandler(handler)\n    async function initialConnect() {\n      await service.connect()\n      service.getInitialUpdate()\n    }\n    initialConnect()\n    setGameService(service)\n  },\n  [gameId])\n\n\n  const reset = (_) => {\n    gameService.reset()\n  }\n\n  const doSomething = (otherPlayerName) => {\n    gameService.doSomething(otherPlayerName)\n  }\n\n  const otherPlayers = allPlayers.filter(playerInfo => playerInfo.playerName !== realPlayerName)\n  const showConnections = remainingSections !== 0\n  return (\n    <div className=\"App\">\n      <Notification notification={notificationMessage} />\n      <div className=\"board-space\">\n        <Toolbar gameState={gameState} remaining={remainingSections}/>\n        <div className=\"board-controls\">\n          <Timer remainingSeconds={remainingSeconds} />\n          <br />\n          <Moves playerName={realPlayerName} allowedMoves={allowedMoves} />\n          <br />\n          <h2 hidden={!otherPlayers.length}>Other Players:</h2>\n          {\n            otherPlayers.map(player => <OtherPlayer key={player.playerName}\n              playerName={player.playerName}\n              allowedMoves={player.moves}\n              isSelf={false}\n              doSomething={doSomething} />)\n          }\n          <button className='button' id='reset-button' onClick={reset}>Reset</button>\n        </div>\n        <Board gameState={gameState} grid={updatedTiles} tokens={tokens} escalators={escalators} walls={walls} gameService={gameService} />\n      </div>\n\n    </div >\n  );\n}\n\nexport default Game;\n","import React, { useRef } from 'react'\nimport {\n  useNavigate\n} from \"react-router-dom\"\nimport axios from 'axios';\nimport logger from '../services/logger'\n\nfunction Menu({playerName, setPlayerName}) {\n  const navigate = useNavigate();\n  const joinCodeRef = useRef(null)\n\n  const createGameClick = async () => {\n    const response = await axios.post('/games', {gameId: joinCodeRef.current.value});\n\n    logger.debug(response.data)\n    // The server responds with the id of the new user\n    const gameId = response.data.gameId;\n    logger.debug('Game Id response:' + gameId)\n    navigate(`/game/${gameId}`);\n  };\n\n  const joinGameClick = async () => {\n    const gameId = joinCodeRef.current.value\n    navigate(`/game/${gameId}`);\n  };\n\n  const handleNameChange = (event) => {\n    setPlayerName(event.target.value)\n  }\n\n  return (\n    <div className=\"menu\">\n      <h1>Magic Maze</h1>\n      <div className=\"menuSelections\">\n        <div className=\"menuRow\" >\n          <input type=\"text\" value={playerName} onChange={handleNameChange} placeholder='Nickname' className=\"inputText\" />\n        </div>\n        <div className=\"menuRow\" >\n        <input type=\"text\" ref={joinCodeRef} placeholder='Game Code' className=\"inputText\" />\n        </div>\n        <div className =\"menuRow\">\n          <button onClick={() => createGameClick()} className = \"button\" >Create</button>\n          <button onClick={joinGameClick} className = \"button\" >Join</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Menu;\n","import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './components/game';\nimport {\n  BrowserRouter as Router,\n  Routes, Route\n} from \"react-router-dom\"\nimport Menu from './components/menu';\n\n\nfunction App() {\n    const [playerName, setPlayerName] = useState('');\n  \n    return (\n    <Router>\n        <Routes>\n          <Route path=\"/game/:gameId\" element={<Game  realPlayerName = {playerName} />}/>\n          <Route path=\"/\" element={<Menu playerName={playerName} setPlayerName={setPlayerName}/>}/>\n         </Routes>\n      </Router>\n    );\n  }\n  \n  export default App;\nReactDOM.render(\n  <React.StrictMode>\n   \n   \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {\n  BrowserRouter as Router,\n  Routes, Route\n} from \"react-router-dom\"\nimport Menu from './components/menu';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}