{"version":3,"sources":["components/boardContext.js","models/tile.js","models/token.js","models/gameState.js","models/tileDirection.js","images/up.png","images/down.png","images/left.png","images/right.png","images/coins_new.png","images/timer.png","models/item.js","models/offscreen.js","images/axe2.png","images/sword.png","images/arrows2.png","images/potion.png","components/weaponStyle.js","components/offScreenIndicator.js","components/item.js","components/tileNormal.js","components/tileConnect.js","images/green-portal.png","images/orange-portal.png","images/yellow-portal.png","images/purple-portal.png","components/tilePortal.js","images/s1.png","components/tileExit.js","images/rock.png","components/tileBarrier.js","components/tileUnknown.js","components/tile.js","images/dwarf_right.png","images/warrior2.png","images/elf_bow.png","images/mage.png","components/token.js","images/escalator_down.png","images/escalator_up.png","models/escalator.js","components/escalator.js","components/wall.js","components/board.js","services/logger.js","services/gameService.js","models/coordinate.js","models/wallModel.js","models/selection.js","models/portalSelector.js","models/board.js","images/staircase.png","images/selection.png","images/portal2.png","components/moveIndicator.js","components/playerIndicator.js","components/otherPlayers.js","images/sound.png","components/talk.js","components/moves.js","components/notification.js","components/Timer.js","components/weaponIcon.js","components/toolbar.js","components/game.js","components/menu.js","images/moves.png","images/elf.png","components/tutorial.js","App.js","index.js"],"names":["BoardContext","React","createContext","TileType","Tile","coord","type","hasItem","item","tokenType","this","TokenType","Token","id","selections","escaped","find","selection","isSelf","GameStates","TileDirection","ItemType","Item","getOffsets","boardRect","tokenRect","left","Math","max","right","width","window","innerWidth","getHorizontalOffset","top","bottom","height","innerHeight","getVerticalOffset","getIndicatorInfo","myRef","parent","current","getBoundingClientRect","upDist","downDist","leftDist","rightDist","maxDist","offsets","direction","Error","getWeapon","img","axe","color","sword","bow","potion","OffScreenIndicator","directionImg","indicatorImg","indicatorInfo","indicatorPositionStyle","display","justifyContent","alignItems","imgStyle","imgScale","containerClassName","up","flexDirection","down","className","style","src","alt","itemImg","gameState","useState","setIndicatorInfo","useRef","parentRef","useContext","useEffect","checkIfInView","addEventListener","removeEventListener","showOffscreenIndicator","coinImg","timerImg","weapon","backgroundColor","opacity","JSON","stringify","ref","NormalTile","tile","Connect","tileImg","getTileDirection","tileDirection","Portal","selectedPortal","orangePortal","purplePortal","yellowPortal","greenPortal","isSelected","toString","Exit","exit","Barrier","rockTile","UnknownTile","content","tileCoord","gridColumnStart","x","gridRowStart","y","imgClass","token","onTokenSelected","length","dwarf","elf","warrior","mage","onClick","EscalatorOrientation","EscalatorModel","startCoord","endCoord","min","abs","minX","getMinX","minY","getMinY","Escalator","escImg","escalator","rowStart","onEscalate","colStart","getOrientation","downImg","upImg","tileStyle","gridRow","getRowSpan","gridColumn","getColSpan","Wall","wall","wallStyle","getStartRow","getStartCol","zIndex","isHorizontal","borderTop","borderLeft","Board","board","tokens","escalators","walls","gameService","boardRef","setSelectedPortal","focus","gridHeight","getHeight","gridWidth","getWidth","scrollToTile","tileX","tileY","scrollX","tileWidth","scrollTo","tileHeight","behavior","send","selected","getDirection","boardStyle","overflow","gridTemplateColumns","gridTemplateRows","gap","Provider","value","onKeyDown","event","key","toLowerCase","moveDown","moveUp","moveLeft","moveRight","onKeyUp","selecting","selectedToken","t","isMySelection","selectableTokens","filter","firstToken","select","tokenIndex","indexOf","nextToken","currTile","getTile","portalSelector","handle","escalate","isActive","teleport","cancel","getSelectedPortal","tabIndex","grid","map","row","rowNum","colNum","console","log","error","GameService","gameId","playerName","setMovements","movements","allowedMovements","sendBasicCommand","command","reset","sendMovement","doSomething","player","escalatorId","handlers","newHandler","handler","push","Promise","resolve","reject","finalURL","location","host","connection","WebSocket","logger","onopen","onerror","onmessage","message","json","parse","data","e","setInterval","readyState","messageObject","gameMessage","includes","Coordinate","WallModel","Selection","selectorName","split","substr","join","SelectionState","PortalSelector","portals","resetSelection","state","selectedIndex","selectablePortals","currPortal","portal","BoardModel","getPortals","flatMap","onLeftBorder","onRightBorder","onTopBorder","onBottomBorder","MoveIndicator","imgSrc","keyIcon","move","OtherPlayer","allowedMoves","_","OtherPlayers","otherPlayers","hidden","moves","Talk","Moves","allMoves","concat","Notification","notification","isGood","Timer","remainingSeconds","getTimeStr","num","paddedString","minutes","floor","seconds","WeaponIcon","weaponType","occupied","weaponInfo","Toolbar","remaining","weaponTiles","getWeaponTiles","isOccupied","weaponTile","occupyingToken","weapons","getCoordinate","pos","parseInt","tileData","itemData","getTileType","getTiles","tiles","getTileRow","getTokens","myPlayerName","tokenData","idx","selectedBy","getSelectedBy","Game","realPlayerName","updatedTiles","setTiles","setEscalators","setWalls","setTokens","setMoves","allPlayers","setAllPlayers","notificationMessage","setNotificationMessage","setRemainingSeconds","setGameService","remainingSections","setRemainingSections","setGameState","canTalk","setCanTalk","clearNotification","useParams","service","fade","start","end","getEscalators","getWalls","sender","setTimeout","a","connect","getInitialUpdate","addHandler","initialConnect","playerInfo","otherPlayerName","Menu","setPlayerName","navigate","useNavigate","joinCodeRef","createGameClick","axios","post","response","tutorialClick","joinGameClick","onChange","target","placeholder","Header","title","children","ImageRow","images","image","index","borderRadius","path","maxWidth","maxHeight","Image","scale","SubSection","visualContent","Section","explorationImages","exitImages","portalImages","weaponImages","tokenImages","barbarian","TutorialPage","controls","Tutorial","App","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAIeA,G,MAFMC,IAAMC,iB,OCFvBC,GACU,EADVA,EAEQ,EAFRA,EAGM,EAHNA,EAIM,EAJNA,EAKS,EALTA,EAMQ,EAGNC,EACF,WAAYC,EAAOC,EAAMC,EAASC,EAAMC,GAAY,oBAChDC,KAAKL,MAAQA,EACbK,KAAKJ,KAAOA,EACZI,KAAKH,QAAUA,EACfG,KAAKF,KAAOA,EACZE,KAAKD,UAAYA,G,OCfnBE,EACK,EADLA,EAEI,EAFJA,EAGS,EAHTA,EAIG,EAGHC,E,WACF,WAAYC,EAAIR,EAAOS,EAAYC,EAAST,GAAO,oBAC/CI,KAAKG,GAAKA,EACVH,KAAKL,MAAQA,EACbK,KAAKI,WAAaA,EAClBJ,KAAKK,QAAUA,EACfL,KAAKJ,KAAOA,E,iDAGhB,WACI,OAAOI,KAAKI,WAAWE,MAAK,SAAAC,GAAS,OAAIA,EAAUC,c,KCjBrDC,EACO,EADPA,EAEK,EAFLA,EAGM,EAHNA,EAII,EAJJA,EAKG,ECJHC,EACE,EADFA,EAEI,EAFJA,EAGI,EAHJA,EAIK,EAJLA,EAKO,ECNE,MAA0B,+BCA1B,MAA0B,iCCA1B,MAA0B,iCCA1B,MAA0B,kCCA1B,MAA0B,sCCA1B,MAA0B,kCCArCC,EACM,EADNA,EAEO,EAFPA,EAGQ,EAGNC,EACF,WAAYhB,EAAMG,GAAY,oBAC1BC,KAAKJ,KAAOA,EACZI,KAAKD,UAAYA,G,QCYnBc,EAAa,SAACC,EAAWC,GAC3B,OAAO,2BAnBiB,SAACD,EAAWC,GACpC,IAAMC,EAAOC,KAAKC,IAAIJ,EAAUE,KAAMD,EAAUC,MAChD,OAAGA,EAAOF,EAAUK,MAAQJ,EAAUK,MAC3B,CAACJ,KAAMA,GAEP,CAACG,MAAOE,OAAOC,WAAaR,EAAUK,OAcrCI,CAAoBT,EAAWC,IAVrB,SAACD,EAAWC,GAClC,IAAMS,EAAMP,KAAKC,IAAIJ,EAAUU,IAAKT,EAAUS,KAC9C,OAAGA,EAAMV,EAAUW,OAASV,EAAUW,OAC3B,CAACF,IAAKA,GAEN,CAACC,OAAQJ,OAAOM,YAAcb,EAAUW,QAM5CG,CAAkBd,EAAWC,KAGlCc,EAAmB,SAACC,EAAOC,GAC7B,IAAID,EAAME,UAAYD,EAAOC,QACzB,OAAO,KAEX,IAAMjB,EAAYe,EAAME,QAAQC,wBAC1BnB,EAAYiB,EAAOC,QAAQC,wBAOjC,GALIlB,EAAUS,KAAOV,EAAUW,QAC3BV,EAAUC,MAAQF,EAAUK,OAC5BJ,EAAUU,QAAUX,EAAUU,KAC9BT,EAAUI,OAASL,EAAUE,KAG7B,OAAO,KAEX,IAAMkB,EAASpB,EAAUU,IAAMT,EAAUU,OACnCU,EAAWpB,EAAUS,IAAMV,EAAUW,OACrCW,EAAWtB,EAAUE,KAAOD,EAAUI,MACtCkB,EAAYtB,EAAUC,KAAOF,EAAUK,MAGvCmB,EAAUrB,KAAKC,IAAIgB,EAAQC,EAAUC,EAAUC,GAC/CE,EAAU1B,EAAWC,EAAWC,GACtC,GAAGmB,IAAWI,EACX,OAAO,aAACE,UAAW9B,GACX6B,GACJ,GAAGJ,IAAaG,EACnB,OAAO,aAACE,UAAW9B,EACfe,OAAQJ,OAAOM,YAAcb,EAAUW,QACpCc,GACJ,GAAGF,IAAcC,EACpB,oBAAOE,UAAW9B,GACX6B,GACJ,GAAGH,IAAaE,EACnB,oBAAOE,UAAW9B,GACX6B,GAEP,MAAM,IAAIE,MAAM,2BC/DT,MAA0B,iCCA1B,MAA0B,kCCA1B,MAA0B,oCCA1B,MAA0B,mCCMnCC,EAAY,SAAE3C,GAChB,OAAOA,GACH,KAAKE,EACD,MAAO,CACH0C,IAAKC,EACLC,MAAO,UAEf,KAAK5C,EACD,MAAO,CACH0C,IAAKG,EACLD,MAAO,UAEf,KAAK5C,EACD,MAAO,CACH0C,IAAKI,EACLF,MAAO,SAEf,KAAK5C,EACD,MAAO,CACH0C,IAAKK,EACLH,MAAO,UAEf,QACI,MAAM,IAAIJ,MAAO,wB,QC6CdQ,GAlEY,SAAC,GAAoC,IACxDC,EADqBC,EAAkC,EAAlCA,aAAcC,EAAoB,EAApBA,cAEnCC,EAAyB,CACzBC,QAAS,OACT7B,OAAQ2B,EAAc3B,OACtBD,IAAK4B,EAAc5B,IACnBR,KAAMoC,EAAcpC,KACpBG,MAAOiC,EAAcjC,MACrBoC,eAAgB,SAChBC,WAAY,UAEVC,EAAW,CACb/B,OAAQ0B,EAAcM,SACtBtC,MAAOgC,EAAcM,UAGrBC,EAAqB,YACzB,OAAOP,EAAcrD,WACjB,KAAKE,EACD0D,GAAsB,aACtB,MACJ,KAAK1D,EACD0D,GAAsB,SACtB,MACJ,KAAK1D,EACD0D,GAAsB,OACtB,MACJ,KAAK1D,EACD0D,GAAsB,QAK9B,OAAOP,EAAcZ,WACjB,KAAK9B,EACDwC,EAAeU,EACfP,EAAuBQ,cAAgB,SACvC,MACJ,KAAKnD,EACDwC,EAAeY,EACfT,EAAuBQ,cAAgB,iBACvC,MACJ,KAAKnD,EACDwC,EAAelC,EACfqC,EAAuBQ,cAAgB,MACvC,MACJ,KAAKnD,EACDwC,EAAe/B,EACfkC,EAAuBQ,cAAgB,cACvC,MACJ,QACI,MAAM,IAAIpB,MAAM,mCAMxB,OACI,uBAAKsB,UAAWJ,EAAoBK,MAAOX,EAA3C,UACI,sBAAKY,IAAKf,EAAca,UAAU,sBAAsBG,IAAI,wBAC5D,sBAAKD,IAAKd,EAAca,MAAOP,EAAUM,UA7C9B,kBA6CuDG,IAAI,4BCCnEtD,GAxDF,SAAC,GAAuB,IAqB7BuD,EArBOrE,EAAqB,EAArBA,KAAMsE,EAAe,EAAfA,UACjB,EAA0CC,mBAAS,MAAnD,mBAAOjB,EAAP,KAAsBkB,EAAtB,KACMxC,EAAQyC,iBAAO,MACfC,EAAYC,qBAAWnF,GAC7BoF,qBAAU,WACV,IAAM3C,EAASyC,EACf,SAASG,IACL,IAAMvB,EAAgBvB,EAAiBC,EAAO0C,GAC3CpB,IACCA,EAAcrD,UAAYD,EAAKC,WAEnCuE,EAAiBlB,GAMrB,OAHArB,EAAOC,QAAQ4C,iBAAiB,SAAUD,GAC1CA,IAEO,WACH5C,EAAOC,QAAQ6C,oBAAoB,SAAUF,MAE9C,CAACH,IAEJ,IAAIT,EAAY,OACZC,EAAQ,GACRc,GAAyB,EAC7B,OAAOhF,EAAKF,MACR,KAAKe,EACDwD,EAAUY,EACVhB,GAAa,QACb,MACJ,KAAKpD,EACDwD,EAAUa,EACVjB,GAAa,QACb,MACJ,KAAKpD,EACD,IAAMsE,EAASvC,EAAU5C,EAAKC,WAC9BoE,EAAUc,EAAOtC,IACjBoB,GAAa,UACbC,EAAMkB,gBAAkBD,EAAOpC,MAC5BuB,IAAc3D,IACbuD,EAAMmB,QAAU,OAEpBL,EAA2C,OAAlB1B,GAA2BgB,IAAc3D,EAClE,MACJ,QACI,MAAM,IAAIgC,MAAM,sBAAwB2C,KAAKC,UAAUvF,IAG/D,OACI,uBAAMwF,IAAKxD,EAAOiC,UAAWA,EAAWC,MAAOA,EAA/C,UACI,sBAAKC,IAAKE,EAASD,IAAI,SACrBY,EAA0B,eAAC,GAAD,CAAoB1B,cAAeA,EAAeD,aAAcgB,IAAc,OCnDvGoB,GAVI,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,KAAMpB,EAAgB,EAAhBA,UAEvB,OACI,sBAAKL,UAFO,OAEZ,SACMyB,EAAK3F,QAAU,eAAC,GAAD,CAAMC,KAAM0F,EAAK1F,KAAMsE,UAAWA,IAAe,QC0D/DqB,GApDC,SAAC,GAA0C,IAEnDC,EAFUF,EAAwC,EAAxCA,KAAMG,EAAkC,EAAlCA,iBAAkBvB,EAAgB,EAAhBA,UAClCL,EAAY,eAEV6B,EAAgBD,EAAiBH,GAGvC,KAFaI,IAAkBlF,GAAyB0D,IAAc3D,GAGlE,OAAQ,eAAC,GAAD,CAAY+E,KAAQA,IAEhC,OAAOI,GACH,KAAKlF,EACDgF,EAAU9B,EACV,MACJ,KAAKlD,EACDgF,EAAU5B,EACV,MACJ,KAAKpD,EACDgF,EAAU1E,EACV,MACJ,KAAKN,EACDgF,EAAUvE,EAKlB,OAAOqE,EAAKzF,WACR,KAAKE,EACD8D,GAAa,iBACb,MACJ,KAAK9D,EACD8D,GAAa,gBACb,MACJ,KAAK9D,EACD8D,GAAa,qBACb,MACJ,KAAK9D,EACD8D,GAAa,eACb,MACJ,QACI,MAAM,IAAItB,MAAM,sBAMxB,OACK,sBAAKsB,UAAWA,EAAhB,SACG,sBAAKE,IAAKyB,EAAS3B,UAAU,aAAcG,IAAI,QC5D5C,OAA0B,yCCA1B,OAA0B,0CCA1B,OAA0B,0CCA1B,OAA0B,0CC4C1B2B,GAlCA,SAAC,GAAwC,IAMhDH,EANSF,EAAsC,EAAtCA,KAAiBM,GAAqB,EAAhC1B,UAAgC,EAArB0B,gBAQ9B,OAAON,EAAKzF,WACR,KAAKE,EACDyF,EAAUK,GACV,MACJ,KAAK9F,EACDyF,EAAUM,GACV,MACJ,KAAK/F,EACDyF,EAAUO,GACV,MACJ,KAAKhG,EACDyF,EAAUQ,GACV,MACJ,QACI,MAAM,IAAIzD,MAAM,sBAGxB,IAAM0D,IAAaL,GAAiBA,EAAenG,MAAMyG,aAAeZ,EAAK7F,MAAMyG,WACnF,OACI,uBAAKrC,UAtBO,cAsBZ,UACKoC,EAAa,sBAAKpC,UAAU,qBAAuB,GACpD,sBAAKE,IAAKyB,EAAS3B,UAAU,aAAaG,IAAI,SCvC3C,OAA0B,+BCgE1BmC,GAtDF,SAAC,GAAwB,IAAvBb,EAAsB,EAAtBA,KAAMpB,EAAgB,EAAhBA,UACjB,EAA0CC,mBAAS,MAAnD,mBAAOjB,EAAP,KAAsBkB,EAAtB,KACMxC,EAAQyC,iBAAO,MACfC,EAAYC,qBAAWnF,GAC7BoF,qBAAU,WACV,IAAM3C,EAASyC,EACf,SAASG,IACL,IAAMvB,EAAgBvB,EAAiBC,EAAO0C,GAC3CpB,IACCA,EAAcrD,UAAYyF,EAAKzF,WAEnCuE,EAAiBlB,GAMrB,OAHArB,EAAOC,QAAQ4C,iBAAiB,SAAUD,GAC1CA,IAEO,WACH5C,EAAOC,QAAQ6C,oBAAoB,SAAUF,MAE9C,CAACH,IAEJ,IAAIT,EAAY,YACV2B,EAAUY,GAChB,OAAOd,EAAKzF,WACR,KAAKE,EACD8D,GAAa,cACb,MACJ,KAAK9D,EACD8D,GAAa,aACb,MACJ,KAAK9D,EACD8D,GAAa,kBACb,MACJ,KAAK9D,EACD8D,GAAa,YACb,MACJ,QACI,MAAM,IAAItB,MAAM,sBAGxB,IAAMuB,EAAQ,GAKd,OAJGI,IAAc3D,GAAqB2D,IAAc3D,IAChDuD,EAAMmB,QAAU,OAIhB,uBAAKG,IAAKxD,EAAOiC,UAAWA,EAAWC,MAAOA,EAA9C,UACI,sBAAKC,IAAKyB,EAAS3B,UAAU,aAAcG,IAAI,KAC1B,OAAlBd,GAA0BgB,IAAc3D,EAAoB,eAAC,GAAD,CAAoB2C,cAAeA,EAAeD,aAAcuC,IAAc,OC3D1I,OAA0B,iCCc1Ba,GAZC,WACZ,IACMb,EAAUc,GAGhB,MAFY,YAGR,sBAAKzC,UAHG,YAGR,SACI,sBAAKE,IAAKyB,EAAS3B,UAAU,aAAcG,IAAI,QCD5CuC,GARK,WAEhB,OACI,sBAAK1C,UAFS,kBCmDPrE,GA1CF,SAAC,GAA0D,IAChEgH,EADOlB,EAAwD,EAAxDA,KAAMG,EAAkD,EAAlDA,iBAAkBG,EAAgC,EAAhCA,eAAgB1B,EAAgB,EAAhBA,UAEnD,OAAQoB,EAAK5F,MACT,KAAKH,EACDiH,EAAU,eAAC,GAAD,CAAMlB,KAAMA,EAAMpB,UAAWA,IACvC,MACJ,KAAK3E,EACDiH,EAAU,eAAC,GAAD,IACV,MACJ,KAAKjH,EACDiH,EAAU,eAAC,GAAD,IACV,MACJ,KAAKjH,EACDiH,EAAU,eAAC,GAAD,CAASlB,KAAMA,EAAMpB,UAAWA,EAAWuB,iBAAkBA,IACvE,MACJ,KAAKlG,EACDiH,EAAU,eAAC,GAAD,CAAQZ,eAAgBA,EAAgBN,KAAMA,EAAMpB,UAAWA,IACzE,MACJ,KAAK3E,EACDiH,EAAU,eAAC,GAAD,CAAYlB,KAAMA,EAAMpB,UAAWA,IAC7C,MACJ,QACI,MAAM,IAAI3B,MAAM,qBAGxB,IAAmBkE,EAQnB,OACI,sBAAK5C,UAAU,iBAAiBC,OATjB2C,EASkCnB,EAAK7F,MARvC,CACfiH,gBAAgB,GAAD,OAAKD,EAAUE,EAAI,GAClCC,aAAa,GAAD,OAAKH,EAAUI,EAAI,KAM/B,SACML,KC7CC,OAA0B,wCCA1B,OAA0B,qCCA1B,OAA0B,oCCA1B,OAA0B,iCCgG1BxG,GApFD,SAAC,GAA+B,IA6BtC8G,EAOArE,EApCSsE,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,gBACpB,EAA0C7C,mBAAS,MAAnD,mBAAOjB,EAAP,KAAsBkB,EAAtB,KACMxC,EAAQyC,iBAAO,MACfC,EAAYC,qBAAWnF,GAsB7B,GArBAoF,qBAAU,WACV,IAAM3C,EAASyC,EACf,SAASG,IACL,IAAMvB,EAAgBvB,EAAiBC,EAAO0C,GAC1CpB,GAAiB6D,IACjB7D,EAAcrD,UAAYkH,EAAMrH,KAC7BqH,EAAMrH,OAASK,IACdmD,EAAcM,SAAW,QAGjCY,EAAiBlB,GAMrB,OAHArB,EAAOC,QAAQ4C,iBAAiB,SAAUD,GAC1CA,IAEO,WACH5C,EAAOC,QAAQ6C,oBAAoB,SAAUF,MAE9C,CAACH,KAEAyC,GAASA,EAAM5G,QACf,MAAO,GAWX,OAPgC,IAA5B4G,EAAM7G,WAAW+G,OACjBH,EAAW,iBACwB,IAA5BC,EAAM7G,WAAW+G,SACxBH,EAAW,SAIRC,EAAMrH,MACT,KAAKK,EACD0C,EAAMyE,GACNJ,GAAY,eACZ,MACJ,KAAK/G,EACD0C,EAAM0E,GACNL,GAAY,aACZ,MACJ,KAAK/G,EACD0C,EAAM2E,GACNN,GAAY,mBACZ,MACJ,KAAK/G,EACD0C,EAAM4E,GACNP,GAAY,cACZ,MACJ,QACI,MAAM,IAAIvE,MAAM,sBAKxB,IAMmBkE,EAQnB,OACI,uBACArB,IAAKxD,EACLiC,UAAWiD,EAAUhD,OAXN2C,EAWuBM,EAAMtH,MAV7B,CACfiH,gBAAgB,GAAD,OAAKD,EAAUE,EAAI,GAClCC,aAAa,GAAD,OAAKH,EAAUI,EAAI,KAQqBS,QAjBxC,WACRP,GACAC,EAAgBD,IAapB,UAGI,sBAAKhD,IAAKtB,EAAKuB,IAAI,UACA,OAAlBd,EAAyB,eAAC,GAAD,CAAoBA,cAAeA,EAAeD,aAAcR,IAAU,OC3FjG,OAA0B,2CCA1B,OAA0B,yCCAnC8E,GACI,EADJA,GAEE,EAGFC,G,WACF,WAAYvH,EAAIwH,EAAYC,GAAW,oBACnC5H,KAAKG,GAAKA,EACVH,KAAK2H,WAAaA,EAClB3H,KAAK4H,SAAWA,E,2CAGpB,WACI,OAAO3G,KAAK4G,IAAI7H,KAAK2H,WAAWd,EAAG7G,KAAK4H,SAASf,K,qBAGrD,WACI,OAAO5F,KAAK4G,IAAI7H,KAAK2H,WAAWZ,EAAG/G,KAAK4H,SAASb,K,wBAGrD,WACI,OAAO9F,KAAK6G,IAAI9H,KAAK2H,WAAWZ,EAAI/G,KAAK4H,SAASb,GAAK,I,wBAG3D,WACG,OAAO9F,KAAK6G,IAAI9H,KAAK2H,WAAWd,EAAI7G,KAAK4H,SAASf,GAAK,I,4BAG1D,WACI,IAAMkB,EAAO/H,KAAKgI,UACZC,EAAOjI,KAAKkI,UAClB,OAAKH,IAAS/H,KAAK2H,WAAWd,GAAKoB,IAASjI,KAAK2H,WAAWZ,GACpDgB,IAAS/H,KAAK4H,SAASf,GAAKoB,IAASjI,KAAK4H,SAASb,EAChDU,GAEAA,O,KCHJU,GA5BG,SAAC,GAA+B,IAG1CC,EAHaC,EAA4B,EAA5BA,UACXC,GADuC,EAAjBC,WACXF,EAAUH,UAAY,GACjCM,EAAWH,EAAUL,UAAY,EAEvC,OAAOK,EAAUI,kBACb,KAAKhB,GACDW,EAASM,GACT,MACJ,KAAKjB,GACDW,EAASO,GACT,MACJ,QACI,MAAM,IAAIlG,MAAO,uBAGzB,IAAMmG,EAAY,CACdC,QAAQ,GAAD,OAAKP,EAAL,mBAAwBD,EAAUS,cACzCC,WAAW,GAAD,OAAKP,EAAL,mBAAwBH,EAAUW,eAIhD,OACI,sBAAMjF,UAAY,YAAYC,MAAS4E,EAAvC,SACI,sBAAK7E,UAAY,gBAAgBE,IAAKmE,EAAQlE,IAAI,iBCL/C+E,GArBF,SAAC,GAAa,IAAXC,EAAU,EAAVA,KACNC,EAAY,CACdN,QAAQ,GAAD,OAAKK,EAAKE,cAAV,mBAAkCF,EAAKJ,cAC9CC,WAAW,GAAD,OAAKG,EAAKG,cAAV,mBAAkCH,EAAKF,cACjDM,OAAQ,GAWZ,OARGJ,EAAKK,gBACJJ,EAAUK,UAAY,qBACtBL,EAAUzH,OAAQ,QAElByH,EAAUM,WAAa,qBACvBN,EAAU/H,MAAQ,OAIlB,sBAAM2C,UAAY,OAAOC,MAASmF,KCgI3BO,GAtID,SAAC,GAAkE,IAAhEtF,EAA+D,EAA/DA,UAAWuF,EAAoD,EAApDA,MAAOC,EAA6C,EAA7CA,OAAQC,EAAqC,EAArCA,WAAYC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YACpDC,EAAWzF,iBAAO,MACxB,EAA4CF,mBAAS,MAArD,mBAAOyB,EAAP,KAAuBmE,EAAvB,KAEAvF,qBAAU,WACNsF,EAAShI,QAAQkI,UAChB,IAEL,IAAMC,EAAaR,EAAMS,YACnBC,EAAYV,EAAMW,WAClBC,EAAe,SAAC5D,GAClB,GAAIqD,EAAShI,QAAS,CACpB,IAAMlB,EAAYkJ,EAAShI,QAAQC,wBAI7BuI,EAHY,GAGJ7D,EAAUE,EAClB4D,EAHa,GAGL9D,EAAUI,EAElB2D,EAAUF,EAAS1J,EAAUM,MAAQ,EAAMuJ,GAG3CC,EAAW,CACfpJ,IAHciJ,EAAQ3J,EAAUY,OAAS,EAAKmJ,GAI9C7J,KAAM0J,EACNI,SAAU,UAGZd,EAAShI,QAAQ4I,SAASA,KA8D1B1D,EAAkB,SAACD,GACrB8C,EAAYgB,KAAK3F,KAAKC,UAClB,CACIzF,KAAM,WACNoL,SAAU/D,EAAM9G,OAKtBwF,EAAmB,SAACH,GACtB,OAAOmE,EAAMsB,aAAazF,IAGxB0F,EAAa,CACfC,SAAU,OACV7H,QAAS,OACT8H,oBAAoB,UAAD,OAAYf,EAAZ,WACnBgB,iBAAiB,UAAD,OAAYlB,EAAZ,WAChBmB,IAAK,OAGT,OACI,eAAC,EAAaC,SAAd,CAAuBC,MAAOxB,EAA9B,SACI,uBAAKjG,UAAU,aAAauB,IAAK0E,EAAUhG,MAAQkH,EAAYO,UArCjD,SAACC,GAEa,MAA5BA,EAAMC,IAAIC,cACV7B,EAAY8B,WACuB,MAA5BH,EAAMC,IAAIC,cACjB7B,EAAY+B,SACuB,MAA5BJ,EAAMC,IAAIC,cACjB7B,EAAYgC,WACuB,MAA5BL,EAAMC,IAAIC,eACjB7B,EAAYiC,aA4B6EC,QAjF7E,SAACP,GAEjB,IAAIQ,GAAY,EAChB,GAAgC,MAA5BR,EAAMC,IAAIC,cAAuB,CACjC,IAAMO,EAAgBvC,EAAOtJ,MAAK,SAAA8L,GAAC,OAAIA,EAAEC,mBACnCC,EAAmB1C,EAAO2C,QAAO,SAAAH,GAAC,OAAKA,EAAE/L,WAC/C,IAAI8L,GAAiBA,EAAc9L,QAAS,CACxC,IAAMmM,EAAaF,EAAiB,GACpC/B,EAAaiC,EAAW7M,OACxBoK,EAAY0C,OAAOD,EAAWrM,QAC3B,CACH,IAAMuM,EAAaJ,EAAiBK,QAAQR,GAEtCS,EAAYN,GADCI,EAAa,GAAKJ,EAAiBnF,QAEtDoD,EAAaqC,EAAUjN,OACvBoK,EAAY0C,OAAOG,EAAUzM,UAGhC,GAAgC,MAA5BuL,EAAMC,IAAIC,cAAwB,CACvC,IAAMO,EAAgBvC,EAAOtJ,MAAK,SAAA8L,GAAC,OAAIA,EAAEC,mBACzC,GAAGF,EAAe,CACd,IAAMU,EAAWlD,EAAMmD,QAAQX,EAAcxM,OAC1CkN,EAASjN,OAASH,GACjByM,GAAY,EACZvC,EAAMoD,eAAeC,OAAOb,EAAeU,EAAUtC,IAErDR,EAAYkD,iBAGjB,GAAkB,UAAdvB,EAAMC,IAAiB,CAC9B,IAAIhC,EAAMoD,eAAeG,WACrB,OAEJhB,GAAY,EACZ,IAAMpG,EAAiB6D,EAAMoD,eAAeN,SAC5C1C,EAAYoD,SAASrH,EAAenG,OAEpCuM,GACAvC,EAAMoD,eAAeK,SAEzB,IAAMtH,EAAiB6D,EAAMoD,eAAeM,oBAC5CpD,EAAkBnE,IAwCiGwH,SAAU,EAAzH,UAEQ3D,EAAM4D,KAAKC,KAAI,SAACC,EAAKC,GAAN,OACPD,EAAID,KAAI,SAAChI,EAAMmI,GAAP,OACJ,eAAC,GAAD,CAAkC7H,eAAgBA,EAAgBN,KAAQA,EAAMG,iBAAkBA,EAAkBvB,UAAWA,GAApHoB,EAAK7F,MAAMyG,kBAIlCyD,EAAW2D,KAAK,SAACnF,GAAD,OAAe,eAAC,GAAD,CAAWA,UAAWA,OAGrDuB,EAAO4D,KAAK,SAACvG,GAAD,OAAW,eAAC,GAAD,CAAOA,MAAOA,EAAOC,gBAAiBA,OAG7D4C,EAAM0D,KAAK,SAACtE,GAAD,OAAU,eAAC,GAAD,CAAMA,KAAMA,a,SC3HtC,GAfD,aAeC,GAPF,WAAgB,IAAD,GACxB,EAAA0E,SAAQC,IAAR,oBAMW,GAJD,WAAgB,IAAD,GACzB,EAAAD,SAAQE,MAAR,oBC0IWC,G,WAlJX,WAAYC,EAAQC,GAAa,IAAD,gCA6EhCC,aAAe,SAACC,GACZ,EAAKC,iBAAmBD,GA9EI,KAiFhCE,iBAAmB,SAACC,GAChB,EAAKvD,KAAK3F,KAAKC,UACX,CACIzF,KAAM0O,MApFc,KAgGhCC,MAAQ,WACJ,EAAKF,iBAAiB,UAjGM,KAoGhCrC,UAAY,WACT,EAAKwC,aAAa,UArGW,KAwGhCzC,SAAW,WACP,EAAKyC,aAAa,SAzGU,KA4GhC3C,SAAW,WACP,EAAK2C,aAAa,SA7GU,KAgHhC1C,OAAS,WACL,EAAK0C,aAAa,OAjHU,KAoHhCC,YAAc,SAACR,GACX,EAAKlD,KAAK3F,KAAKC,UACX,CACIzF,KAAM,eACN8O,OAAQT,MAxHY,KA6HhCd,SAAW,SAACxN,GACR,EAAKoL,KAAK3F,KAAKC,UACX,CACIzF,KAAM,WACND,MAAOA,MAjIa,KAsIhCsN,SAAW,SAAC0B,GACR,EAAK5D,KAAK3F,KAAKC,UACX,CACIzF,KAAM,WACNO,GAAIwO,MAzIZ3O,KAAK4O,SAAW,GAChB5O,KAAKgO,OAASA,EACdhO,KAAKiO,WAAaA,EAClBjO,KAAKoO,iBAAmB,G,8CAG5B,SAAWS,GACP7O,KAAK4O,SAAW5O,KAAK4O,SAASrC,QAAO,SAAAuC,GAAO,OAAIA,EAAQ3O,KAAO0O,EAAW1O,MAC1EH,KAAK4O,SAASG,KAAKF,K,qBAGvB,WAAW,IAAD,OACN,OAAO,IAAIG,SAAQ,SAACC,EAASC,GACzB,IACIC,EADgF,SAAW9N,OAAO+N,SAASC,KACnF,eAAD,OAAgB,EAAKpB,YAChD,EAAKqB,WAAa,IAAIC,UAAUJ,GAChCK,GAAa,iBAAmBL,GAChC,EAAKG,WAAWG,OAAS,WACrBR,KAEJ,EAAKK,WAAWI,QAAU,SAAC5B,GACvB0B,GAAa1B,GACb0B,GAAa,+EAETN,EAAOpB,IAIf,EAAKwB,WAAWK,UAAY,SAACC,GACzB,IACI,IAAIC,EAAOzK,KAAK0K,MAAMF,EAAQG,MAChC,MAAOC,GAEL,YADDR,GAAa,iBAAkBI,EAAQG,MAI1C,GAAGF,EAAK7B,QAAU6B,EAAK7B,SAAW,EAAKA,OACnCwB,GAAY,uCADhB,CARqC,qBAajB,EAAKZ,UAbY,IAarC,2BAAmC,SACvB5B,OAAO6C,IAdkB,iCAiBzCI,aAAY,WAC2B,IAA/B,EAAKX,WAAWY,YAChBV,GAAa,8BAElB,U,8BAKX,WACIxP,KAAKqO,iBAAiB,a,kBAG1B,SAAKuB,GACD,IAAIO,EAAgB/K,KAAK0K,MAAMF,GAC/BO,EAAcnC,OAAShO,KAAKgO,OAC5B,IAAIoC,EAAchL,KAAKC,UAAU8K,GAEjCX,GAAa,SAAWY,GACxBpQ,KAAKsP,WAAWvE,KAAKqF,K,oBAGzB,SAAOjQ,GACHH,KAAK+K,KAAK3F,KAAKC,UACX,CACIzF,KAAM,WACNoL,SAAU7K,O,0BAiBtB,SAAamO,GACJtO,KAAKoO,iBAAiBiC,SAAS/B,IAGpCtO,KAAKqO,iBAAiBC,O,KCtFfgC,G,WAVX,WAAYzJ,EAAGE,GAAI,oBACf/G,KAAK6G,EAAIA,EACT7G,KAAK+G,EAAIA,E,4CAGb,WACI,MAAM,IAAN,OAAW/G,KAAK6G,EAAhB,aAAsB7G,KAAK+G,EAA3B,S,KCPFwJ,G,WACF,WAAY5I,EAAYC,GAAW,oBAC/B5H,KAAK2H,WAAaA,EAClB3H,KAAK4H,SAAWA,E,+CAGpB,WACI,OAAO3G,KAAK4G,IAAI7H,KAAK2H,WAAWZ,EAAG/G,KAAK4H,SAASb,GAAK,I,yBAG1D,WACI,OAAO9F,KAAK4G,IAAI7H,KAAK2H,WAAWd,EAAG7G,KAAK4H,SAASf,GAAK,I,wBAG1D,WACI,OAAO5F,KAAKC,IAAI,EAAGD,KAAK6G,IAAI9H,KAAK2H,WAAWZ,EAAI/G,KAAK4H,SAASb,M,wBAGlE,WACI,OAAO9F,KAAKC,IAAI,EAAGD,KAAK6G,IAAI9H,KAAK2H,WAAWd,EAAI7G,KAAK4H,SAASf,M,0BAGlE,WACI,OAAO7G,KAAK2H,WAAWZ,IAAM/G,KAAK4H,SAASb,M,KCvB7CyJ,G,WACF,WAAYC,EAAcjQ,GAAS,oBAC/BR,KAAKyQ,aAAeA,EACpBzQ,KAAKQ,OAASA,E,+CAGjB,WAEG,OADcR,KAAKyQ,aAAaC,MAAM,KACzBlD,KAAI,SAAAmD,GAAM,OAAIA,EAAO,MAAIC,KAAK,Q,KCR7CC,GACQ,EADRA,GAEM,EAINC,G,WACF,WAAYC,GAAU,oBAClB/Q,KAAKgR,iBACLhR,KAAK+Q,QAAUA,E,kDAGnB,WACI/Q,KAAKiR,MAAQJ,GACb7Q,KAAKkR,cAAgB,KACrBlR,KAAKmR,kBAAoB,K,sBAG7B,WACI,OAAOnR,KAAKiR,QAAUJ,K,oBAG1B,SAAO1E,EAAeiF,EAAY7G,GAC9B,GAAG4B,EAAcvM,OAASwR,EAAWrR,UAArC,CAIA,GAAGC,KAAKiR,QAAUJ,GAEd7Q,KAAKkR,cAAgB,EACrBlR,KAAKmR,kBAAoBnR,KAAK+Q,QAAQxE,QAAQ,SAAA8E,GAAM,OAAIA,EAAOtR,YAAcoM,EAAcvM,MAAQyR,IAAWD,KAC9GpR,KAAKiR,MAAQJ,OACV,IAAG7Q,KAAKiR,QAAUJ,GAGrB,MAAM,IAAIpO,MAAM,gCAFhBzC,KAAKkR,eAAiBlR,KAAKkR,cAAgB,GAAKlR,KAAKmR,kBAAkBhK,OAI3E,GAAGnH,KAAKmR,kBAAkBhK,OAEtBoD,EADqBvK,KAAKmR,kBAAkBnR,KAAKkR,eACvBvR,U,+BAIlC,WACI,OAAyB,MAAtBK,KAAKkR,eAAyBlR,KAAKmR,kBAAkBhK,OAC7CnH,KAAKmR,kBAAkBnR,KAAKkR,eAGhC,O,oBAGX,WACI,GAAGlR,KAAKiR,QAAUJ,GACd,MAAM,IAAIpO,MAAM,+CACb,GAAGzC,KAAKiR,QAAUJ,GAAuB,CAC5C,IAAMtQ,EAAYP,KAAKmR,kBAAkBnR,KAAKkR,eAE9C,OADAlR,KAAKgR,iBACEzQ,EAGP,MAAM,IAAIkC,MAAM,kC,oBAIxB,WACOzC,KAAKiR,QAAUJ,IACd7Q,KAAKgR,qB,KC5DXM,G,WACF,WAAY/D,GAAO,oBACfvN,KAAKuN,KAAOA,EACZvN,KAAK+M,eAAkB,IAAI+D,GAAe9Q,KAAKuR,c,6CAGnD,WACI,OAAOvR,KAAKuN,KAAKpG,S,sBAGrB,WACG,OAA4B,IAArBnH,KAAKuN,KAAKpG,OAAe,EAAInH,KAAKuN,KAAK,GAAGpG,S,qBAIpD,SAAQxH,GACJ,OAAGA,EAAMoH,EAAI,GAAKpH,EAAMoH,GAAK/G,KAAKuN,KAAKpG,QAGpCxH,EAAMkH,EAAI,GAAKlH,EAAMkH,GAAK7G,KAAKuN,KAAK,GAAGpG,OAF/B,KAKJnH,KAAKuN,KAAK5N,EAAMoH,GAAGpH,EAAMkH,K,wBAGpC,WACI,OAAO7G,KAAKuN,KAAKiE,SAAQ,SAAA/D,GAAG,OAAIA,EAAIlB,QAAQ,SAAA/G,GAAI,OAAIA,EAAK5F,OAASH,U,4BAGtE,WACI,OAAOO,KAAKuN,KAAKiE,SAAQ,SAAA/D,GAAG,OAAIA,EAAIlB,QAAQ,SAAA/G,GAAI,OAAIA,EAAK1F,MAAQ0F,EAAK1F,KAAKF,OAASe,U,0BAGxF,SAAa6E,GACT,GAAwB,IAArBxF,KAAKuN,KAAKpG,OACT,OAAOzG,EAGX,IAAMM,EAAOhB,KAAK8M,QAAQ,IAAIwD,GAAW9K,EAAK7F,MAAMkH,EAAI,EAAGrB,EAAK7F,MAAMoH,IAChE5F,EAAQnB,KAAK8M,QAAQ,IAAIwD,GAAW9K,EAAK7F,MAAMkH,EAAI,EAAGrB,EAAK7F,MAAMoH,IACjEnD,EAAK5D,KAAK8M,QAAQ,IAAIwD,GAAW9K,EAAK7F,MAAMkH,EAAGrB,EAAK7F,MAAMoH,EAAI,IAC9DjD,EAAO9D,KAAK8M,QAAQ,IAAIwD,GAAW9K,EAAK7F,MAAMkH,EAAGrB,EAAK7F,MAAMoH,EAAI,IAChE0K,EAAgC,IAAjBjM,EAAK7F,MAAMkH,EAC1B6K,EAAgBlM,EAAK7F,MAAMkH,IAAM7G,KAAKuN,KAAK,GAAGpG,OAAS,EACvDwK,EAA+B,IAAjBnM,EAAK7F,MAAMoH,EACzB6K,EAAiBpM,EAAK7F,MAAMoH,IAAM/G,KAAKuN,KAAKpG,OAAS,EAC3D,OAAIsK,GAAiBzQ,GAAQA,EAAKpB,OAASH,EAChCiB,EACAgR,GAAkBvQ,GAASA,EAAMvB,OAASH,EAC1CiB,EACAiR,GAAgB/N,GAAMA,EAAGhE,OAASH,EAClCiB,EACAkR,GAAmB9N,GAAQA,EAAKlE,OAASH,EACzCiB,EAEAA,M,KC7DJ,OAA0B,sCCA1B,OAA0B,sCCA1B,OAA0B,oCC6C1BmR,GArCO,SAAC,GAAsB,IACrCC,EACAC,EAFiBC,EAAmB,EAAnBA,KAAMxR,EAAa,EAAbA,OA6B3B,MA1BY,SAATwR,GACCF,EAAS9Q,EACT+Q,EAAU,KACI,UAARC,GACNF,EAAS3Q,EACT4Q,EAAU,KACI,OAARC,GACNF,EAASlO,EACTmO,EAAU,KACI,SAARC,GACNF,EAAShO,EACTiO,EAAU,KACI,aAARC,GACNF,EAAS7E,GACT8E,EAAU,KACI,WAARC,GACNF,EAAST,GACTU,EAAU,KAEG,WAATC,GACJF,EAASrF,GACTsF,EAAU,KAGVnE,QAAQC,IAAI,eAAiBmE,GAG7B,uBAAMjO,UAAW,YAAjB,UACG,sBAAKE,IAAK6N,EAAQ5N,IAAI,SACrB1D,EAAS,gCAAOuR,IAAkB,OCnB/BE,GAnBK,SAAC,GAA+C,IAA7ChE,EAA4C,EAA5CA,WAAYiE,EAAgC,EAAhCA,aAAczD,EAAkB,EAAlBA,YAK7C,OACI,sBAAM1K,UAAU,eAAhB,SACI,uBAAKA,UAAU,aAAf,UACI,iCAAQkK,IAEJiE,EAAa1E,KAAI,SAAAwE,GAAI,OAAK,eAAC,GAAD,CAA0BA,KAAMA,EAAMxR,QAAQ,GAA1BwR,MAElD,yBAAQjO,UAAU,oBAAoByD,QAVvB,SAAC2K,GACxB1D,EAAYR,IASJ,qBCICmE,GAhBI,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,aAAc5D,EAAkB,EAAlBA,YACjC,OACI,iCACI,qBAAI6D,QAASD,EAAalL,OAA1B,2BAEIkL,EAAa7E,KAAI,SAAAkB,GAAM,OAAI,eAAC,GAAD,CACvBT,WAAYS,EAAOT,WACnBiE,aAAcxD,EAAO6D,MACrB/R,QAAQ,EACRiO,YAAaA,GAJ4BC,EAAOT,mBCPrD,OAA0B,kCCU1BuE,GARF,WACT,OACI,sBAAKzO,UAAU,YAAf,SACI,sBAAKE,IAAKH,GAAMI,IAAI,gBCajBuO,GAhBD,SAAC,GAAkC,IAAhCxE,EAA+B,EAA/BA,WAAYiE,EAAmB,EAAnBA,aACnBQ,EAAY,CAAE,SAAU,WAAW,UAAUC,OAAOT,GAE1D,OACI,uBAAMnO,UAAU,cAAhB,UACI,uBAAM5D,GAAG,aAAT,SAAuB8N,IACvB,wCACA,sBAAKlK,UAAY,eAAjB,SAEQ2O,EAASlF,KAAI,SAAAwE,GAAI,OAAK,eAAC,GAAD,CAA0BA,KAAMA,EAAMxR,QAAQ,GAA1BwR,YCG/CY,GAZM,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACpB,OAAqB,OAAjBA,EACO,KAIP,sBAAK9O,UAAW8O,EAAaC,OAAS,eAAiB,mBAAvD,SACKD,EAAajD,WCUXmD,GAjBD,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,iBACPC,EAAa,SAACC,GAChB,IAAMC,EAAe,KAAOD,EAC5B,OAAOC,EAAaxC,OAAOwC,EAAahM,OAAS,IAE/CiM,EAAUH,EAAWhS,KAAKoS,MAAML,EAAmB,KACnDM,EAAUL,EAAWD,EAAmB,IAGxCjP,EAAYiP,EADG,GAC+B,QAAU,iBAC9D,OACI,sBAAKjP,UAAWA,EAAhB,mBACQqP,EADR,YACmBE,MCQZC,GAnBI,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,SACvBC,EAAahR,EAAU8Q,GACvBxP,EAAQ,CACVkB,gBAAiBwO,EAAW7Q,OAE7B4Q,IACCzP,EAAMmB,QAAU,OAMpB,OACI,sBAAKpB,UAAU,eAAeC,MAAOA,EAArC,SACI,sBAAKC,IAAKyP,EAAW/Q,IAAKqB,MALjB,CACb5C,MAAO,QAIwC8C,IAAI,gCCyC5CyP,GApDC,SAAC,GAA+D,IAA7DvP,EAA4D,EAA5DA,UAAWwF,EAAiD,EAAjDA,OAAQD,EAAyC,EAAzCA,MAAOiK,EAAkC,EAAlCA,UAAWZ,EAAuB,EAAvBA,iBAEhDpD,EAAU,GACd,GAAiB,OAAdxL,EACC,OAAOA,GACH,KAAK3D,EACDmP,EAAU,gCAAkCgE,EAC5C,MACJ,KAAKnT,EACDmP,EAAU,qBACV,MACJ,KAAKnP,EACDmP,EAAU,mBACV,MACJ,KAAKnP,EACDmP,EAAU,YACV,MACJ,KAAKnP,EACDmP,EAAU,OACV,MACJ,QACI,MAAM,IAAInN,MAAM,sBAI5B,IAAMoR,EAAclK,EAAMmK,iBAEpBC,EAAa,SAACC,GAChB,IAAMC,EAAiBrK,EAAOtJ,MAAK,SAAA2G,GAAK,OAAIA,EAAMtH,MAAMyG,aAAe4N,EAAWrU,MAAMyG,cACxF,OAAO6N,GAAkBA,EAAerU,OAASoU,EAAWlU,KAAKC,WAE/DmU,EAAUL,EAAYrG,KAAI,SAAAwG,GAC5B,MAAO,CACHpU,KAAMoU,EAAWlU,KAAKC,UACtB0T,SAAUM,EAAWC,OAK7B,OACI,uBAAKjQ,UAAU,UAAf,UACI,eAAC,GAAD,CAAOiP,iBAAkBA,IACxBpD,EACD,sBAAK7L,UAAU,yBAAf,SACKK,IAAc3D,EACfyT,EAAQ1G,KAAK,SAAAvI,GAAM,OAAI,eAAC,GAAD,CAA8BwO,SAAUxO,EAAOwO,SAAUD,WAAYvO,EAAOrF,MAA3DqF,EAAOrF,SAC7C,S,QC9BZuU,GAAgB,SAACC,GACrB,IAAMvN,EAAIwN,SAASD,EAAIvN,GACjBE,EAAIsN,SAASD,EAAIrN,GACvB,OAAO,IAAIuJ,GAAWzJ,EAAGE,IAoBrB+F,GAAU,SAACwH,GACf,IACIxU,EADEyU,EAAWD,EAASxU,KAM1B,OAJGyU,IACDzU,EAAO,IAAIc,EAAK2T,EAAS3U,KAAM2U,EAASxU,YAGnC,IAAIL,EAAKyU,GAAcG,EAASF,KAxBrB,SAACxU,GACnB,OAAOA,GACL,KAAK,EACH,OAAOH,EACT,KAAK,EACH,OAAOA,EACT,KAAK,EACH,OAAOA,EACT,KAAK,EACH,OAAOA,EACT,KAAK,EACH,OAAOA,EACT,QACE,OAAOA,GAYX+U,CAAYF,EAAS1U,MACrB0U,EAASzU,QACTC,EACAwU,EAASvU,YAOL0U,GAAW,SAACC,GAChB,IAAMnH,EAAOmH,EAAMlH,KAAK,SAAAC,GAAG,OALV,SAACA,GAClB,OAAOA,EAAID,KAAI,SAAA8G,GAAQ,OAAIxH,GAAQwH,MAIJK,CAAWlH,MAC1C,OAAO,IAAI6D,GAAW/D,IAiBlBqH,GAAY,SAAC7E,EAAM8E,GAOvB,OANkB9E,EAAKnG,OAAO4D,KAAI,SAACsH,EAAWC,GAAZ,OAClC,IAAI7U,EAAM6U,EACRZ,GAAcW,EAAUV,KATN,SAAChU,EAAY2U,EAAKF,GACtC,OAAOzU,EAAWmM,QAAO,SAAAhM,GAAS,OAAIA,EAAUA,YAAcwU,KAC3DvH,KAAI,SAAAjN,GAAS,OAAI,IAAIiQ,GAAUjQ,EAAUyU,WAAYzU,EAAUyU,aAAeH,MAQ/EI,CAAclF,EAAK3P,WAAY2U,EAAKF,GACpCC,EAAUzU,QACVyU,EAAUlV,UA4GCsV,OAxGf,YAAiC,IAAlBC,EAAiB,EAAjBA,eACb,EAAiC9Q,mBAAS,IAAIiN,GAAW,KAAzD,mBAAO8D,EAAP,KAAqBC,EAArB,KACA,EAAoChR,mBAAS,IAA7C,mBAAOwF,EAAP,KAAmByL,EAAnB,KACA,EAA0BjR,mBAAS,IAAnC,mBAAOyF,EAAP,KAAcyL,EAAd,KACA,EAA4BlR,mBAAS,IAArC,mBAAOuF,EAAP,KAAe4L,EAAf,KACA,EAAiCnR,mBAAS,IAA1C,mBAAO6N,EAAP,KAAqBuD,EAArB,KACA,EAAoCpR,mBAAS,IAA7C,mBAAOqR,EAAP,KAAmBC,EAAnB,KACA,EAAsDtR,mBAAS,MAA/D,mBAAOuR,EAAP,KAA4BC,EAA5B,KACA,EAAgDxR,mBAAS,MAAzD,mBAAO2O,EAAP,KAAyB8C,EAAzB,KACA,EAAsCzR,mBAAS,MAA/C,mBAAO0F,EAAP,KAAoBgM,EAApB,KACA,EAAkD1R,mBAAS,GAA3D,mBAAO2R,EAAP,KAA0BC,EAA1B,KACA,EAAkC5R,mBAAS,MAA3C,mBAAOD,EAAP,KAAkB8R,EAAlB,KACA,EAA8B7R,oBAAS,GAAvC,mBAAO8R,GAAP,KAAgBC,GAAhB,KAEMC,GAAoB,WACxBR,EAAuB,OAEnB7H,GAAWsI,eAAXtI,OACNtJ,qBAAU,WACR,IAAI6R,EAAU,IAAIxI,GAAYC,GAAQmH,GAclCrG,EAAU,CACZ3O,GAAI,cACJ6M,OAAQ,SAAC6C,GAfI,IAACD,EAAS4G,EAgBH,iBAAd3G,EAAKjQ,MACP4V,EAAUZ,GAAU/E,EAAKE,KAAMoF,IAC/BiB,GAAWvG,EAAKsG,UACO,iBAAdtG,EAAKjQ,MACd4P,GAAa,gBACb6F,EAASZ,GAAS5E,EAAKE,KAAKpG,MAAM+K,QAClCY,EAlEY,SAACzL,GACrB,OAAOA,EAAW2D,KAAK,SAAAnF,GAAS,OAAI,IAAIX,GAAeW,EAAUlI,GAAIgU,GAAc9L,EAAUoO,OAAQtC,GAAc9L,EAAUqO,SAiEvGC,CAAc9G,EAAKE,KAAKpG,MAAME,aAC5C0L,EA/DO,SAACzL,GAChB,OAAOA,EAAM0D,KAAK,SAAAtE,GAAI,OAAI,IAAIqH,GAAU4D,GAAcjL,EAAKuN,OAAQtC,GAAcjL,EAAKwN,SA8DrEE,CAAS/G,EAAKE,KAAKpG,MAAMG,QAClC0L,EAAUZ,GAAU/E,EAAKE,KAAK+E,YAC9BmB,EAAqBpG,EAAKE,KAAKiG,mBAC/BE,EAAarG,EAAKE,KAAKkB,OACvBoF,MACuB,QAAdxG,EAAKjQ,KACdsW,EAAazV,GACU,cAAdoP,EAAKjQ,MACd2W,EAAQrI,aAAa2B,EAAKE,KAAK5B,WAC/BsH,EAAS5F,EAAKE,KAAK5B,YACI,gBAAd0B,EAAKjQ,KACd+V,EAAc9F,EAAKE,MACI,iBAAdF,EAAKjQ,MAnCJgQ,EAoCH,GAAD,OAAIC,EAAKE,KAAK8G,OAAd,+BApCaL,GAoCsC,EAnC7DX,EAAuB,CACrBjG,QAASA,EACTkD,QAiCiE,IA/B9D0D,GAGLM,YAAW,WACTT,OACC,MA2BwB,iBAAdxG,EAAKjQ,KAKdkW,EAAoBjG,EAAKE,KAAKuD,SACP,SAAdzD,EAAKjQ,MACdsW,EAAazV,KA9CL,4CAmDd,sBAAAsW,EAAA,sEACQR,EAAQS,UADhB,OAEET,EAAQU,mBAFV,4CAnDc,sBAkDdV,EAAQW,WAAWpI,GAlDL,mCAuDdqI,GACApB,EAAeQ,KAEjB,CAACvI,KAED,IAQMqE,GAAeqD,EAAWnJ,QAAO,SAAA6K,GAAU,OAAIA,EAAWnJ,aAAekH,KAC/E,OACE,uBAAKpR,UAAU,MAAf,UACE,eAAC,GAAD,CAAc8O,aAAc+C,IAC5B,uBAAK7R,UAAU,cAAf,UACE,eAAC,GAAD,CAASK,UAAWA,EAAWwF,OAAQA,EAAQD,MAAOyL,EAAcxB,UAAWoC,EAAmBhD,iBAAkBA,IACpH,uBAAKjP,UAAU,iBAAf,UACE,eAAC,GAAD,CAAOkK,WAAYkH,EAAgBjD,aAAcA,IAChDG,GAAalL,QAAUgP,GAAU,eAAC,GAAD,IAAU,eAAC,GAAD,CAAc1H,YAZ9C,SAAC4I,GACnBtN,EAAY0E,YAAY4I,IAWkEhF,aAAcA,KAClG,yBAAQtO,UAAU,SAAS5D,GAAG,eAAeqH,QAjBvC,SAAC2K,GACbpI,EAAYwE,SAgBN,sBAEF,eAAC,GAAD,CAAOnK,UAAWA,EAAWuF,MAAOyL,EAAcxL,OAAQA,EAAQC,WAAYA,EAAYC,MAAOA,EAAOC,YAAaA,W,kBCvI9GuN,OA/Cf,YAA4C,IAA7BrJ,EAA4B,EAA5BA,WAAYsJ,EAAgB,EAAhBA,cACnBC,EAAWC,eACXC,EAAcnT,iBAAO,MAErBoT,EAAe,uCAAG,8BAAAZ,EAAA,sEACCa,KAAMC,KAAK,SAAU,CAAC7J,OAAQ0J,EAAY1V,QAAQwJ,QADnD,OAChBsM,EADgB,OAGtBtI,GAAasI,EAAS/H,MAEhB/B,EAAS8J,EAAS/H,KAAK/B,OAC7BwB,GAAa,oBAAsBxB,GACnCwJ,EAAS,SAAD,OAAUxJ,IAPI,2CAAH,qDAUf+J,EAAa,uCAAG,sBAAAhB,EAAA,sDACpBS,EAAS,aADW,2CAAH,qDAIbQ,EAAa,uCAAG,4BAAAjB,EAAA,sDACd/I,EAAS0J,EAAY1V,QAAQwJ,MACnCgM,EAAS,SAAD,OAAUxJ,IAFE,2CAAH,qDASnB,OACE,uBAAKjK,UAAU,OAAf,UACE,qBAAIA,UAAU,YAAd,wBACA,uBAAKA,UAAU,iBAAf,UACE,sBAAKA,UAAU,UAAf,SACE,wBAAOnE,KAAK,OAAO4L,MAAOyC,EAAYgK,SATrB,SAACvM,GACxB6L,EAAc7L,EAAMwM,OAAO1M,QAQ6C2M,YAAY,WAAWpU,UAAU,gBAErG,sBAAKA,UAAU,UAAf,SACA,wBAAOnE,KAAK,OAAO0F,IAAKoS,EAAaS,YAAY,YAAYpU,UAAU,gBAEvE,uBAAKA,UAAW,UAAhB,UACE,yBAAQyD,QAASuQ,EAAehU,UAAY,SAA5C,sBACA,yBAAQyD,QAASmQ,EAAiB5T,UAAY,SAA9C,oBACA,yBAAQyD,QAASwQ,EAAejU,UAAY,SAA5C,4BC/CK,OAA0B,kCCA1B,OAA0B,gCCsBnCqU,GAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACb,uBAAKvU,UAAU,iBAAf,UACE,qBAAIA,UAAU,SAAd,SAAwBsU,IACxB,sBAAKtU,UAAU,kBAAf,SAAkCuU,QAKhCC,GAAW,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OAAQ,sBAAKxU,MAAO,CAChBV,QAAS,OACTO,cAAe,MACfyH,IAAK,QAHD,SAKHkN,EAAOhL,KAAI,SAACiL,EAAOC,GAAR,OACV,sBAEE1U,MAAO,CACLV,QAAS,OACTlC,MAAO,OACPM,OAAQ,OACR6B,eAAgB,SAChBC,WAAY,SACZmV,aAAc,MACdzT,gBAAiBuT,EAAMvT,iBAT3B,SAYE,sBAAKjB,IAAKwU,EAAMG,KAAM1U,IAAI,OAAOF,MAAO,CAAE6U,SAAU,MAAOC,UAAW,UAXjEJ,SAiBXK,GAAQ,SAAC,GAAD,IAAEN,EAAF,EAAEA,MAAOJ,EAAT,EAASA,MAAT,OACZ,sBAAKtU,UAAU,QAAQE,IAAKwU,EAAMxU,IAAKD,MAAO,CAAC5C,MAAOqX,EAAMO,MAAOtX,OAAQ+W,EAAMO,OAAQ9U,IAAKmU,KAG1FY,GAAa,SAAC,GAAD,IAAGZ,EAAH,EAAGA,MAAO3R,EAAV,EAAUA,QAASwS,EAAnB,EAAmBA,cAAnB,OACjB,+BACE,uBAAKnV,UAAU,qBAAf,UACA,uBAAKA,UAAU,kBAAf,UACE,8BAAKsU,IACL,6BAAI3R,OAELwS,QAQCC,GAAU,SAAC,GAAD,IAAGd,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAUG,EAApB,EAAoBA,MAApB,OAChB,uBAAK1U,UAAU,UAAf,UACI,qBAAIA,UAAU,gBAAd,SAA+BsU,IAC/B,uBAAKtU,UAAY,oBAAjB,UACI,sBAAKA,UAAU,kBAAf,SAAkCuU,IACjCG,GAAS,sBAAK1U,UAAU,QAAQE,IAAKwU,EAAMxU,IAAKD,MAAO,CAAC5C,MAAOqX,EAAMO,MAAOtX,OAAQ+W,EAAMO,OAAQ9U,IAAKmU,WAiB1Ge,GAAoB,CACtB,CAACR,KAAMtJ,EAAYpK,gBAAiB,UACpC,CAAC0T,KAAMtJ,EAAYpK,gBAAiB,UACpC,CAAC0T,KAAMtJ,EAAYpK,gBAAiB,SACpC,CAAC0T,KAAMtJ,EAAYpK,gBAAiB,WAGlCmU,GAAa,CACf,CAACT,KAAMtS,GAAMpB,gBAAiB,UAC9B,CAAC0T,KAAMtS,GAAMpB,gBAAiB,UAC9B,CAAC0T,KAAMtS,GAAMpB,gBAAiB,SAC9B,CAAC0T,KAAMtS,GAAMpB,gBAAiB,WAG5BoU,GAAe,CACjB,CAACV,KAAM7S,GAAcb,gBAAiB,UAC1C,CAAC0T,KAAM3S,GAAcf,gBAAiB,UACtC,CAAC0T,KAAM1S,GAAahB,gBAAiB,SACrC,CAAC0T,KAAM5S,GAAcd,gBAAiB,WAEhCqU,GAAe,CACjB,CAACX,KAAMhW,EAAKsC,gBAAiB,UACjC,CAAC0T,KAAM9V,EAAOoC,gBAAiB,UAC/B,CAAC0T,KAAM7V,EAAKmC,gBAAiB,SAC7B,CAAC0T,KAAM5V,EAAQkC,gBAAiB,WAG1BsU,GAAc,CAClB,CAACZ,KAAMxR,GAAOlC,gBAAiB,UAC/B,CAAC0T,KAAMa,GAAWvU,gBAAiB,UACnC,CAAC0T,KAAMvR,GAAKnC,gBAAiB,SAC7B,CAAC0T,KAAMrR,GAAMrC,gBAAiB,WAG1BwU,GAAe,kBACrB,uBAAK3V,UAAU,gBAAf,UACE,eAAC,GAAD,CAAQsU,MAAM,+BAAd,uHAGE,gBAAC,GAAD,CAASA,MAAM,WAAWI,MAAO,CAACxU,IAAK0V,GAAUX,MAAO,OAAxD,UACE,eAAC,GAAD,CAAYX,MAAM,oBAAoB3R,QAAQ,4DAC9C,eAAC,GAAD,CAAY2R,MAAM,iBAAiB3R,QACnC,iCACA,sDACA,wDACA,wDACA,8DAEA,eAAC,GAAD,CAAY2R,MAAM,SAAS3R,QAAQ,6CACnC,eAAC,GAAD,CAAY2R,MAAM,UAAU3R,QAAQ,2GAEtC,eAAC,GAAD,CAAS2R,MAAM,gBAAf,SACE,8IAEF,gBAAC,GAAD,CAASA,MAAM,WAAf,UACE,eAAC,GAAD,CAAYA,MAAM,eAAe3R,QAAQ,6EAA6EwS,cAAe,eAAC,GAAD,CAAUV,OAAQgB,OACvJ,eAAC,GAAD,CAAYnB,MAAM,YAAY3R,QAAQ,wDAAwDwS,cAAe,eAAC,GAAD,CAAUV,OAAQY,OAC/H,eAAC,GAAD,CAAYf,MAAM,UAAU3R,QAAQ,2EAA2EwS,cAAe,eAAC,GAAD,CAAUV,OAAQe,OAChJ,eAAC,GAAD,CAAYlB,MAAM,WAAW3R,QAAQ,8CAA8CwS,cAAe,eAAC,GAAD,CAAUV,OAAQa,OACpH,eAAC,GAAD,CAAYhB,MAAM,wBAAwB3R,QAAQ,6CAA6CwS,cAAe,eAAC,GAAD,CAAUV,OAAQc,OAChI,eAAC,GAAD,CAAYjB,MAAM,SAAS3R,QAAQ,8CAA8CwS,cAAe,eAAC,GAAD,CAAOb,MAAM,SAASI,MAAO,CAACxU,IAAKe,EAAUgU,MAAO,gBAGtJ,sBAAKjV,UAAU,aAAf,SACE,wHAiBS6V,OAZf,YAEE,OAF6C,EAA5B3L,WAA4B,EAAhBsJ,cAG3B,uBAAKxT,UAAU,WAAf,UACE,qBAAIA,UAAU,YAAd,yBACA,sBAAKA,UAAU,mBAAf,SACE,eAAC,GAAD,UClJS8V,OAdjB,WACI,MAAoCxV,mBAAS,IAA7C,mBAAO4J,EAAP,KAAmBsJ,EAAnB,KAEA,OACA,eAAC,KAAD,UACI,gBAAC,KAAD,WACE,eAAC,KAAD,CAAOqB,KAAK,gBAAgBkB,QAAS,eAAC,GAAD,CAAO3E,eAAkBlH,MAC9D,eAAC,KAAD,CAAO2K,KAAK,IAAIkB,QAAS,eAAC,GAAD,CAAM7L,WAAYA,EAAYsJ,cAAeA,MACtE,eAAC,KAAD,CAAOqB,KAAK,YAAYkB,QAAS,eAAC,GAAD,YAO3CC,IAASC,OACP,eAAC,IAAMC,WAAP,IAIAC,SAASC,eAAe,SCrB1BJ,IAASC,OACP,eAAC,IAAMC,WAAP,UACE,eAAC,GAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a0179563.chunk.js","sourcesContent":["import React from 'react';\n\nconst BoardContext = React.createContext();\n\nexport default BoardContext;","let TileType = {\n    UNKNOWN: -1,\n    NORMAL: 1,\n    EXIT: 2,\n    WALL: 3,\n    CONNECT: 4,\n    PORTAL: 5\n}\n\nclass Tile {\n    constructor(coord, type, hasItem, item, tokenType) {\n        this.coord = coord\n        this.type = type\n        this.hasItem = hasItem\n        this.item = item\n        this.tokenType = tokenType\n    }\n}\n\nexport { Tile, TileType }\n","const TokenType = {\n    DWARF: 1,\n    MAGE: 2,\n    BARBARIAN: 3,\n    ELF: 4\n}\n\nclass Token {\n    constructor(id, coord, selections, escaped, type) {\n        this.id = id\n        this.coord = coord\n        this.selections = selections\n        this.escaped = escaped\n        this.type = type\n    }\n\n    isMySelection() {\n        return this.selections.find(selection => selection.isSelf)\n    }\n}\n\nexport { Token, TokenType }","const GameStates = {\n    EXPLORE: 0,\n    STEAL: 1,\n    ESCAPE: 2,\n    LOSS: 3,\n    WIN: 4\n}\n\nexport { GameStates }","\nconst TileDirection = {\n    UP: 0,\n    DOWN: 1,\n    LEFT: 2,\n    RIGHT: 3,\n    UNKNOWN: 4\n}\n\nexport { TileDirection }\n","export default __webpack_public_path__ + \"static/media/up.552f859e.png\";","export default __webpack_public_path__ + \"static/media/down.40f8ab30.png\";","export default __webpack_public_path__ + \"static/media/left.aa0f5ff4.png\";","export default __webpack_public_path__ + \"static/media/right.9a984c67.png\";","export default __webpack_public_path__ + \"static/media/coins_new.2254d122.png\";","export default __webpack_public_path__ + \"static/media/timer.c21cbb42.png\";","let ItemType = {\n    COIN: 0,\n    TIMER: 1,\n    WEAPON: 2\n}\n\nclass Item {\n    constructor(type, tokenType) {\n        this.type = type\n        this.tokenType = tokenType\n    }\n}\n\nexport { Item, ItemType }","import {TileDirection} from\"../models/tileDirection\"\n\n\nconst getHorizontalOffset = (boardRect, tokenRect) => {\n    const left = Math.max(boardRect.left, tokenRect.left)\n    if(left < boardRect.right - tokenRect.width) {\n        return {left: left}\n    } else {\n        return {right: window.innerWidth - boardRect.right}\n    }\n}\n\nconst getVerticalOffset = (boardRect, tokenRect) => {\n    const top = Math.max(boardRect.top, tokenRect.top)\n    if(top < boardRect.bottom - tokenRect.height) {\n        return {top: top}\n    } else {\n        return {bottom: window.innerHeight - boardRect.bottom}\n    }\n}\n\nconst getOffsets = (boardRect, tokenRect) => {\n    return { ...getHorizontalOffset(boardRect, tokenRect),\n        ...getVerticalOffset(boardRect, tokenRect)}\n}\n\nconst getIndicatorInfo = (myRef, parent) => {\n    if(!myRef.current || !parent.current) {\n        return null\n    }\n    const tokenRect = myRef.current.getBoundingClientRect()\n    const boardRect = parent.current.getBoundingClientRect()\n    const isInView = (\n        tokenRect.top <= boardRect.bottom &&\n        tokenRect.left <= boardRect.right &&\n        tokenRect.bottom >= boardRect.top &&\n        tokenRect.right >= boardRect.left\n    );\n    if(isInView) {\n        return null\n    }\n    const upDist = boardRect.top - tokenRect.bottom\n    const downDist = tokenRect.top - boardRect.bottom\n    const leftDist = boardRect.left - tokenRect.right\n    const rightDist = tokenRect.left - boardRect.right\n\n\n    const maxDist = Math.max(upDist, downDist, leftDist, rightDist)\n    const offsets = getOffsets(boardRect, tokenRect)\n    if(upDist === maxDist) {\n       return {direction: TileDirection.UP, \n            ...offsets}\n    } else if(downDist === maxDist) {\n        return {direction: TileDirection.DOWN,\n            bottom: window.innerHeight - boardRect.bottom,\n            ...offsets}\n    } else if(rightDist === maxDist) {\n        return{direction: TileDirection.RIGHT,\n            ...offsets}\n    } else if(leftDist === maxDist) {\n        return{direction: TileDirection.LEFT,\n            ...offsets}\n    } else {\n        throw new Error(\"No direction specified\")\n    }\n}\n\nexport { getIndicatorInfo }","export default __webpack_public_path__ + \"static/media/axe2.3337d039.png\";","export default __webpack_public_path__ + \"static/media/sword.003d0d39.png\";","export default __webpack_public_path__ + \"static/media/arrows2.6d27d5a7.png\";","export default __webpack_public_path__ + \"static/media/potion.dc85f7b3.png\";","import {TokenType} from \"../models/token\"\nimport axe from \"../images/axe2.png\"\nimport sword from \"../images/sword.png\"\nimport bow from \"../images/arrows2.png\"\nimport potion from \"../images/potion.png\"\n\nconst getWeapon = ( tokenType ) => {\n    switch(tokenType) {\n        case TokenType.DWARF:\n            return {\n                img: axe,\n                color: 'orange'\n            }\n        case TokenType.BARBARIAN:\n            return {\n                img: sword,\n                color: 'yellow'\n            }\n        case TokenType.ELF:\n            return {\n                img: bow,\n                color: 'green'\n            }\n        case TokenType.MAGE:\n            return {\n                img: potion,\n                color: 'purple'\n            }\n        default:\n            throw new Error( \"Invalid token type\" )\n    }\n}\n\nexport {getWeapon}\n","import {TileDirection} from \"../models/tileDirection\"\nimport {TokenType} from \"../models/token\"\n\nimport up from \"../images/up.png\"\nimport down from \"../images/down.png\"\nimport left from \"../images/left.png\"\nimport right from \"../images/right.png\"\n\nconst OffScreenIndicator = ({indicatorImg, indicatorInfo }) => {\n    let directionImg\n    let indicatorPositionStyle = {\n        display: \"flex\",\n        bottom: indicatorInfo.bottom,\n        top: indicatorInfo.top,\n        left: indicatorInfo.left,\n        right: indicatorInfo.right,\n        justifyContent: \"center\",\n        alignItems: \"center\"\n    }\n    const imgStyle = {\n        height: indicatorInfo.imgScale,\n        width: indicatorInfo.imgScale\n    }\n    let imgClassName = \"offscreen-image\"\n    let containerClassName = \"offscreen\"\n    switch(indicatorInfo.tokenType) {\n        case TokenType.BARBARIAN:\n            containerClassName += \" barbarian\"\n            break\n        case TokenType.DWARF:\n            containerClassName += \" dwarf\"\n            break\n        case TokenType.ELF:\n            containerClassName += \" elf\"\n            break\n        case TokenType.MAGE:\n            containerClassName += \" mage\"\n            break\n        default:\n    }\n\n    switch(indicatorInfo.direction) {\n        case TileDirection.UP:\n            directionImg = up\n            indicatorPositionStyle.flexDirection = \"column\"\n            break\n        case TileDirection.DOWN:\n            directionImg = down\n            indicatorPositionStyle.flexDirection = \"column-reverse\"\n            break\n        case TileDirection.LEFT:\n            directionImg = left\n            indicatorPositionStyle.flexDirection = \"row\"\n            break\n        case TileDirection.RIGHT:\n            directionImg = right\n            indicatorPositionStyle.flexDirection = \"row-reverse\"\n            break\n        default:\n            throw new Error(\"Unsupported offscreen direction\")\n    }\n\n\n\n    \n    return (\n        <div className={containerClassName} style={indicatorPositionStyle}>\n            <img src={directionImg} className=\"offscreen-direction\" alt=\"offscreen direction\"/>\n            <img src={indicatorImg} style={imgStyle} className={imgClassName} alt='offscreen indicator' /> \n        </div>\n       \n    )\n}\n\nexport default OffScreenIndicator","import React, {useState, useEffect, useRef, useContext} from 'react'\nimport coinImg from \"../images/coins_new.png\"\nimport timerImg from \"../images/timer.png\"\n\nimport {ItemType} from \"../models/item\"\nimport {GameStates} from \"../models/gameState\"\nimport { getIndicatorInfo } from '../models/offscreen'\nimport { getWeapon} from './weaponStyle'\n\nimport BoardContext from \"./boardContext\"\nimport OffScreenIndicator from './offScreenIndicator'\n\n    \nconst Item = ({item, gameState}) => {\n    const [indicatorInfo, setIndicatorInfo] = useState(null)\n    const myRef = useRef(null);\n    const parentRef = useContext(BoardContext)\n    useEffect(() => {\n    const parent = parentRef\n    function checkIfInView() {\n        const indicatorInfo = getIndicatorInfo(myRef, parentRef)\n        if(indicatorInfo) {\n            indicatorInfo.tokenType = item.tokenType\n        }\n        setIndicatorInfo(indicatorInfo)\n    }\n\n    parent.current.addEventListener('scroll', checkIfInView);\n    checkIfInView();\n\n    return () => {\n        parent.current.removeEventListener('scroll', checkIfInView);\n    };\n    }, [parentRef]);\n    let itemImg\n    let className = 'item'\n    let style = {}\n    let showOffscreenIndicator = false\n    switch(item.type) {\n        case ItemType.COIN:\n            itemImg = coinImg\n            className += ' coin'\n            break;\n        case ItemType.TIMER:\n            itemImg = timerImg\n            className += ' time'\n            break;\n        case ItemType.WEAPON:\n            const weapon = getWeapon(item.tokenType)\n            itemImg = weapon.img\n            className += ' weapon'\n            style.backgroundColor = weapon.color\n            if(gameState !== GameStates.STEAL) {\n                style.opacity = \"30%\"\n            }\n            showOffscreenIndicator = indicatorInfo !== null && (gameState === GameStates.STEAL)\n            break\n        default:\n            throw new Error('Unknown item type: ' + JSON.stringify(item))\n    }\n\n    return (\n        <div  ref={myRef} className={className} style={style} >\n            <img src={itemImg} alt='item' />\n            { showOffscreenIndicator ?  <OffScreenIndicator indicatorInfo={indicatorInfo} indicatorImg={itemImg} /> : \"\"  }\n        </div>\n    )\n}\n\nexport default Item","import Item from \"./item\"\n\n\nconst NormalTile = ({tile, gameState }) => {\n    let className = 'tile'\n    return (\n        <div className={className}>\n            { tile.hasItem ? <Item item={tile.item} gameState={gameState}/> : null}\n        </div>\n       \n    )\n}\n\nexport default NormalTile","\nimport { TokenType } from \"../models/token\"\nimport { GameStates } from \"../models/gameState\"\nimport { TileDirection } from \"../models/tileDirection\"\n\nimport up from \"../images/up.png\"\nimport down from \"../images/down.png\"\nimport left from \"../images/left.png\"\nimport right from \"../images/right.png\"\n\nimport NormalTile from \"./tileNormal\"\n\n\nconst Connect = ({tile, getTileDirection, gameState }) => {\n    let className = 'tile-connect'\n    let tileImg\n    const tileDirection = getTileDirection(tile)\n    const show = tileDirection !== TileDirection.UNKNOWN && gameState === GameStates.EXPLORE\n\n    if(!show) {\n        return (<NormalTile tile = {tile}/>)\n    }\n    switch(tileDirection) {\n        case TileDirection.UP:\n            tileImg = up\n            break\n        case TileDirection.DOWN:\n            tileImg = down\n            break\n        case TileDirection.LEFT:\n            tileImg = left\n            break\n        case TileDirection.RIGHT:\n            tileImg = right\n            break\n        default:\n            //do nothing\n    }\n    switch(tile.tokenType) {\n        case TokenType.DWARF:\n            className += ' connect-dwarf'\n            break;\n        case TokenType.MAGE:\n            className += ' connect-mage'\n            break;\n        case TokenType.BARBARIAN:\n            className += ' connect-barbarian'\n            break;\n        case TokenType.ELF:\n            className += ' connect-elf'\n            break;\n        default:\n            throw new Error('Unknown token type')\n    }\n\n\n    //temporary hack, when the tile direction is unknown the connection point must be connected\n\n    return (\n         <div className={className}>\n            <img src={tileImg} className=\"tile-image\"  alt='' />\n        </div>    \n    )\n}\n\nexport default Connect","export default __webpack_public_path__ + \"static/media/green-portal.e3d54e5f.png\";","export default __webpack_public_path__ + \"static/media/orange-portal.e0a89eb5.png\";","export default __webpack_public_path__ + \"static/media/yellow-portal.f832ee4b.png\";","export default __webpack_public_path__ + \"static/media/purple-portal.f9f584fe.png\";","import { TokenType } from \"../models/token\"\nimport {GameStates} from \"../models/gameState\"\n\nimport greenPortal from \"../images/green-portal.png\"\nimport orangePortal from \"../images/orange-portal.png\"\nimport yellowPortal from \"../images/yellow-portal.png\"\nimport purplePortal from \"../images/purple-portal.png\"\n\nimport NormalTile from \"./tileNormal\"\n\nconst Portal = ({tile, gameState, selectedPortal }) => {\n    const show = gameState === GameStates.EXPLORE || gameState === GameStates.STEAL\n    /*if(!show) {\n        return (<NormalTile tile = {tile}/>)\n    }*/\n    let className = 'tile-portal'\n    let tileImg\n\n    switch(tile.tokenType) {\n        case TokenType.DWARF:\n            tileImg = orangePortal\n            break;\n        case TokenType.MAGE:\n            tileImg = purplePortal\n            break;\n        case TokenType.BARBARIAN:\n            tileImg = yellowPortal\n            break;\n        case TokenType.ELF:\n            tileImg = greenPortal\n            break;\n        default:\n            throw new Error('Unknown token type')\n    }\n\n    const isSelected = selectedPortal ? selectedPortal.coord.toString() === tile.coord.toString() : false\n    return (\n        <div className={className}>\n            {isSelected ? <div className='portal-indicator'/> : \"\"}\n            <img src={tileImg} className=\"tile-image\" alt='' /> \n        </div>\n    )\n}\n\nexport default Portal","export default __webpack_public_path__ + \"static/media/s1.cd3f2f2d.png\";","import React, {useState, useEffect, useRef, useContext} from 'react'\nimport { TokenType } from \"../models/token\"\nimport {GameStates} from \"../models/gameState\"\n\nimport exit from \"../images/s1.png\"\nimport { getIndicatorInfo } from '../models/offscreen'\n\nimport BoardContext from \"./boardContext\"\nimport OffScreenIndicator from './offScreenIndicator'\n\nconst Exit = ({tile, gameState }) => {\n    const [indicatorInfo, setIndicatorInfo] = useState(null)\n    const myRef = useRef(null);\n    const parentRef = useContext(BoardContext)\n    useEffect(() => {\n    const parent = parentRef\n    function checkIfInView() {\n        const indicatorInfo = getIndicatorInfo(myRef, parentRef)\n        if(indicatorInfo) {\n            indicatorInfo.tokenType = tile.tokenType\n        }\n        setIndicatorInfo(indicatorInfo)\n    }\n\n    parent.current.addEventListener('scroll', checkIfInView);\n    checkIfInView();\n\n    return () => {\n        parent.current.removeEventListener('scroll', checkIfInView);\n    };\n    }, [parentRef]);\n\n    let className = 'tile-exit'\n    const tileImg = exit\n    switch(tile.tokenType) {\n        case TokenType.DWARF:\n            className += ' exit-dwarf'\n            break;\n        case TokenType.MAGE:\n            className += ' exit-mage'\n            break;\n        case TokenType.BARBARIAN:\n            className += ' exit-barbarian'\n            break;\n        case TokenType.ELF:\n            className += ' exit-elf'\n            break;\n        default:\n            throw new Error('Unknown token type')\n    }\n\n    const style = {}\n    if(gameState !== GameStates.ESCAPE && gameState !== GameStates.WIN) {\n        style.opacity = \"40%\"\n    }\n\n    return (\n        <div ref={myRef} className={className} style={style}>\n            <img src={tileImg} className=\"tile-image\"  alt='' /> \n            {  indicatorInfo !== null && gameState === GameStates.ESCAPE ? <OffScreenIndicator indicatorInfo={indicatorInfo} indicatorImg={tileImg} /> : \"\"  }\n        </div>\n    )\n}\n\nexport default Exit","export default __webpack_public_path__ + \"static/media/rock.3d4d808c.png\";","import rockTile from \"../images/rock.png\"\n\nconst Barrier = () => {\n    let className = 'tile-exit'\n    const tileImg = rockTile\n    className = 'tile-wall'\n\n    return (\n        <div className={className}>\n            <img src={tileImg} className=\"tile-image\"  alt='' /> \n        </div>\n    )\n}\n\nexport default Barrier","const UnknownTile = () => {\n    const className = 'tile-unknown'\n    return (\n        <div className={className}>\n        </div>\n    )\n}\n\nexport default UnknownTile","import { TileType } from \"../models/tile\"\n\nimport Connect from \"./tileConnect\"\nimport Portal from \"./tilePortal\"\nimport Exit from \"./tileExit\"\nimport Barrier from \"./tileBarrier\"\nimport NormalTile from \"./tileNormal\"\nimport UnknownTile from \"./tileUnknown\"\n\n\nconst Tile = ({tile, getTileDirection, selectedPortal, gameState }) => {\n    let content\n    switch (tile.type) {\n        case TileType.EXIT:\n            content = <Exit tile={tile} gameState={gameState} />\n            break\n        case TileType.WALL:\n            content = <Barrier/>\n            break\n        case TileType.UNKNOWN:\n            content = <UnknownTile />\n            break\n        case TileType.CONNECT:\n            content = <Connect tile={tile} gameState={gameState} getTileDirection={getTileDirection} />\n            break\n        case TileType.PORTAL:\n            content = <Portal selectedPortal={selectedPortal} tile={tile} gameState={gameState}/>\n            break\n        case TileType.NORMAL:\n            content = <NormalTile tile={tile} gameState={gameState}/>\n            break\n        default:\n            throw new Error(\"Invalid tile type\")\n    }\n\n    const tileStyle = (tileCoord) => {\n        const style =  {\n        gridColumnStart: `${tileCoord.x + 1}`,\n        gridRowStart: `${tileCoord.y + 1}`,\n     }\n     return style\n    }\n\n    return (\n        <div className='tile-container' style={tileStyle(tile.coord)}>\n            { content }\n           \n        </div>\n       \n    )\n}\n\nexport default Tile","export default __webpack_public_path__ + \"static/media/dwarf_right.3de0ca4b.png\";","export default __webpack_public_path__ + \"static/media/warrior2.a0cb9f8d.png\";","export default __webpack_public_path__ + \"static/media/elf_bow.93f90f79.png\";","export default __webpack_public_path__ + \"static/media/mage.23ebe66e.png\";","import React, {useState, useEffect, useRef, useContext} from 'react'\nimport dwarf from \"../images/dwarf_right.png\"\nimport warrior from \"../images/warrior2.png\"\nimport elf from \"../images/elf_bow.png\"\nimport mage from \"../images/mage.png\"\n\nimport { TokenType } from \"../models/token\"\nimport { getIndicatorInfo } from '../models/offscreen'\n\nimport BoardContext from \"./boardContext\"\nimport OffScreenIndicator from './offScreenIndicator'\n\nconst Token = ({ token, onTokenSelected}) => {\n    const [indicatorInfo, setIndicatorInfo] = useState(null)\n    const myRef = useRef(null);\n    const parentRef = useContext(BoardContext)\n    useEffect(() => {\n    const parent = parentRef\n    function checkIfInView() {\n        const indicatorInfo = getIndicatorInfo(myRef, parentRef)\n        if (indicatorInfo && token ) {\n            indicatorInfo.tokenType = token.type\n            if(token.type === TokenType.DWARF) {\n                indicatorInfo.imgScale = \"60%\"\n            }\n        }\n        setIndicatorInfo(indicatorInfo)\n    }\n\n    parent.current.addEventListener('scroll', checkIfInView);\n    checkIfInView();\n\n    return () => {\n        parent.current.removeEventListener('scroll', checkIfInView);\n    };\n    }, [parentRef]);\n\n    if(!token || token.escaped ) {\n        return ''\n    }\n\n    let imgClass\n    if (token.selections.length !== 0) {\n        imgClass = 'token-selected'\n    } else if (token.selections.length === 0) {\n        imgClass = 'token'\n    }\n\n    let img\n    switch(token.type) {\n        case TokenType.DWARF:\n            img = dwarf\n            imgClass += \" token-dwarf\"\n            break;\n        case TokenType.ELF:\n            img = elf\n            imgClass += \" token-elf\"\n            break;\n        case TokenType.BARBARIAN:\n            img = warrior\n            imgClass += \" token-barbarian\"\n            break;\n        case TokenType.MAGE:\n            img = mage\n            imgClass += \" token-mage\"\n            break;\n        default:\n            throw new Error(\"Unknown token type\")\n    }\n\n    \n    \n    const onClick = () => {\n        if (token) {\n            onTokenSelected(token)\n        }\n    }\n\n    const tileStyle = (tileCoord) => {\n        const style =  {\n        gridColumnStart: `${tileCoord.x + 1}`,\n        gridRowStart: `${tileCoord.y + 1}`,\n     }\n     return style\n    }\n\n    return (\n        <div \n        ref={myRef} \n        className={imgClass} style={tileStyle(token.coord)} onClick={onClick}>\n            <img src={img} alt='token' />\n           { indicatorInfo !== null ? <OffScreenIndicator indicatorInfo={indicatorInfo} indicatorImg={img} /> : \"\"  }\n        </div>\n    )\n}\n\nexport default Token","export default __webpack_public_path__ + \"static/media/escalator_down.03b0327b.png\";","export default __webpack_public_path__ + \"static/media/escalator_up.671e7897.png\";","const EscalatorOrientation = {\n    DOWN: 0,\n    UP: 1\n}\n\nclass EscalatorModel {\n    constructor(id, startCoord, endCoord) {\n        this.id = id\n        this.startCoord = startCoord\n        this.endCoord = endCoord\n    }\n\n    getMinX() {\n        return Math.min(this.startCoord.x, this.endCoord.x)\n    }\n\n    getMinY() {\n        return Math.min(this.startCoord.y, this.endCoord.y)\n    }\n\n    getRowSpan() {\n        return Math.abs(this.startCoord.y - this.endCoord.y) + 1\n    }\n\n    getColSpan() {\n       return Math.abs(this.startCoord.x - this.endCoord.x) + 1\n    }\n\n    getOrientation() {\n        const minX = this.getMinX()\n        const minY = this.getMinY()\n        if( (minX === this.startCoord.x && minY === this.startCoord.y) \n            || (minX === this.endCoord.x && minY === this.endCoord.y )) {\n            return EscalatorOrientation.DOWN\n        } else {\n            return EscalatorOrientation.UP\n        }\n    }\n}\n\nexport { EscalatorModel, EscalatorOrientation }","import downImg from \"../images/escalator_down.png\"\nimport upImg from \"../images/escalator_up.png\"\nimport {EscalatorOrientation} from '../models/escalator'\n\nconst Escalator = ({ escalator, onEscalate }) => {\n    const rowStart = escalator.getMinY() + 1\n    const colStart = escalator.getMinX() + 1\n    let escImg\n    switch(escalator.getOrientation()) {\n        case EscalatorOrientation.DOWN:\n            escImg = downImg\n            break;\n        case EscalatorOrientation.UP:\n            escImg = upImg\n            break;\n        default:\n            throw new Error (\"Invalid Orientation\")\n    }\n\n    const tileStyle = {\n        gridRow: `${rowStart} / span ${escalator.getRowSpan()}`,\n        gridColumn: `${colStart} / span ${escalator.getColSpan()}`,\n    }\n\n\n    return (\n        < div className = 'escalator' style = {tileStyle} >\n            <img className = 'escalator-img' src={escImg} alt='escalator' />\n        </div>\n    )\n}\n\nexport default Escalator","\nconst Wall = ( {wall}) => {\n    const wallStyle = {\n        gridRow: `${wall.getStartRow()} / span ${wall.getRowSpan()}`,\n        gridColumn: `${wall.getStartCol()} / span ${wall.getColSpan()}`,\n        zIndex: 1\n    }\n\n    if(wall.isHorizontal()) {\n        wallStyle.borderTop = '10px solid #000000'\n        wallStyle.height ='0px'\n    } else {\n        wallStyle.borderLeft = '10px solid #000000'\n        wallStyle.width = '0px'\n    }\n\n    return (\n        < div className = 'wall' style = {wallStyle} >\n        </div>\n    )\n}\n\nexport default Wall","import React, {useRef, useState, useEffect} from 'react'\n\n\nimport BoardContext from './boardContext'\nimport Tile from './tile'\nimport {TileType} from '../models/tile'\n\nimport Token  from './token'\nimport Escalator from './escalator'\nimport Wall from './wall'\n\nconst Board = ({ gameState, board, tokens, escalators, walls, gameService }) => {\n    const boardRef = useRef(null)\n    const [selectedPortal, setSelectedPortal] = useState(null)\n\n    useEffect(() => {\n        boardRef.current.focus();\n      }, []);\n\n    const gridHeight = board.getHeight()\n    const gridWidth = board.getWidth()\n    const scrollToTile = (tileCoord) => {\n        if (boardRef.current) {\n          const boardRect = boardRef.current.getBoundingClientRect();\n          const tileWidth = 64\n          const tileHeight = 64\n    \n          const tileX = tileCoord.x * tileWidth\n          const tileY = tileCoord.y * tileHeight\n\n          const scrollX = tileX - (boardRect.width / 2) + (tileWidth / 2) ;\n          const scrollY = tileY - boardRect.height / 2 + (tileHeight / 2);\n\n          const scrollTo = {\n            top: scrollY,\n            left: scrollX,\n            behavior: 'smooth',\n          }\n    \n          boardRef.current.scrollTo(scrollTo);\n        }\n    }\n\n    const handleKeyUp = (event) => {\n        //the action based commands like escalator, portal, player selection should have some delay to allow for screen update\n        let selecting = false\n        if (event.key.toLowerCase() === 'q') {\n            const selectedToken = tokens.find(t => t.isMySelection())\n            const selectableTokens = tokens.filter(t => !t.escaped)\n            if(!selectedToken || selectedToken.escaped) {\n                const firstToken = selectableTokens[0]\n                scrollToTile(firstToken.coord)\n                gameService.select(firstToken.id)\n            } else {\n                const tokenIndex = selectableTokens.indexOf(selectedToken)\n                const nextIndex = (tokenIndex + 1) % selectableTokens.length\n                const nextToken = selectableTokens[nextIndex]\n                scrollToTile(nextToken.coord)\n                gameService.select(nextToken.id)\n            }\n        }\n        else if (event.key.toLowerCase() === 'e' ) {\n            const selectedToken = tokens.find(t => t.isMySelection())\n            if(selectedToken) {\n                const currTile = board.getTile(selectedToken.coord)\n                if(currTile.type === TileType.PORTAL) {\n                    selecting = true\n                    board.portalSelector.handle(selectedToken, currTile, scrollToTile)\n                } else {\n                    gameService.escalate()\n                }\n            }\n        } else if (event.key === 'Enter') {\n            if(!board.portalSelector.isActive()) {\n                return\n            }\n            selecting = true\n            const selectedPortal = board.portalSelector.select()\n            gameService.teleport(selectedPortal.coord)\n        }\n        if(!selecting) {\n            board.portalSelector.cancel()\n        }\n        const selectedPortal = board.portalSelector.getSelectedPortal()\n        setSelectedPortal(selectedPortal)\n    }\n    \n    const handleKeyDown = (event) => {\n        //movement commands like to be continuous to allow all one movement\n        if (event.key.toLowerCase() === 's') {\n            gameService.moveDown()\n        } else if (event.key.toLowerCase() === 'w') {\n            gameService.moveUp()\n        } else if (event.key.toLowerCase() === 'a') {\n            gameService.moveLeft()\n        } else if (event.key.toLowerCase() === 'd') {\n            gameService.moveRight()\n        }\n    }\n\n\n    const onTokenSelected = (token) => {\n        gameService.send(JSON.stringify(\n            {\n                type: \"SELECTED\",\n                selected: token.id\n            }\n        ))\n    }\n\n    const getTileDirection = (tile) => {\n        return board.getDirection(tile)\n    }\n\n    const boardStyle = {\n        overflow: 'auto',\n        display: 'grid',\n        gridTemplateColumns: `repeat(${gridWidth}, 64px)`,\n        gridTemplateRows: `repeat(${gridHeight}, 64px)`,\n        gap: '0px'\n     } \n\n    return (\n        <BoardContext.Provider value={boardRef}>\n            <div className=\"game-board\" ref={boardRef} style= {boardStyle} onKeyDown={handleKeyDown} onKeyUp={handleKeyUp} tabIndex={0}>\n                {\n                    board.grid.map((row, rowNum) =>\n                            row.map((tile, colNum) =>\n                                <Tile key={tile.coord.toString()} selectedPortal={selectedPortal} tile = {tile} getTileDirection={getTileDirection} gameState={gameState} />\n                            )\n                    )}\n                {\n                    escalators.map( (escalator) => <Escalator escalator={escalator}/>)\n                }\n                {\n                    tokens.map( (token) => <Token token={token} onTokenSelected={onTokenSelected}/>)\n                }\n                {\n                    walls.map( (wall) => <Wall wall={wall}/>  )\n                }     \n            </div>\n        </BoardContext.Provider>\n    )\n}\n\nexport default Board","const debug = (...params) => {\n    //console.log(...params)\n}\n\nconst info = (...params) => {\n    console.log(...params)\n}\n\nconst warn = (...params) => {\n    console.log(...params)\n}\nconst error = (...params) => {\n    console.error(...params)\n}\n\nexport default {\n    debug,\n    info,\n    warn,\n    error\n}","import logger from './logger'\n\nclass GameService {\n\n    constructor(gameId, playerName) {\n        this.handlers = []\n        this.gameId = gameId\n        this.playerName = playerName\n        this.allowedMovements = []\n    }\n\n    addHandler(newHandler) {\n        this.handlers = this.handlers.filter(handler => handler.id !== newHandler.id)\n        this.handlers.push(newHandler)\n    }\n\n    connect() {\n        return new Promise((resolve, reject) => {\n            let websocketURL = process.env.NODE_ENV === 'development' ? 'ws://127.0.0.1:3001' : 'wss://' + window.location.host\n            let finalURL = websocketURL+`?playerName=${this.playerName}`\n            this.connection = new WebSocket(finalURL)\n            logger.debug(\"Connecting to:\" + finalURL)\n            this.connection.onopen = () => {\n                resolve()\n            }\n            this.connection.onerror = (error) => {\n                logger.error(error)\n                logger.error('Sorry, but there\\'s some problem with your '\n                    + 'connection or the server is down.')\n                    reject(error)\n            }\n            \n            // most important part - incoming messages\n            this.connection.onmessage = (message) => {\n                try {\n                    var json = JSON.parse(message.data);\n                } catch (e) {\n                   logger.error('Invalid JSON: ', message.data);\n                    return\n                }\n            \n                if(json.gameId && json.gameId !== this.gameId) {\n                    logger.warn('Sent message for different game')\n                    return\n                }\n\n                for (let handler of this.handlers) {\n                    handler.handle(json)\n                }\n            }\n            setInterval(() => {\n                if (this.connection.readyState !== 1) {\n                    logger.error('Error missing connection');\n                }\n            }, 3000);\n          });\n       \n    }\n\n    getInitialUpdate() { \n        this.sendBasicCommand('INITIAL')\n    }\n\n    send(message) {\n        let messageObject = JSON.parse(message)\n        messageObject.gameId = this.gameId\n        let gameMessage = JSON.stringify(messageObject)\n\n        logger.debug(\"SEND: \" + gameMessage)\n        this.connection.send(gameMessage)\n    }\n\n    select(id) {\n        this.send(JSON.stringify(\n            {\n                type: \"SELECTED\",\n                selected: id\n            }\n        ))\n    }\n\n    setMovements = (movements) => {\n        this.allowedMovements = movements\n    }\n    \n    sendBasicCommand = (command) => {\n        this.send(JSON.stringify(\n            {\n                type: command\n            }\n        ))\n    }\n    \n    sendMovement(command){\n        if (!this.allowedMovements.includes(command)) {\n            return\n        }\n        this.sendBasicCommand(command)\n    }\n    \n    reset = () => {\n        this.sendBasicCommand('RESET')\n    }\n    \n    moveRight = () => {\n       this.sendMovement('RIGHT')\n    }\n    \n    moveLeft = () => {\n        this.sendMovement('LEFT')\n    }\n    \n    moveDown = () => {\n        this.sendMovement('DOWN')\n    }\n    \n    moveUp = () => {\n        this.sendMovement('UP')\n    }\n    \n    doSomething = (playerName) => {\n        this.send(JSON.stringify(\n            {\n                type: 'DO-SOMETHING',\n                player: playerName\n            }\n        ))\n    }\n\n    teleport = (coord) => {\n        this.send(JSON.stringify(\n            {\n                type: \"TELEPORT\",\n                coord: coord\n            }\n        ))\n    }\n\n    escalate = (escalatorId) => {\n        this.send(JSON.stringify(\n            {\n                type: \"ESCALATE\",\n                id: escalatorId\n            }\n        ))\n    }\n\n\n}\n\nexport default GameService","class Coordinate {\n    constructor(x, y) {\n        this.x = x\n        this.y = y\n    }\n\n    toString() {\n        return `(${this.x}, ${this.y})`\n    }\n}\n\nexport default Coordinate","class WallModel {\n    constructor(startCoord, endCoord) {\n        this.startCoord = startCoord\n        this.endCoord = endCoord\n    }\n\n    getStartRow() {\n        return Math.min(this.startCoord.y, this.endCoord.y) + 1\n    }\n\n    getStartCol() {\n        return Math.min(this.startCoord.x, this.endCoord.x) + 1\n    }\n\n    getRowSpan() {\n        return Math.max(1, Math.abs(this.startCoord.y - this.endCoord.y))\n    }\n\n    getColSpan() {\n        return Math.max(1, Math.abs(this.startCoord.x - this.endCoord.x))\n    }\n\n    isHorizontal() {\n        return this.startCoord.y === this.endCoord.y\n    }\n}\n\nexport { WallModel }","class Selection {\n    constructor(selectorName, isSelf) {\n        this.selectorName = selectorName\n        this.isSelf = isSelf\n    }\n\n     getInitials() {\n        const split = this.selectorName.split(\" \")\n        return split.map(substr => substr[0]).join('')\n      }\n}\n\nexport { Selection }","const SelectionState = {\n    INACTIVE: 0,\n    ACTIVE: 1\n}\n\n\nclass PortalSelector {\n    constructor(portals) {\n        this.resetSelection()\n        this.portals = portals\n    }\n\n    resetSelection() {\n        this.state = SelectionState.INACTIVE\n        this.selectedIndex = null\n        this.selectablePortals = []\n    }\n\n    isActive() {\n        return this.state !== SelectionState.INACTIVE\n    }\n\n    handle(selectedToken, currPortal, scrollToTile) {\n        if(selectedToken.type !== currPortal.tokenType) {\n            return\n        }\n\n        if(this.state === SelectionState.INACTIVE) {\n            //initial selection\n            this.selectedIndex = 0\n            this.selectablePortals = this.portals.filter( portal => portal.tokenType === selectedToken.type && portal !== currPortal)\n            this.state = SelectionState.ACTIVE\n        } else if(this.state === SelectionState.ACTIVE) {\n            this.selectedIndex = (this.selectedIndex + 1) % this.selectablePortals.length\n        } else {\n            throw new Error('Cannot handle that state yet')\n        }\n        if(this.selectablePortals.length) {\n            const newSelection = this.selectablePortals[this.selectedIndex]\n            scrollToTile(newSelection.coord)\n        }\n    }\n\n    getSelectedPortal() {\n        if(this.selectedIndex != null && this.selectablePortals.length) {\n            return this.selectablePortals[this.selectedIndex]\n        }\n\n        return null\n    }\n\n    select() {\n        if(this.state === SelectionState.INACTIVE) {\n            throw new Error('Cannot choose selection while not selecting')\n        } else if(this.state === SelectionState.ACTIVE) {\n            const selection = this.selectablePortals[this.selectedIndex]\n            this.resetSelection()\n            return selection\n        }\n        else {\n            throw new Error('Cannot handle that state yet')\n        }\n    }\n\n    cancel() {\n        if(this.state === SelectionState.ACTIVE) {\n            this.resetSelection()\n        }\n    }\n}\n\nexport { PortalSelector }","import { TileType } from \"./tile\"\nimport { TileDirection } from \"./tileDirection\"\nimport {PortalSelector} from './portalSelector'\nimport Coordinate from \"./coordinate\"\nimport {ItemType} from \"./item\"\n\nclass BoardModel {\n    constructor(grid) {\n        this.grid = grid\n        this.portalSelector =  new PortalSelector(this.getPortals())\n    }\n\n    getHeight() {\n        return this.grid.length\n    }\n\n    getWidth() {\n       return this.grid.length === 0 ? 0 : this.grid[0].length\n\n    }\n\n    getTile(coord) {\n        if(coord.y < 0 || coord.y >= this.grid.length) {\n            return null\n        }\n        if(coord.x < 0 || coord.x >= this.grid[0].length) {\n            return null\n        }\n        return this.grid[coord.y][coord.x]\n    }\n\n    getPortals() {\n        return this.grid.flatMap(row => row.filter( tile => tile.type === TileType.PORTAL ))\n    }\n\n    getWeaponTiles() {\n        return this.grid.flatMap(row => row.filter( tile => tile.item && tile.item.type === ItemType.WEAPON))\n    }\n    \n    getDirection(tile) {\n        if(this.grid.length === 0 ) {\n            return TileDirection.UNKNOWN\n        }\n    \n        const left = this.getTile(new Coordinate(tile.coord.x - 1, tile.coord.y))\n        const right = this.getTile(new Coordinate(tile.coord.x + 1, tile.coord.y))\n        const up = this.getTile(new Coordinate(tile.coord.x, tile.coord.y - 1))\n        const down = this.getTile(new Coordinate(tile.coord.x, tile.coord.y + 1))\n        const onLeftBorder = tile.coord.x === 0\n        const onRightBorder = tile.coord.x === this.grid[0].length - 1\n        const onTopBorder = tile.coord.y === 0\n        const onBottomBorder = tile.coord.y === this.grid.length - 1\n        if( onLeftBorder || (left && left.type === TileType.UNKNOWN)) {\n            return TileDirection.LEFT\n        } else if( onRightBorder || (right && right.type === TileType.UNKNOWN)) {\n            return TileDirection.RIGHT\n        } else if( onTopBorder || (up && up.type === TileType.UNKNOWN)) {\n            return TileDirection.UP\n        } else if( onBottomBorder || (down && down.type === TileType.UNKNOWN)) {\n            return TileDirection.DOWN\n        } else {\n            return TileDirection.UNKNOWN\n        }\n    }\n}\n\nexport { BoardModel }","export default __webpack_public_path__ + \"static/media/staircase.43f64a57.png\";","export default __webpack_public_path__ + \"static/media/selection.bd6de74f.png\";","export default __webpack_public_path__ + \"static/media/portal2.54f430bb.png\";","import up from \"../images/up.png\"\nimport down from \"../images/down.png\"\nimport left from \"../images/left.png\"\nimport right from \"../images/right.png\"\nimport escalate from \"../images/staircase.png\"\nimport select from \"../images/selection.png\"\nimport portal from \"../images/portal2.png\"\n\nconst MoveIndicator = ({ move, isSelf }) => {\n    let imgSrc\n    let keyIcon\n    if(move === 'LEFT') {\n        imgSrc = left\n        keyIcon = 'A'\n    } else if(move ==='RIGHT') {\n        imgSrc = right\n        keyIcon = 'D'\n    } else if(move ==='UP') {\n        imgSrc = up\n        keyIcon = 'W'\n    } else if(move ==='DOWN') {\n        imgSrc = down\n        keyIcon = 'S'\n    } else if(move ==='ESCALATE') {\n        imgSrc = escalate\n        keyIcon = 'E'\n    } else if(move ==='PORTAL') {\n        imgSrc = portal\n        keyIcon = 'E'\n    }\n    else if(move === 'SELECT') {\n        imgSrc = select\n        keyIcon = 'Q'\n    }\n    else {\n        console.log(\"Fail, move: \" + move)\n    }\n    return (\n        < div className ='move-icon'>\n           <img src={imgSrc} alt='move' />\n           {isSelf ? <span>{keyIcon}</span> : \"\"}\n        </div>\n    )\n}\n\nexport default MoveIndicator","import MoveIndicator from './moveIndicator'\n\nconst OtherPlayer = ({ playerName, allowedMoves, doSomething }) => {\n\n    const onClickDoSomething = (_) => {\n        doSomething(playerName)\n    }\n    return (\n        < div className='player-other'>\n            <div className='player-bar'>\n                <label>{playerName}</label>\n                {\n                    allowedMoves.map(move =>  <MoveIndicator key={move} move={move} isSelf={false}></MoveIndicator>)\n                }\n                <button className='doSomethingButton' onClick={onClickDoSomething}>!</button>\n                \n            </div>\n        </div>\n    )\n}\n\nexport default OtherPlayer","import OtherPlayer from './playerIndicator'\n\nconst OtherPlayers = ({otherPlayers, doSomething}) =>  {          \n    return (\n        <div>\n            <h2 hidden={!otherPlayers.length}>Other Players</h2>\n            {\n                otherPlayers.map(player => <OtherPlayer key={player.playerName}\n                    playerName={player.playerName}\n                    allowedMoves={player.moves}\n                    isSelf={false}\n                    doSomething={doSomething} />)\n            }\n            \n        </div>\n    )\n}\n\n  export default OtherPlayers","export default __webpack_public_path__ + \"static/media/sound.886db3ed.png\";","import down from \"../images/sound.png\"\n\nconst Talk = () => {\n    return (\n        <div className='talk-icon'>\n            <img src={down} alt='can-talk'/>\n        </div>\n    )\n}\n\nexport default Talk","import MoveIndicator from './moveIndicator'\n\nconst Moves = ({ playerName, allowedMoves }) => {\n    const allMoves = ([ 'SELECT', 'ESCALATE','PORTAL'].concat(allowedMoves))\n\n    return (\n        < div className='player-self'>\n            <span id='mainPlayer'>{playerName}</span>\n            <h2>Moves</h2>\n            <div className = 'player-moves' >\n                {\n                    allMoves.map(move =>  <MoveIndicator key={move} move={move} isSelf={true}></MoveIndicator>)\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default Moves","import React from 'react'\n\nconst Notification = ({ notification }) => {\n    if (notification === null) {\n        return null\n    }\n\n    return (\n        <div className={notification.isGood ? 'notification' : 'notification-bad'}>\n            {notification.message}\n        </div>\n    )\n}\n\nexport default Notification","import React from 'react'\n\nconst Timer = ({ remainingSeconds }) => {\n    const getTimeStr = (num) => {\n        const paddedString = \"00\" + num\n        return paddedString.substr(paddedString.length - 2)\n    }\n    const minutes = getTimeStr(Math.floor(remainingSeconds / 60))\n    const seconds = getTimeStr(remainingSeconds % 60)\n\n    const criticalTime = 10\n    const className = remainingSeconds > criticalTime ? 'timer' : 'timer-critical'\n    return (\n        <div className={className}>\n            {`${minutes}:${seconds}`}\n        </div>\n    )\n}\n\nexport default Timer","import React from 'react'\nimport { getWeapon} from './weaponStyle'\n\nconst WeaponIcon = ({weaponType, occupied}) => {\n    const weaponInfo = getWeapon(weaponType)\n    const style = {\n        backgroundColor: weaponInfo.color\n    }\n    if(occupied) {\n        style.opacity = \"30%\"\n    }\n\n    const imgStyle = {\n        width: \"100%\",\n    }\n    return (\n        <div className='toolbar-icon' style={style}>\n            <img src={weaponInfo.img} style={imgStyle} alt='toolbar weapon indicator' />\n        </div>\n    )\n}\n\nexport default WeaponIcon","import React from 'react'\nimport { GameStates } from \"../models/gameState\"\nimport {TokenType} from \"../models/token\"\nimport Timer from './Timer'\nimport WeaponIcon from './weaponIcon'\n\nconst Toolbar = ({ gameState, tokens, board, remaining, remainingSeconds }) => {\n\n    let message = \"\"\n    if(gameState !== null) {\n        switch(gameState) {\n            case GameStates.EXPLORE:\n                message = \"Explore the maze! Remaining: \" + remaining\n                break\n            case GameStates.STEAL:\n                message = \"Steal the weapons!\"\n                break\n            case GameStates.ESCAPE:\n                message = \"Escape the Maze!\"\n                break\n            case GameStates.LOSS:\n                message = \"Game Over\"\n                break\n            case GameStates.WIN:\n                message = \"Win!\"\n                break\n            default:\n                throw new Error(\"Invalid game state\")\n        }\n    }\n\n    const weaponTiles = board.getWeaponTiles()\n\n    const isOccupied = (weaponTile) => {\n        const occupyingToken = tokens.find(token => token.coord.toString() === weaponTile.coord.toString())\n        return occupyingToken && occupyingToken.type === weaponTile.item.tokenType\n    }\n    const weapons = weaponTiles.map(weaponTile => {\n        return {\n            type: weaponTile.item.tokenType,\n            occupied: isOccupied(weaponTile)}\n    })\n\n    \n\n    return (\n        <div className='toolbar'>\n            <Timer remainingSeconds={remainingSeconds} />\n            {message}\n            <div className='toolbar-icon-container'>\n                {gameState === GameStates.STEAL ? \n                weapons.map( weapon => <WeaponIcon key={weapon.type} occupied={weapon.occupied} weaponType={weapon.type}/>) \n                : \"\"}\n            </div>\n        </div>\n    )\n}\n\nexport default Toolbar","import '../App.css'\nimport React, { useState, useEffect } from 'react'\nimport Board from './board'\nimport GameService from '../services/gameService'\nimport logger from '../services/logger'\nimport Coordinate from '../models/coordinate'\nimport {GameStates} from '../models/gameState'\nimport {EscalatorModel} from '../models/escalator'\nimport {WallModel} from '../models/wallModel'\nimport {Selection} from '../models/selection'\nimport {BoardModel} from '../models/board'\nimport { Tile, TileType } from '../models/tile'\nimport { Item } from '../models/item'\nimport { Token } from '../models/token'\nimport OtherPlayers from './otherPlayers'\nimport Talk from './talk'\nimport Moves from './moves'\nimport Notification from './notification'\nimport Toolbar from './toolbar'\nimport { useParams } from 'react-router-dom'\n\n\nconst getCoordinate = (pos) => {\n  const x = parseInt(pos.x)\n  const y = parseInt(pos.y)\n  return new Coordinate(x, y)\n}\n\nconst getTileType = (type) => {\n  switch(type) {\n    case 0:\n      return TileType.NORMAL\n    case 1:\n      return TileType.WALL\n    case 2:\n      return TileType.EXIT\n    case 3:\n      return TileType.CONNECT\n    case 4:\n      return TileType.PORTAL\n    default:\n      return TileType.UNKNOWN\n  }\n}\n\nconst getTile = (tileData) => {\n  const itemData = tileData.item\n  let item\n  if(itemData) {\n    item = new Item(itemData.type, itemData.tokenType)\n  }\n\n  return new Tile(getCoordinate(tileData.pos), \n  getTileType(tileData.type), \n  tileData.hasItem, \n  item,\n  tileData.tokenType)\n}\n\nconst getTileRow = (row) => {\n  return row.map(tileData => getTile(tileData))\n}\n\nconst getTiles = (tiles) => {\n  const grid = tiles.map( row => getTileRow(row))\n  return new BoardModel(grid)\n}\n\nconst getEscalators = (escalators) => {\n  return escalators.map( escalator => new EscalatorModel(escalator.id, getCoordinate(escalator.start), getCoordinate(escalator.end)))\n}\n\nconst getWalls = (walls) => {\n  return walls.map( wall => new WallModel(getCoordinate(wall.start), getCoordinate(wall.end)))\n}\n\nconst getSelectedBy = (selections, idx, myPlayerName) => {\n  return selections.filter(selection => selection.selection === idx)\n    .map(selection => new Selection(selection.selectedBy, selection.selectedBy === myPlayerName))\n\n}\n\nconst getTokens = (data, myPlayerName) => {\n  const newTokens = data.tokens.map((tokenData, idx) =>\n  new Token(idx,\n    getCoordinate(tokenData.pos),\n    getSelectedBy(data.selections, idx, myPlayerName),\n    tokenData.escaped,\n    tokenData.type))\n  return newTokens\n}\n\nfunction Game({realPlayerName}) {\n  const [updatedTiles, setTiles] = useState(new BoardModel([]))\n  const [escalators, setEscalators] = useState([])\n  const [walls, setWalls] = useState([])\n  const [tokens, setTokens] = useState([])\n  const [allowedMoves, setMoves] = useState([])\n  const [allPlayers, setAllPlayers] = useState([])\n  const [notificationMessage, setNotificationMessage] = useState(null)\n  const [remainingSeconds, setRemainingSeconds] = useState(null)\n  const [gameService, setGameService] = useState(null)\n  const [remainingSections, setRemainingSections] = useState(0)\n  const [gameState, setGameState] = useState(null)\n  const [canTalk, setCanTalk] = useState(false)\n\n  const clearNotification = () => {\n    setNotificationMessage(null)\n  }\n  let { gameId } = useParams();\n  useEffect(() => {\n    let service = new GameService(gameId, realPlayerName)\n    const notify = (message, fade, isGood) => {\n      setNotificationMessage({\n        message: message,\n        isGood: isGood\n      })\n      if (!fade) {\n        return\n      }\n      setTimeout(() => {\n        clearNotification()\n      }, 5000)\n    }\n\n    let handler = {\n      id: 'app-updates',\n      handle: (json) => {\n        if (json.type === 'token-update') {\n          setTokens(getTokens(json.data, realPlayerName))\n          setCanTalk(json.canTalk)\n        } else if (json.type === 'board-update') {\n          logger.debug('Board UPDATE')\n          setTiles(getTiles(json.data.board.tiles))\n          setEscalators(getEscalators(json.data.board.escalators))\n          setWalls(getWalls(json.data.board.walls))\n          setTokens(getTokens(json.data.tokenData))\n          setRemainingSections(json.data.remainingSections)\n          setGameState(json.data.state)\n          clearNotification()\n        } else if (json.type === 'win') {\n          setGameState(GameStates.WIN)\n        } else if (json.type === 'movements') {\n          service.setMovements(json.data.movements)\n          setMoves(json.data.movements)\n        } else if (json.type === 'all-players') {\n          setAllPlayers(json.data)\n        } else if (json.type === 'do-something') {\n          notify(`${json.data.sender} wants you to do something.`, true, true)\n        } else if (json.type === 'timer-update') {\n          // probably can update in a different way \n          //date to finish makes this less chatty\n          //could have an interval here that counts down\n          //timer-update is sent only on time pickups and connections\n          setRemainingSeconds(json.data.seconds)\n        } else if (json.type === 'lose') {\n          setGameState(GameStates.LOSS)\n        }\n      }\n    }\n    service.addHandler(handler)\n    async function initialConnect() {\n      await service.connect()\n      service.getInitialUpdate()\n    }\n    initialConnect()\n    setGameService(service)\n  },\n  [gameId])\n\n  const reset = (_) => {\n    gameService.reset()\n  }\n\n  const doSomething = (otherPlayerName) => {\n    gameService.doSomething(otherPlayerName)\n  }\n\n  const otherPlayers = allPlayers.filter(playerInfo => playerInfo.playerName !== realPlayerName)\n  return (\n    <div className=\"App\">\n      <Notification notification={notificationMessage} />\n      <div className=\"board-space\">\n        <Toolbar gameState={gameState} tokens={tokens} board={updatedTiles} remaining={remainingSections} remainingSeconds={remainingSeconds}/>\n        <div className=\"board-controls\">\n          <Moves playerName={realPlayerName} allowedMoves={allowedMoves} />\n          {otherPlayers.length && canTalk ? <Talk/> : <OtherPlayers doSomething={doSomething} otherPlayers={otherPlayers}/> }\n          <button className='button' id='reset-button' onClick={reset}>Reset</button>\n        </div>\n        <Board gameState={gameState} board={updatedTiles} tokens={tokens} escalators={escalators} walls={walls} gameService={gameService} />\n      </div>\n\n    </div >\n  );\n}\n\nexport default Game;\n","import React, { useRef } from 'react'\nimport {\n  useNavigate\n} from \"react-router-dom\"\nimport axios from 'axios';\nimport logger from '../services/logger'\n\nfunction Menu({playerName, setPlayerName}) {\n  const navigate = useNavigate();\n  const joinCodeRef = useRef(null)\n\n  const createGameClick = async () => {\n    const response = await axios.post('/games', {gameId: joinCodeRef.current.value});\n\n    logger.debug(response.data)\n    // The server responds with the id of the new user\n    const gameId = response.data.gameId;\n    logger.debug('Game Id response:' + gameId)\n    navigate(`/game/${gameId}`);\n  };\n\n  const tutorialClick = async () => {\n    navigate(`/tutorial`);\n  };\n\n  const joinGameClick = async () => {\n    const gameId = joinCodeRef.current.value\n    navigate(`/game/${gameId}`);\n  };\n\n  const handleNameChange = (event) => {\n    setPlayerName(event.target.value)\n  }\n\n  return (\n    <div className=\"menu\">\n      <h1 className='gameTitle'>Magic Maze</h1>\n      <div className=\"menuSelections\">\n        <div className=\"menuRow\" >\n          <input type=\"text\" value={playerName} onChange={handleNameChange} placeholder='Nickname' className=\"inputText\" />\n        </div>\n        <div className=\"menuRow\" >\n        <input type=\"text\" ref={joinCodeRef} placeholder='Game Code' className=\"inputText\" />\n        </div>\n        <div className =\"menuRow\">\n          <button onClick={tutorialClick} className = \"button\" >Tutorial</button>\n          <button onClick={createGameClick} className = \"button\" >Create</button>\n          <button onClick={joinGameClick} className = \"button\" >Join</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Menu;\n","export default __webpack_public_path__ + \"static/media/moves.65f51140.png\";","export default __webpack_public_path__ + \"static/media/elf.cb4f32eb.png\";","import React from 'react'\nimport controls from \"../images/moves.png\"\nimport ImageGrid from \"./tempColorGrid\"\nimport connection from \"../images/up.png\";\nimport exit from \"../images/s1.png\";\nimport timerImg from \"../images/timer.png\"\n\nimport orangePortal from \"../images/orange-portal.png\"\nimport yellowPortal from \"../images/yellow-portal.png\"\nimport greenPortal from \"../images/green-portal.png\"\nimport purplePortal from \"../images/purple-portal.png\"\n\nimport axe from \"../images/axe2.png\";\nimport sword from \"../images/sword.png\";\nimport bow from \"../images/arrows2.png\";\nimport potion from \"../images/potion.png\";\n\nimport barbarian from \"../images/warrior2.png\";\nimport elf from \"../images/elf.png\";\nimport mage from \"../images/mage.png\";\nimport dwarf from \"../images/dwarf_right.png\"\n\nconst Header = ({ title, children  }) => (\n  <div className=\"header-section\">\n    <h1 className=\"header\">{title}</h1>\n    <div className=\"section-content\">{children}</div>\n  </div>\n  );\n  \n\nconst ImageRow = ({images}) => {\n    return (<div style={{\n        display: 'flex',\n        flexDirection: 'row',\n        gap: '24px'\n      }}>\n        {images.map((image, index) => (\n          <div\n            key={index}\n            style={{\n              display: 'flex',\n              width: '64px',\n              height: '64px',\n              justifyContent: 'center',\n              alignItems: 'center',\n              borderRadius: '8px',\n              backgroundColor: image.backgroundColor\n            }}\n          >\n            <img src={image.path} alt=\"grid\" style={{ maxWidth: '75%', maxHeight: '75%' }} />\n          </div>\n        ))}\n      </div>)\n}\n\nconst Image = ({image, title}) => (\n  <img className=\"image\" src={image.src} style={{width: image.scale, height: image.scale}} alt={title} />\n)\n\nconst SubSection = ({ title, content, visualContent }) => (\n  <div >\n    <div className=\"subsection-content\"> \n    <div className=\"subsection-text\">\n      <h3>{title}</h3>\n      <p>{content}</p>\n    </div>\n    {visualContent}\n    </div>\n\n\n\n  </div>\n);\n\nconst Section = ({ title, children, image }) => (\n<div className=\"section\">\n    <h2 className=\"section-title\">{title}</h2>\n    <div className = \"content-container\">\n        <div className=\"section-content\">{children}</div>\n        {image && <img className=\"image\" src={image.src} style={{width: image.scale, height: image.scale}} alt={title} />}\n    </div>\n\n</div>\n);\n\nconst TempSection = ({ title, children, visualContent }) => (\n    <div className=\"section\">\n        <h2 className=\"section-title\">{title}</h2>\n        <div className = \"content-container\">\n            <div className=\"section-content\">{children}</div>\n            {visualContent}\n        </div>\n    \n    </div>\n    );\n\nconst explorationImages = [\n    {path: connection, backgroundColor: \"orange\" },\n    {path: connection, backgroundColor: \"yellow\" },\n    {path: connection, backgroundColor: \"green\" },\n    {path: connection, backgroundColor: \"purple\" },\n]\n\nconst exitImages = [\n    {path: exit, backgroundColor: \"orange\" },\n    {path: exit, backgroundColor: \"yellow\" },\n    {path: exit, backgroundColor: \"green\" },\n    {path: exit, backgroundColor: \"purple\" },\n]\n\nconst portalImages = [\n    {path: orangePortal, backgroundColor: \"orange\" },\n{path: yellowPortal, backgroundColor: \"yellow\" },\n{path: greenPortal, backgroundColor: \"green\" },\n{path: purplePortal, backgroundColor: \"purple\" }]\n\nconst weaponImages = [\n    {path: axe, backgroundColor: \"orange\" },\n{path: sword, backgroundColor: \"yellow\" },\n{path: bow, backgroundColor: \"green\" },\n{path: potion, backgroundColor: \"purple\" },\n]\n\nconst tokenImages = [ \n  {path: dwarf, backgroundColor: \"orange\" },\n  {path: barbarian, backgroundColor: \"yellow\" },\n  {path: elf, backgroundColor: \"green\" },\n  {path: mage, backgroundColor: \"purple\" }\n]\n\nconst TutorialPage = () => (\n<div className=\"tutorial-page\">\n  <Header title=\"Welcome to Magic Maze Online\">\n    Play with up to 3 friends to explore the maze, find weapons, steal them, and escape before time runs out.\n  </Header>\n    <Section title=\"Controls\" image={{src: controls, scale: \"33%\"}}>\n      <SubSection title=\"Select Characters\" content=\"Press 'Q' to switch characters or click on a character.\" />\n      <SubSection title=\"Basic Movement\" content={\n      <div>\n      <p>Press 'W' to move Up</p>\n      <p>Press 'A' to move Left</p>\n      <p>Press 'S' to move Down</p>\n      <p>Press 'D' to move Right</p>\n      </div>}/>\n      <SubSection title=\"Stairs\" content=\"Press 'E' to traverse up or down stairs.\" />\n      <SubSection title=\"Portals\" content=\"Press 'E' to toggle through available portals. Press Enter/Return to teleport to a selected portal.\" />\n    </Section>\n    <Section title=\"Communication\">\n      <p>Use voice/video tech like Zoom, or Discord. For a challenge only talk after picking up an hourglass timer.</p>\n    </Section>\n    <Section title=\"Gameplay\">\n      <SubSection title=\"Color Coding\" content=\"Each character has tiles or items available only to them, matched by color\" visualContent={<ImageRow images={tokenImages}/>}/>\n      <SubSection title=\"Exploring\" content=\"Navigate to exploration tiles to reveal new sections.\" visualContent={<ImageRow images={explorationImages}/>}/>\n      <SubSection title=\"Weapons\" content=\"Steal weapons after exploring all sections and standing on weapon tiles.\" visualContent={<ImageRow images={weaponImages}/>}/>\n      <SubSection title=\"Escaping\" content=\"Get to the exit tiles before time runs out.\" visualContent={<ImageRow images={exitImages}/>}/>\n      <SubSection title=\"Teleportation Portals\" content=\"Teleport to matching colors using portals.\" visualContent={<ImageRow images={portalImages}/>} />\n      <SubSection title=\"Timers\" content=\"Pick up hourglass timers to flip the timer.\" visualContent={<Image title=\"Timers\" image={{src: timerImg, scale: \"128px\"}}/>}  />\n    </Section>\n\n    <div className=\"conclusion\">\n      <p>Enjoy playing Magic Maze Online with your friends and explore the maze together!</p>\n    </div>\n</div>\n);\n\nfunction Tutorial({playerName, setPlayerName}) {\n\n  return (\n    <div className=\"tutorial\">\n      <h1 className='gameTitle'> Magic Maze</h1>\n      <div className=\"tutorial-content\">\n        <TutorialPage/>\n      </div>\n    </div>\n  );\n}\n\nexport default Tutorial;\n","import React, {useState} from 'react'\nimport ReactDOM from 'react-dom'\nimport Game from './components/game'\nimport {\n  BrowserRouter as Router,\n  Routes, Route\n} from \"react-router-dom\"\nimport Menu from './components/menu'\nimport Tutorial from './components/tutorial'\n\n\nfunction App() {\n    const [playerName, setPlayerName] = useState('');\n  \n    return (\n    <Router>\n        <Routes>\n          <Route path=\"/game/:gameId\" element={<Game  realPlayerName = {playerName} />}/>\n          <Route path=\"/\" element={<Menu playerName={playerName} setPlayerName={setPlayerName}/>}/>\n          <Route path=\"/tutorial\" element={<Tutorial/>}/>\n         </Routes>\n      </Router>\n    );\n  }\n  \n  export default App;\nReactDOM.render(\n  <React.StrictMode>\n   \n   \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {\n  BrowserRouter as Router,\n  Routes, Route\n} from \"react-router-dom\"\nimport Menu from './components/menu';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}