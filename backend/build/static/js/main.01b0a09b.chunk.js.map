{"version":3,"sources":["models/tile.js","images/token-none.png","images/token-selected.png","components/token.js","images/coins.png","components/item.js","components/tile.js","services/game.js","components/board.js","models/coordinate.js","models/token.js","components/moveIndicator.js","components/playerIndicator.js","components/notification.js","components/Timer.js","App.js","index.js"],"names":["TileType","Tile","coord","type","hasItem","this","Token","imgSrc","token","onTokenSelected","selectedBy","tokenSelected","tokenImg","className","onClick","src","alt","Item","itemImg","tile","websocketURL","window","location","host","connection","WebSocket","onopen","console","log","handlers","allowedMovements","onerror","error","onmessage","message","json","JSON","parse","data","e","handle","setInterval","readyState","send","sendBasicCommand","command","stringify","sendMovement","includes","movements","playerName","player","newHandler","filter","handler","id","push","Board","grid","tokens","gameService","selected","onKeyPress","event","key","tabIndex","map","row","rowNum","colNum","tileCoord","find","isEqual","toString","Coordinate","x","y","MoveIndicator","moves","isSelf","heading","move","PlayerIndicator","allowedMoves","doSomething","_","Notification","notification","isGood","Timer","remainingSeconds","getTimeStr","num","paddedString","substr","length","minutes","Math","floor","seconds","getCoordinate","pos","parseInt","getTileRow","getTileType","getTokens","idx","selections","selection","split","join","getSelectedBy","App","useState","updatedTiles","setTiles","setTokens","setMoves","setPlayerName","otherPlayers","setOtherPlayers","notificationMessage","setNotificationMessage","setRemainingSeconds","clearNotification","notify","fade","setTimeout","board","tiles","tokenData","name","playerInfo","sender","hidden","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.01b0a09b.chunk.js","sourcesContent":["let TileType = {\n    UNKNOWN: -1,\n    NORMAL: 1,\n    EXIT: 2,\n    WALL: 3,\n    CONNECT: 4,\n}\n\nclass Tile {\n    constructor(coord, type, hasItem) {\n        this.coord = coord\n        this.type = type\n        this.hasItem = hasItem\n    }\n}\n\nexport { Tile, TileType }\n","export default __webpack_public_path__ + \"static/media/token-none.91062c4c.png\";","export default __webpack_public_path__ + \"static/media/token-selected.59573fc5.png\";","import React from 'react'\nimport tokenImg from \"../images/token-none.png\"\nimport tokenSelected from \"../images/token-selected.png\"\n\nconst Token = ({ token, onTokenSelected}) => {\n    if(!token) {\n        return ''\n    }\n\n    let imgSrc\n    if (token.selectedBy) {\n        imgSrc = tokenSelected\n    } else if (!token.selectedBy) {\n        imgSrc = tokenImg\n    }\n\n    const onClick = () => {\n        if (token) {\n            onTokenSelected(token)\n        }\n    }\n\n    return (\n        <div className='token' onClick={onClick}>\n            <img src={imgSrc} alt='token' />\n        </div>\n    )\n}\n\nexport default Token","export default __webpack_public_path__ + \"static/media/coins.c9fa3f57.png\";","import React from 'react'\nimport itemImg from \"../images/coins.png\"\n\nconst Item = () => {\n    return (\n        <div className='token' >\n            <img src={itemImg} alt='token' />\n        </div>\n    )\n}\n\nexport default Item","import { TileType } from \"../models/tile\"\nimport Token from \"./token\"\nimport Item from \"./item\"\n\nconst Tile = ({ token, onTokenSelected, tile }) => {\n    let className\n    const type = tile.type\n    if (type === TileType.EXIT) {\n        className = 'tile-exit'\n    } else if (type === TileType.WALL) {\n        className = 'tile-wall'\n    } else if (type === TileType.UNKNOWN) {\n        className = 'tile-unknown'\n    } else if (type === TileType.CONNECT) {\n        className = 'tile-connect'\n    } else {\n        className = 'tile'\n    }\n\n    return (\n        <div className={className}>\n            <Token token={token} onTokenSelected={onTokenSelected}/>\n            { tile.hasItem ? <Item/> : null}\n        </div>\n    )\n}\n\nexport default Tile","// open connection\nlet websocketURL = process.env.NODE_ENV === 'development' ? 'ws://127.0.0.1:3001' : 'wss://' + window.location.host\nvar connection = new WebSocket(websocketURL)\n\n\nconnection.onopen = function () {\n    console.log('Opened!')\n}\n\nlet handlers = []\nlet allowedMovements = []\n\nconnection.onerror = function (error) {\n    console.log('Sorry, but there\\'s some problem with your '\n        + 'connection or the server is down.')\n}\n\n// most important part - incoming messages\nconnection.onmessage = function (message) {\n    try {\n        var json = JSON.parse(message.data);\n    } catch (e) {\n        console.log('Invalid JSON: ', message.data);\n        return\n    }\n\n    for (let handler of handlers) {\n        handler.handle(json)\n    }\n}\n\n\nsetInterval(function () {\n    if (connection.readyState !== 1) {\n        console.log('Error missing connection');\n    }\n}, 3000);\n\nconst addHandler = (newHandler) => {\n    handlers = handlers.filter(handler => handler.id !== newHandler.id)\n    handlers.push(newHandler)\n}\nconst send = (message) => {\n    connection.send(message)\n}\n\nconst setMovements = (movements) => {\n    allowedMovements = movements\n}\n\nconst sendBasicCommand = (command) => {\n    send(JSON.stringify(\n        {\n            type: command\n        }\n    ))\n}\n\nconst sendMovement = (command) => {\n    if (!allowedMovements.includes(command)) {\n        return\n    }\n    sendBasicCommand(command)\n}\n\nconst reset = () => {\n    sendBasicCommand('RESET')\n}\n\nconst moveRight = () => {\n    sendMovement('RIGHT')\n}\n\nconst moveLeft = () => {\n    sendMovement('LEFT')\n}\n\nconst moveDown = () => {\n    sendMovement('DOWN')\n}\n\nconst moveUp = () => {\n    sendMovement('UP')\n}\n\nconst doSomething = (playerName) => {\n    send(JSON.stringify(\n        {\n            type: 'DO-SOMETHING',\n            player: playerName\n        }\n    ))\n}\n\nexport default {\n    send,\n    moveRight,\n    moveLeft,\n    moveDown,\n    moveUp,\n    setMovements,\n    reset,\n    doSomething,\n    addHandler\n}","import React from 'react'\nimport Tile from './tile'\nimport gameService from './../services/game'\nimport isEqual from \"lodash.isequal\"\n\nconst Board = ({ grid, tokens }) => {\n    const handleKeyPress = (event) => {\n        if (event.key === 's') {\n            gameService.moveDown()\n        } else if (event.key === 'w') {\n            gameService.moveUp()\n        } else if (event.key === 'a') {\n            gameService.moveLeft()\n        } else if (event.key === 'd') {\n            gameService.moveRight()\n        }\n    }\n\n    const onTokenSelected = (token) => {\n        gameService.send(JSON.stringify(\n            {\n                type: \"SELECTED\",\n                selected: token.id\n            }\n        ))\n    }\n\n    const getToken = (tileCoord) => {\n        return tokens.find(token => isEqual(token.coord, tileCoord))\n    }\n\n    return (\n        <div className=\"game-board\" onKeyPress={handleKeyPress} tabIndex={0}>\n            <table >\n                <tbody>\n                    {\n                        grid.map((row, rowNum) =>\n                            <tr key={rowNum} >\n                                {row.map((tile, colNum) =>\n                                    <td key={tile.coord.toString()}>\n                                        <Tile\n                                            tile = {tile}\n                                            type={tile.type}\n                                            token={getToken(tile.coord)}\n                                            onTokenSelected={onTokenSelected} />\n                                    </td>\n\n                                )}\n                            </tr>\n                        )}\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nexport default Board","class Coordinate {\n    constructor(x, y) {\n        this.x = x\n        this.y = y\n    }\n\n    toString() {\n        return `(${this.x}, ${this.y})`\n    }\n}\n\nexport default Coordinate","class Token {\n    constructor(id, coord, selectedBy) {\n        this.id = id\n        this.coord = coord\n        this.selectedBy = selectedBy\n    }\n}\n\nexport default Token","\nconst MoveIndicator = ({ moves, isSelf }) => {\n    const heading = 'Moves:'\n\n    return (\n        < div >\n            {\n                isSelf ? <h2>{heading}</h2> : <h3>{heading}</h3>\n            }\n            <ul>\n                {\n                    moves.map(move => <li key={move}>{move}</li>)\n                }\n            </ul>\n\n        </div>\n    )\n}\n\nexport default MoveIndicator","import MoveIndicator from './moveIndicator'\n\nconst PlayerIndicator = ({ playerName, allowedMoves, isSelf, doSomething }) => {\n\n    const onClickDoSomething = (_) => {\n        doSomething(playerName)\n    }\n    return (\n        < div className={isSelf ? 'player-self' : 'player-other'}>\n            <div className='player-bar'>\n                {\n                    <label>{playerName}</label>\n                }\n                {\n                    isSelf ? \"\" : <button onClick={onClickDoSomething}>Do Something!</button>\n                }\n            </div>\n            <MoveIndicator moves={allowedMoves} isSelf={isSelf} />\n        </div>\n    )\n}\n\nexport default PlayerIndicator","import React from 'react'\n\nconst Notification = ({ notification }) => {\n    if (notification === null) {\n        return null\n    }\n\n    return (\n        <div className={notification.isGood ? 'notification' : 'notification-bad'}>\n            {notification.message}\n        </div>\n    )\n}\n\nexport default Notification","import React from 'react'\n\nconst Timer = ({ remainingSeconds }) => {\n    if (!remainingSeconds) {\n        return \"\"\n    }\n    const getTimeStr = (num) => {\n        const paddedString = \"00\" + num\n        return paddedString.substr(paddedString.length - 2)\n    }\n    const minutes = getTimeStr(Math.floor(remainingSeconds / 60))\n    const seconds = getTimeStr(remainingSeconds % 60)\n\n    const criticalTime = 10\n    const className = remainingSeconds > criticalTime ? 'timer' : 'timer-critical'\n    return (\n        <div className={className}>\n            {`${minutes}:${seconds}`}\n        </div>\n    )\n}\n\nexport default Timer","import './App.css'\nimport React, { useState } from 'react'\nimport Board from './components/board'\nimport gameService from './services/game'\nimport Coordinate from './models/coordinate'\nimport { Tile, TileType } from './models/tile'\nimport isEqual from \"lodash.isequal\"\nimport Token from './models/token'\nimport PlayerIndicator from './components/playerIndicator'\nimport Notification from './components/notification'\nimport Timer from './components/Timer'\n\n\nconst getCoordinate = (pos) => {\n  const x = parseInt(pos.x)\n  const y = parseInt(pos.y)\n  return new Coordinate(x, y)\n}\n\nconst getTileType = (type) => {\n  switch(type) {\n    case 0:\n      return TileType.NORMAL\n    case 1:\n      return TileType.WALL\n    case 2:\n      return TileType.EXIT\n    case 3:\n      return TileType.CONNECT\n    default:\n      return TileType.UNKNOWN\n  }\n}\n\nconst getTileRow = (row) => {\n  return row.map(tile => new Tile(getCoordinate(tile.pos), getTileType(tile.type), tile.hasItem))\n}\n\nconst getTiles = (initData) => {\n  const board = initData.board\n  const grid = board.tiles.map( row => getTileRow(row))\n  return grid\n}\n\nconst getInitials = (str) => {\n  const split = str.split(\" \")\n  return split.map(substr => substr[0]).join('')\n}\n\nconst getSelectedBy = (selections, idx) => {\n  let selection = selections.find(selection => selection.selection === idx)\n  if (selection) {\n    return getInitials(selection.selectedBy)\n  }\n  return null\n}\n\nconst getTokens = (data) => {\n  return data.tokens.map((pos, idx) =>\n    new Token(idx,\n      getCoordinate(pos),\n      getSelectedBy(data.selections, idx)))\n}\n\nfunction App() {\n  const [updatedTiles, setTiles] = useState([[]])\n  const [tokens, setTokens] = useState([])\n  const [allowedMoves, setMoves] = useState([])\n  const [playerName, setPlayerName] = useState(\"\")\n  const [otherPlayers, setOtherPlayers] = useState([])\n  const [notificationMessage, setNotificationMessage] = useState(null)\n  const [remainingSeconds, setRemainingSeconds] = useState(null)\n\n  const clearNotification = () => {\n    setNotificationMessage(null)\n  }\n  const notify = (message, fade, isGood) => {\n    setNotificationMessage({\n      message: message,\n      isGood: isGood\n    })\n    if (!fade) {\n      return\n    }\n    setTimeout(() => {\n      clearNotification()\n    }, 5000)\n  }\n\n  let handler = {\n    id: 'app-updates',\n    handle: (json) => {\n      if (json.type === 'token-update') {\n        setTokens(getTokens(json.data))\n      } else if (json.type === 'board-update') {\n        setTiles(getTiles(json.data))\n        setTokens(getTokens(json.data.tokenData))\n        clearNotification()\n      } else if (json.type === 'win') {\n        notify(\"You have won the game!\", false, true)\n      } else if (json.type === 'movements') {\n        gameService.setMovements(json.data.movements)\n        setMoves(json.data.movements)\n      } else if (json.type === 'name') {\n        setPlayerName(json.data.name)\n      } else if (json.type === 'all-players') {\n        setOtherPlayers(json.data.filter(playerInfo => playerInfo.playerName !== playerName))\n      } else if (json.type === 'do-something') {\n        notify(`${json.data.sender} wants you to do something.`, true, true)\n      } else if (json.type === 'timer-update') {\n        // probably can update in a different way \n        //date to finish makes this less chatty\n        //could have an interval here that counts down\n        //timer-update is sent only on time pickups and connections\n        setRemainingSeconds(json.data.seconds)\n      } else if (json.type === 'lose') {\n        notify(\"You have lost the game..\", false, false)\n      }\n    }\n  }\n\n  gameService.addHandler(handler)\n\n  const reset = (_) => {\n    gameService.reset()\n  }\n\n  const doSomething = (playerName) => {\n    gameService.doSomething(playerName)\n  }\n\n  return (\n    <div className=\"App\">\n      <Notification notification={notificationMessage} />\n      <div className=\"board-space\">\n        <div className=\"board-controls\">\n          <Timer remainingSeconds={remainingSeconds} />\n          <br />\n          <PlayerIndicator playerName={playerName} allowedMoves={allowedMoves} isSelf={true} />\n          <br />\n          <h2 hidden={!otherPlayers.length}>Other Players:</h2>\n          {\n            otherPlayers.map(player => <PlayerIndicator key={player.playerName}\n              playerName={player.playerName}\n              allowedMoves={player.moves}\n              isSelf={false}\n              doSomething={doSomething} />)\n          }\n          <button onClick={reset}>Reset</button>\n        </div>\n        <Board grid={updatedTiles} tokens={tokens} />\n      </div>\n\n    </div >\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}