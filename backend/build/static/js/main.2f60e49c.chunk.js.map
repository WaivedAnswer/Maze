{"version":3,"sources":["components/boardContext.js","models/tile.js","models/token.js","models/gameState.js","models/tileDirection.js","images/up.png","images/down.png","images/left.png","images/right.png","images/coins_new.png","images/timer.png","images/axe2.png","images/sword.png","images/arrows2.png","images/potion.png","models/item.js","models/offscreen.js","components/offScreenIndicator.js","components/item.js","components/tileNormal.js","components/tileConnect.js","images/green-portal.png","images/orange-portal.png","images/yellow-portal.png","images/purple-portal.png","components/tilePortal.js","images/s1.png","components/tileExit.js","images/rock.png","components/tileBarrier.js","components/tileUnknown.js","components/tile.js","images/dwarf_right.png","images/warrior2.png","images/elf_bow.png","images/mage.png","components/token.js","images/escalator_down.png","images/escalator_up.png","models/escalator.js","components/escalator.js","components/wall.js","components/board.js","services/logger.js","services/gameService.js","models/coordinate.js","models/wallModel.js","models/selection.js","models/portalSelector.js","models/board.js","images/staircase.png","images/selection.png","images/portal2.png","components/moveIndicator.js","components/playerIndicator.js","components/moves.js","components/notification.js","components/Timer.js","components/toolbar.js","components/game.js","components/menu.js","App.js","index.js"],"names":["BoardContext","React","createContext","TileType","Tile","coord","type","hasItem","item","tokenType","this","TokenType","Token","id","selections","escaped","find","selection","isSelf","GameStates","TileDirection","ItemType","Item","getOffsets","boardRect","tokenRect","left","Math","max","right","width","window","innerWidth","getHorizontalOffset","top","bottom","height","innerHeight","getVerticalOffset","getIndicatorInfo","myRef","parent","current","getBoundingClientRect","upDist","downDist","leftDist","rightDist","maxDist","offsets","direction","Error","OffScreenIndicator","directionImg","indicatorImg","indicatorInfo","indicatorPositionStyle","display","justifyContent","alignItems","imgStyle","imgScale","containerClassName","up","flexDirection","down","className","style","src","alt","itemImg","gameState","useState","setIndicatorInfo","useRef","parentRef","useContext","useEffect","checkIfInView","addEventListener","removeEventListener","showOffscreenIndicator","coinImg","timerImg","weapon","img","axe","color","sword","bow","potion","getWeapon","backgroundColor","JSON","stringify","ref","NormalTile","tile","Connect","tileImg","getTileDirection","tileDirection","Portal","orangePortal","purplePortal","yellowPortal","greenPortal","Exit","exit","Barrier","rockTile","UnknownTile","content","tileCoord","gridColumnStart","x","gridRowStart","y","imgClass","token","onTokenSelected","length","dwarf","elf","warrior","mage","onClick","EscalatorOrientation","EscalatorModel","startCoord","endCoord","min","abs","minX","getMinX","minY","getMinY","Escalator","escImg","escalator","rowStart","onEscalate","colStart","getOrientation","downImg","upImg","tileStyle","gridRow","getRowSpan","gridColumn","getColSpan","Wall","wall","wallStyle","getStartRow","getStartCol","zIndex","isHorizontal","borderTop","borderLeft","Board","board","tokens","escalators","walls","gameService","boardRef","focus","gridHeight","getHeight","gridWidth","getWidth","scrollToTile","tileX","tileY","scrollX","tileWidth","scrollTo","tileHeight","behavior","send","selected","getDirection","boardStyle","overflow","gridTemplateColumns","gridTemplateRows","gap","Provider","value","onKeyDown","event","selecting","key","toLowerCase","moveDown","moveUp","moveLeft","moveRight","selectedToken","t","isMySelection","selectableTokens","filter","firstToken","select","tokenIndex","indexOf","nextToken","currTile","getTile","portalSelector","handle","escalate","isActive","selectedPortal","teleport","cancel","tabIndex","grid","map","row","rowNum","colNum","toString","console","log","error","GameService","gameId","playerName","setMovements","movements","allowedMovements","sendBasicCommand","command","reset","sendMovement","doSomething","player","escalatorId","handlers","newHandler","handler","push","Promise","resolve","reject","finalURL","location","host","connection","WebSocket","logger","onopen","onerror","onmessage","message","json","parse","data","e","setInterval","readyState","messageObject","gameMessage","includes","Coordinate","WallModel","Selection","selectorName","split","substr","join","SelectionState","PortalSelector","portals","resetSelection","state","selectedIndex","selectablePortals","currPortal","portal","BoardModel","getPortals","flatMap","onLeftBorder","onRightBorder","onTopBorder","onBottomBorder","MoveIndicator","imgSrc","keyIcon","move","OtherPlayer","allowedMoves","_","Moves","allMoves","concat","Notification","notification","isGood","Timer","remainingSeconds","getTimeStr","num","paddedString","minutes","floor","seconds","Toolbar","remaining","getCoordinate","pos","parseInt","tileData","itemData","getTileType","getTiles","tiles","getTileRow","getTokens","myPlayerName","tokenData","idx","selectedBy","getSelectedBy","Game","realPlayerName","updatedTiles","setTiles","setEscalators","setWalls","setTokens","setMoves","allPlayers","setAllPlayers","notificationMessage","setNotificationMessage","setRemainingSeconds","setGameService","remainingSections","setRemainingSections","setGameState","clearNotification","useParams","service","fade","start","end","getEscalators","getWalls","sender","setTimeout","a","connect","getInitialUpdate","addHandler","initialConnect","otherPlayerName","otherPlayers","playerInfo","hidden","moves","Menu","setPlayerName","navigate","useNavigate","joinCodeRef","createGameClick","axios","post","response","joinGameClick","onChange","target","placeholder","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2f60e49c.chunk.js","sourcesContent":["import React from 'react';\n\nconst BoardContext = React.createContext();\n\nexport default BoardContext;","let TileType = {\n    UNKNOWN: -1,\n    NORMAL: 1,\n    EXIT: 2,\n    WALL: 3,\n    CONNECT: 4,\n    PORTAL: 5\n}\n\nclass Tile {\n    constructor(coord, type, hasItem, item, tokenType) {\n        this.coord = coord\n        this.type = type\n        this.hasItem = hasItem\n        this.item = item\n        this.tokenType = tokenType\n    }\n}\n\nexport { Tile, TileType }\n","const TokenType = {\n    DWARF: 1,\n    MAGE: 2,\n    BARBARIAN: 3,\n    ELF: 4\n}\n\nclass Token {\n    constructor(id, coord, selections, escaped, type) {\n        this.id = id\n        this.coord = coord\n        this.selections = selections\n        this.escaped = escaped\n        this.type = type\n    }\n\n    isMySelection() {\n        return this.selections.find(selection => selection.isSelf)\n    }\n}\n\nexport { Token, TokenType }","const GameStates = {\n    EXPLORE: 0,\n    STEAL: 1,\n    ESCAPE: 2,\n    LOSS: 3,\n    WIN: 4\n}\n\nexport { GameStates }","\nconst TileDirection = {\n    UP: 0,\n    DOWN: 1,\n    LEFT: 2,\n    RIGHT: 3,\n    UNKNOWN: 4\n}\n\nexport { TileDirection }\n","export default __webpack_public_path__ + \"static/media/up.552f859e.png\";","export default __webpack_public_path__ + \"static/media/down.40f8ab30.png\";","export default __webpack_public_path__ + \"static/media/left.aa0f5ff4.png\";","export default __webpack_public_path__ + \"static/media/right.9a984c67.png\";","export default __webpack_public_path__ + \"static/media/coins_new.2254d122.png\";","export default __webpack_public_path__ + \"static/media/timer.c21cbb42.png\";","export default __webpack_public_path__ + \"static/media/axe2.3337d039.png\";","export default __webpack_public_path__ + \"static/media/sword.003d0d39.png\";","export default __webpack_public_path__ + \"static/media/arrows2.6d27d5a7.png\";","export default __webpack_public_path__ + \"static/media/potion.dc85f7b3.png\";","let ItemType = {\n    COIN: 0,\n    TIMER: 1,\n    WEAPON: 2\n}\n\nclass Item {\n    constructor(type, tokenType) {\n        this.type = type\n        this.tokenType = tokenType\n    }\n}\n\nexport { Item, ItemType }","import {TileDirection} from\"../models/tileDirection\"\n\n\nconst getHorizontalOffset = (boardRect, tokenRect) => {\n    const left = Math.max(boardRect.left, tokenRect.left)\n    if(left < boardRect.right - tokenRect.width) {\n        return {left: left}\n    } else {\n        return {right: window.innerWidth - boardRect.right}\n    }\n}\n\nconst getVerticalOffset = (boardRect, tokenRect) => {\n    const top = Math.max(boardRect.top, tokenRect.top)\n    if(top < boardRect.bottom - tokenRect.height) {\n        return {top: top}\n    } else {\n        return {bottom: window.innerHeight - boardRect.bottom}\n    }\n}\n\nconst getOffsets = (boardRect, tokenRect) => {\n    return { ...getHorizontalOffset(boardRect, tokenRect),\n        ...getVerticalOffset(boardRect, tokenRect)}\n}\n\nconst getIndicatorInfo = (myRef, parent) => {\n    if(!myRef.current || !parent.current) {\n        return null\n    }\n    const tokenRect = myRef.current.getBoundingClientRect()\n    const boardRect = parent.current.getBoundingClientRect()\n    const isInView = (\n        tokenRect.top <= boardRect.bottom &&\n        tokenRect.left <= boardRect.right &&\n        tokenRect.bottom >= boardRect.top &&\n        tokenRect.right >= boardRect.left\n    );\n    if(isInView) {\n        return null\n    }\n    const upDist = boardRect.top - tokenRect.bottom\n    const downDist = tokenRect.top - boardRect.bottom\n    const leftDist = boardRect.left - tokenRect.right\n    const rightDist = tokenRect.left - boardRect.right\n\n\n    const maxDist = Math.max(upDist, downDist, leftDist, rightDist)\n    const offsets = getOffsets(boardRect, tokenRect)\n    if(upDist === maxDist) {\n       return {direction: TileDirection.UP, \n            ...offsets}\n    } else if(downDist === maxDist) {\n        return {direction: TileDirection.DOWN,\n            bottom: window.innerHeight - boardRect.bottom,\n            ...offsets}\n    } else if(rightDist === maxDist) {\n        return{direction: TileDirection.RIGHT,\n            ...offsets}\n    } else if(leftDist === maxDist) {\n        return{direction: TileDirection.LEFT,\n            ...offsets}\n    } else {\n        throw new Error(\"No direction specified\")\n    }\n}\n\nexport { getIndicatorInfo }","import {TileDirection} from \"../models/tileDirection\"\nimport {TokenType} from \"../models/token\"\n\nimport up from \"../images/up.png\"\nimport down from \"../images/down.png\"\nimport left from \"../images/left.png\"\nimport right from \"../images/right.png\"\n\nconst OffScreenIndicator = ({indicatorImg, indicatorInfo }) => {\n    let directionImg\n    let indicatorPositionStyle = {\n        display: \"flex\",\n        bottom: indicatorInfo.bottom,\n        top: indicatorInfo.top,\n        left: indicatorInfo.left,\n        right: indicatorInfo.right,\n        justifyContent: \"center\",\n        alignItems: \"center\"\n    }\n    const imgStyle = {\n        height: indicatorInfo.imgScale,\n        width: indicatorInfo.imgScale\n    }\n    let imgClassName = \"offscreen-image\"\n    let containerClassName = \"offscreen\"\n    switch(indicatorInfo.tokenType) {\n        case TokenType.BARBARIAN:\n            containerClassName += \" barbarian\"\n            break\n        case TokenType.DWARF:\n            containerClassName += \" dwarf\"\n            break\n        case TokenType.ELF:\n            containerClassName += \" elf\"\n            break\n        case TokenType.MAGE:\n            containerClassName += \" mage\"\n            break\n        default:\n    }\n\n    switch(indicatorInfo.direction) {\n        case TileDirection.UP:\n            directionImg = up\n            indicatorPositionStyle.flexDirection = \"column\"\n            break\n        case TileDirection.DOWN:\n            directionImg = down\n            indicatorPositionStyle.flexDirection = \"column-reverse\"\n            break\n        case TileDirection.LEFT:\n            directionImg = left\n            indicatorPositionStyle.flexDirection = \"row\"\n            break\n        case TileDirection.RIGHT:\n            directionImg = right\n            indicatorPositionStyle.flexDirection = \"row-reverse\"\n            break\n        default:\n            throw new Error(\"Unsupported offscreen direction\")\n    }\n\n\n\n    \n    return (\n        <div className={containerClassName} style={indicatorPositionStyle}>\n            <img src={directionImg} className=\"offscreen-direction\" alt=\"offscreen direction\"/>\n            <img src={indicatorImg} style={imgStyle} className={imgClassName} alt='offscreen indicator' /> \n        </div>\n       \n    )\n}\n\nexport default OffScreenIndicator","import React, {useState, useEffect, useRef, useContext} from 'react'\nimport coinImg from \"../images/coins_new.png\"\nimport timerImg from \"../images/timer.png\"\nimport axe from \"../images/axe2.png\"\nimport sword from \"../images/sword.png\"\nimport bow from \"../images/arrows2.png\"\nimport potion from \"../images/potion.png\"\nimport {ItemType} from \"../models/item\"\nimport {TokenType} from \"../models/token\"\nimport {GameStates} from \"../models/gameState\"\nimport { getIndicatorInfo } from '../models/offscreen'\n\nimport BoardContext from \"./boardContext\"\nimport OffScreenIndicator from './offScreenIndicator'\n\nconst getWeapon = ( item ) => {\n    switch(item.tokenType) {\n        case TokenType.DWARF:\n            return {\n                img: axe,\n                color: 'orange'\n            }\n        case TokenType.BARBARIAN:\n            return {\n                img: sword,\n                color: 'yellow'\n            }\n        case TokenType.ELF:\n            return {\n                img: bow,\n                color: 'green'\n            }\n        case TokenType.MAGE:\n            return {\n                img: potion,\n                color: 'purple'\n            }\n        default:\n            throw new Error( \"Invalid token type\" )\n    }\n}\n    \nconst Item = ({item, gameState}) => {\n    const [indicatorInfo, setIndicatorInfo] = useState(null)\n    const myRef = useRef(null);\n    const parentRef = useContext(BoardContext)\n    useEffect(() => {\n    const parent = parentRef\n    function checkIfInView() {\n        const indicatorInfo = getIndicatorInfo(myRef, parentRef)\n        if(indicatorInfo) {\n            indicatorInfo.tokenType = item.tokenType\n        }\n        setIndicatorInfo(indicatorInfo)\n    }\n\n    parent.current.addEventListener('scroll', checkIfInView);\n    checkIfInView();\n\n    return () => {\n        parent.current.removeEventListener('scroll', checkIfInView);\n    };\n    }, [parentRef]);\n    let itemImg\n    let className = 'item'\n    let style = {}\n    let showOffscreenIndicator = false\n    switch(item.type) {\n        case ItemType.COIN:\n            itemImg = coinImg\n            className += ' coin'\n            break;\n        case ItemType.TIMER:\n            itemImg = timerImg\n            className += ' time'\n            break;\n        case ItemType.WEAPON:\n            const weapon = getWeapon(item)\n            itemImg = weapon.img\n            className += ' weapon'\n            style.backgroundColor = weapon.color\n            showOffscreenIndicator = indicatorInfo !== null && (gameState === GameStates.STEAL)\n            break\n        default:\n            throw new Error('Unknown item type: ' + JSON.stringify(item))\n    }\n\n    return (\n        <div  ref={myRef} className={className} style={style} >\n            <img src={itemImg} alt='item' />\n            { showOffscreenIndicator ?  <OffScreenIndicator indicatorInfo={indicatorInfo} indicatorImg={itemImg} /> : \"\"  }\n        </div>\n    )\n}\n\nexport default Item","import Item from \"./item\"\n\n\nconst NormalTile = ({tile, gameState }) => {\n    let className = 'tile'\n    return (\n        <div className={className}>\n            { tile.hasItem ? <Item item={tile.item} gameState={gameState}/> : null}\n        </div>\n       \n    )\n}\n\nexport default NormalTile","\nimport { TokenType } from \"../models/token\"\nimport { GameStates } from \"../models/gameState\"\nimport { TileDirection } from \"../models/tileDirection\"\n\nimport up from \"../images/up.png\"\nimport down from \"../images/down.png\"\nimport left from \"../images/left.png\"\nimport right from \"../images/right.png\"\n\nimport NormalTile from \"./tileNormal\"\n\n\nconst Connect = ({tile, getTileDirection, gameState }) => {\n    let className = 'tile-connect'\n    let tileImg\n    const tileDirection = getTileDirection(tile)\n    const show = tileDirection !== TileDirection.UNKNOWN && gameState === GameStates.EXPLORE\n\n    if(!show) {\n        return (<NormalTile tile = {tile}/>)\n    }\n    switch(tileDirection) {\n        case TileDirection.UP:\n            tileImg = up\n            break\n        case TileDirection.DOWN:\n            tileImg = down\n            break\n        case TileDirection.LEFT:\n            tileImg = left\n            break\n        case TileDirection.RIGHT:\n            tileImg = right\n            break\n        default:\n            //do nothing\n    }\n    switch(tile.tokenType) {\n        case TokenType.DWARF:\n            className += ' connect-dwarf'\n            break;\n        case TokenType.MAGE:\n            className += ' connect-mage'\n            break;\n        case TokenType.BARBARIAN:\n            className += ' connect-barbarian'\n            break;\n        case TokenType.ELF:\n            className += ' connect-elf'\n            break;\n        default:\n            throw new Error('Unknown token type')\n    }\n\n\n    //temporary hack, when the tile direction is unknown the connection point must be connected\n\n    return (\n         <div className={className}>\n            <img src={tileImg} className=\"tile-image\"  alt='' />\n        </div>    \n    )\n}\n\nexport default Connect","export default __webpack_public_path__ + \"static/media/green-portal.e3d54e5f.png\";","export default __webpack_public_path__ + \"static/media/orange-portal.e0a89eb5.png\";","export default __webpack_public_path__ + \"static/media/yellow-portal.f832ee4b.png\";","export default __webpack_public_path__ + \"static/media/purple-portal.f9f584fe.png\";","import { TokenType } from \"../models/token\"\nimport {GameStates} from \"../models/gameState\"\n\nimport greenPortal from \"../images/green-portal.png\"\nimport orangePortal from \"../images/orange-portal.png\"\nimport yellowPortal from \"../images/yellow-portal.png\"\nimport purplePortal from \"../images/purple-portal.png\"\n\nimport NormalTile from \"./tileNormal\"\n\nconst Portal = ({tile, gameState }) => {\n    const show = gameState === GameStates.EXPLORE || gameState === GameStates.STEAL\n    if(!show) {\n        return (<NormalTile tile = {tile}/>)\n    }\n    let className = 'tile-portal'\n    let tileImg\n\n    switch(tile.tokenType) {\n        case TokenType.DWARF:\n            tileImg = orangePortal\n            break;\n        case TokenType.MAGE:\n            tileImg = purplePortal\n            break;\n        case TokenType.BARBARIAN:\n            tileImg = yellowPortal\n            break;\n        case TokenType.ELF:\n            tileImg = greenPortal\n            break;\n        default:\n            throw new Error('Unknown token type')\n    }\n\n\n    return (\n        <div className={className}>\n            <img src={tileImg} className=\"tile-image\" alt='' /> \n        </div>\n    )\n}\n\nexport default Portal","export default __webpack_public_path__ + \"static/media/s1.cd3f2f2d.png\";","import React, {useState, useEffect, useRef, useContext} from 'react'\nimport { TokenType } from \"../models/token\"\nimport {GameStates} from \"../models/gameState\"\n\nimport exit from \"../images/s1.png\"\nimport { getIndicatorInfo } from '../models/offscreen'\n\nimport BoardContext from \"./boardContext\"\nimport OffScreenIndicator from './offScreenIndicator'\n\nconst Exit = ({tile, gameState }) => {\n    const [indicatorInfo, setIndicatorInfo] = useState(null)\n    const myRef = useRef(null);\n    const parentRef = useContext(BoardContext)\n    useEffect(() => {\n    const parent = parentRef\n    function checkIfInView() {\n        const indicatorInfo = getIndicatorInfo(myRef, parentRef)\n        if(indicatorInfo) {\n            indicatorInfo.tokenType = tile.tokenType\n        }\n        setIndicatorInfo(indicatorInfo)\n    }\n\n    parent.current.addEventListener('scroll', checkIfInView);\n    checkIfInView();\n\n    return () => {\n        parent.current.removeEventListener('scroll', checkIfInView);\n    };\n    }, [parentRef]);\n\n    let className = 'tile-exit'\n    const tileImg = exit\n    switch(tile.tokenType) {\n        case TokenType.DWARF:\n            className += ' exit-dwarf'\n            break;\n        case TokenType.MAGE:\n            className += ' exit-mage'\n            break;\n        case TokenType.BARBARIAN:\n            className += ' exit-barbarian'\n            break;\n        case TokenType.ELF:\n            className += ' exit-elf'\n            break;\n        default:\n            throw new Error('Unknown token type')\n    }\n\n    return (\n        <div ref={myRef} className={className}>\n            <img src={tileImg} className=\"tile-image\"  alt='' /> \n            {  indicatorInfo !== null && gameState === GameStates.ESCAPE ? <OffScreenIndicator indicatorInfo={indicatorInfo} indicatorImg={tileImg} /> : \"\"  }\n        </div>\n    )\n}\n\nexport default Exit","export default __webpack_public_path__ + \"static/media/rock.3d4d808c.png\";","import rockTile from \"../images/rock.png\"\n\nconst Barrier = () => {\n    let className = 'tile-exit'\n    const tileImg = rockTile\n    className = 'tile-wall'\n\n    return (\n        <div className={className}>\n            <img src={tileImg} className=\"tile-image\"  alt='' /> \n        </div>\n    )\n}\n\nexport default Barrier","const UnknownTile = () => {\n    const className = 'tile-unknown'\n    return (\n        <div className={className}>\n        </div>\n    )\n}\n\nexport default UnknownTile","import { TileType } from \"../models/tile\"\n\nimport Connect from \"./tileConnect\"\nimport Portal from \"./tilePortal\"\nimport Exit from \"./tileExit\"\nimport Barrier from \"./tileBarrier\"\nimport NormalTile from \"./tileNormal\"\nimport UnknownTile from \"./tileUnknown\"\n\n\nconst Tile = ({tile, getTileDirection, gameState }) => {\n    let content\n    switch (tile.type) {\n        case TileType.EXIT:\n            content = <Exit tile={tile} gameState={gameState} />\n            break\n        case TileType.WALL:\n            content = <Barrier/>\n            break\n        case TileType.UNKNOWN:\n            content = <UnknownTile />\n            break\n        case TileType.CONNECT:\n            content = <Connect tile={tile} gameState={gameState} getTileDirection={getTileDirection} />\n            break\n        case TileType.PORTAL:\n            content = <Portal tile={tile} gameState={gameState}/>\n            break\n        case TileType.NORMAL:\n            content = <NormalTile tile={tile} gameState={gameState}/>\n            break\n        default:\n            throw new Error(\"Invalid tile type\")\n    }\n\n    const tileStyle = (tileCoord) => {\n        const style =  {\n        gridColumnStart: `${tileCoord.x + 1}`,\n        gridRowStart: `${tileCoord.y + 1}`,\n     }\n     return style\n    }\n\n    return (\n        <div className='tile-container' style={tileStyle(tile.coord)}>\n            { content }\n           \n        </div>\n       \n    )\n}\n\nexport default Tile","export default __webpack_public_path__ + \"static/media/dwarf_right.3de0ca4b.png\";","export default __webpack_public_path__ + \"static/media/warrior2.a0cb9f8d.png\";","export default __webpack_public_path__ + \"static/media/elf_bow.93f90f79.png\";","export default __webpack_public_path__ + \"static/media/mage.23ebe66e.png\";","import React, {useState, useEffect, useRef, useContext} from 'react'\nimport dwarf from \"../images/dwarf_right.png\"\nimport warrior from \"../images/warrior2.png\"\nimport elf from \"../images/elf_bow.png\"\nimport mage from \"../images/mage.png\"\n\nimport { TokenType } from \"../models/token\"\nimport { getIndicatorInfo } from '../models/offscreen'\n\nimport BoardContext from \"./boardContext\"\nimport OffScreenIndicator from './offScreenIndicator'\n\nconst Token = ({ token, onTokenSelected}) => {\n    const [indicatorInfo, setIndicatorInfo] = useState(null)\n    const myRef = useRef(null);\n    const parentRef = useContext(BoardContext)\n    useEffect(() => {\n    const parent = parentRef\n    function checkIfInView() {\n        const indicatorInfo = getIndicatorInfo(myRef, parentRef)\n        if (indicatorInfo && token ) {\n            indicatorInfo.tokenType = token.type\n            if(token.type === TokenType.DWARF) {\n                indicatorInfo.imgScale = \"60%\"\n            }\n        }\n        setIndicatorInfo(indicatorInfo)\n    }\n\n    parent.current.addEventListener('scroll', checkIfInView);\n    checkIfInView();\n\n    return () => {\n        parent.current.removeEventListener('scroll', checkIfInView);\n    };\n    }, [parentRef]);\n\n    if(!token || token.escaped ) {\n        return ''\n    }\n\n    let imgClass\n    if (token.selections.length !== 0) {\n        imgClass = 'token-selected'\n    } else if (token.selections.length === 0) {\n        imgClass = 'token'\n    }\n\n    let img\n    switch(token.type) {\n        case TokenType.DWARF:\n            img = dwarf\n            imgClass += \" token-dwarf\"\n            break;\n        case TokenType.ELF:\n            img = elf\n            imgClass += \" token-elf\"\n            break;\n        case TokenType.BARBARIAN:\n            img = warrior\n            imgClass += \" token-barbarian\"\n            break;\n        case TokenType.MAGE:\n            img = mage\n            imgClass += \" token-mage\"\n            break;\n        default:\n            throw new Error(\"Unknown token type\")\n    }\n\n    \n    \n    const onClick = () => {\n        if (token) {\n            onTokenSelected(token)\n        }\n    }\n\n    const tileStyle = (tileCoord) => {\n        const style =  {\n        gridColumnStart: `${tileCoord.x + 1}`,\n        gridRowStart: `${tileCoord.y + 1}`,\n     }\n     return style\n    }\n\n    return (\n        <div \n        ref={myRef} \n        className={imgClass} style={tileStyle(token.coord)} onClick={onClick}>\n            <img src={img} alt='token' />\n           { indicatorInfo !== null ? <OffScreenIndicator indicatorInfo={indicatorInfo} indicatorImg={img} /> : \"\"  }\n        </div>\n    )\n}\n\nexport default Token","export default __webpack_public_path__ + \"static/media/escalator_down.03b0327b.png\";","export default __webpack_public_path__ + \"static/media/escalator_up.671e7897.png\";","const EscalatorOrientation = {\n    DOWN: 0,\n    UP: 1\n}\n\nclass EscalatorModel {\n    constructor(id, startCoord, endCoord) {\n        this.id = id\n        this.startCoord = startCoord\n        this.endCoord = endCoord\n    }\n\n    getMinX() {\n        return Math.min(this.startCoord.x, this.endCoord.x)\n    }\n\n    getMinY() {\n        return Math.min(this.startCoord.y, this.endCoord.y)\n    }\n\n    getRowSpan() {\n        return Math.abs(this.startCoord.y - this.endCoord.y) + 1\n    }\n\n    getColSpan() {\n       return Math.abs(this.startCoord.x - this.endCoord.x) + 1\n    }\n\n    getOrientation() {\n        const minX = this.getMinX()\n        const minY = this.getMinY()\n        if( (minX === this.startCoord.x && minY === this.startCoord.y) \n            || (minX === this.endCoord.x && minY === this.endCoord.y )) {\n            return EscalatorOrientation.DOWN\n        } else {\n            return EscalatorOrientation.UP\n        }\n    }\n}\n\nexport { EscalatorModel, EscalatorOrientation }","import downImg from \"../images/escalator_down.png\"\nimport upImg from \"../images/escalator_up.png\"\nimport {EscalatorOrientation} from '../models/escalator'\n\nconst Escalator = ({ escalator, onEscalate }) => {\n    const rowStart = escalator.getMinY() + 1\n    const colStart = escalator.getMinX() + 1\n    let escImg\n    switch(escalator.getOrientation()) {\n        case EscalatorOrientation.DOWN:\n            escImg = downImg\n            break;\n        case EscalatorOrientation.UP:\n            escImg = upImg\n            break;\n        default:\n            throw new Error (\"Invalid Orientation\")\n    }\n\n    const tileStyle = {\n        gridRow: `${rowStart} / span ${escalator.getRowSpan()}`,\n        gridColumn: `${colStart} / span ${escalator.getColSpan()}`,\n    }\n\n\n    return (\n        < div className = 'escalator' style = {tileStyle} >\n            <img className = 'escalator-img' src={escImg} alt='escalator' />\n        </div>\n    )\n}\n\nexport default Escalator","\nconst Wall = ( {wall}) => {\n    const wallStyle = {\n        gridRow: `${wall.getStartRow()} / span ${wall.getRowSpan()}`,\n        gridColumn: `${wall.getStartCol()} / span ${wall.getColSpan()}`,\n        zIndex: 1\n    }\n\n    if(wall.isHorizontal()) {\n        wallStyle.borderTop = '10px solid #000000'\n        wallStyle.height ='0px'\n    } else {\n        wallStyle.borderLeft = '10px solid #000000'\n        wallStyle.width = '0px'\n    }\n\n    return (\n        < div className = 'wall' style = {wallStyle} >\n        </div>\n    )\n}\n\nexport default Wall","import React, {useRef, useEffect} from 'react'\n\n\nimport BoardContext from './boardContext'\nimport Tile from './tile'\nimport {TileType} from '../models/tile'\n\nimport Token  from './token'\nimport Escalator from './escalator'\nimport Wall from './wall'\n\nconst Board = ({ gameState, board, tokens, escalators, walls, gameService }) => {\n    const boardRef = useRef(null)\n\n    useEffect(() => {\n        boardRef.current.focus();\n      }, []);\n\n    const gridHeight = board.getHeight()\n    const gridWidth = board.getWidth()\n    const scrollToTile = (tileCoord) => {\n        if (boardRef.current) {\n          const boardRect = boardRef.current.getBoundingClientRect();\n          const tileWidth = 64\n          const tileHeight = 64\n    \n          const tileX = tileCoord.x * tileWidth\n          const tileY = tileCoord.y * tileHeight\n\n          const scrollX = tileX - (boardRect.width / 2) + (tileWidth / 2) ;\n          const scrollY = tileY - boardRect.height / 2 + (tileHeight / 2);\n\n          const scrollTo = {\n            top: scrollY,\n            left: scrollX,\n            behavior: 'smooth',\n          }\n    \n          boardRef.current.scrollTo(scrollTo);\n        }\n    }\n    \n    const handleKeyPress = (event) => {\n        let selecting = false\n        if (event.key.toLowerCase() === 's') {\n            gameService.moveDown()\n        } else if (event.key.toLowerCase() === 'w') {\n            gameService.moveUp()\n        } else if (event.key.toLowerCase() === 'a') {\n            gameService.moveLeft()\n        } else if (event.key.toLowerCase() === 'd') {\n            gameService.moveRight()\n        } else if (event.key.toLowerCase() === 'q') {\n            const selectedToken = tokens.find(t => t.isMySelection())\n            const selectableTokens = tokens.filter(t => !t.escaped)\n            if(!selectedToken || selectedToken.escaped) {\n                const firstToken = selectableTokens[0]\n                scrollToTile(firstToken.coord)\n                gameService.select(firstToken.id)\n            } else {\n                const tokenIndex = selectableTokens.indexOf(selectedToken)\n                const nextIndex = (tokenIndex + 1) % selectableTokens.length\n                const nextToken = selectableTokens[nextIndex]\n                scrollToTile(nextToken.coord)\n                gameService.select(nextToken.id)\n            }\n        }\n        else if (event.key.toLowerCase() === 'e' ) {\n            const selectedToken = tokens.find(t => t.isMySelection())\n            if(selectedToken) {\n                const currTile = board.getTile(selectedToken.coord)\n                if(currTile.type === TileType.PORTAL) {\n                    selecting = true\n                    board.portalSelector.handle(selectedToken, currTile, scrollToTile)\n                } else {\n                    gameService.escalate()\n                }\n            }\n        } else if (event.key === 'Enter') {\n            if(!board.portalSelector.isActive()) {\n                return\n            }\n            selecting = true\n            const selectedPortal = board.portalSelector.select()\n            gameService.teleport(selectedPortal.coord)\n        }\n        if(!selecting) {\n            board.portalSelector.cancel()\n        }\n    }\n\n\n    const onTokenSelected = (token) => {\n        gameService.send(JSON.stringify(\n            {\n                type: \"SELECTED\",\n                selected: token.id\n            }\n        ))\n    }\n\n    const getTileDirection = (tile) => {\n        return board.getDirection(tile)\n    }\n\n    const boardStyle = {\n        overflow: 'auto',\n        display: 'grid',\n        gridTemplateColumns: `repeat(${gridWidth}, 64px)`,\n        gridTemplateRows: `repeat(${gridHeight}, 64px)`,\n        gap: '0px'\n     } \n\n    return (\n        <BoardContext.Provider value={boardRef}>\n            <div className=\"game-board\" ref={boardRef} style= {boardStyle} onKeyDown={handleKeyPress} tabIndex={0}>\n                {\n                    board.grid.map((row, rowNum) =>\n                            row.map((tile, colNum) =>\n                                <Tile key={tile.coord.toString()} tile = {tile} getTileDirection={getTileDirection} gameState={gameState} />\n                            )\n                    )}\n                {\n                    escalators.map( (escalator) => <Escalator escalator={escalator}/>)\n                }\n                {\n                    tokens.map( (token) => <Token token={token} onTokenSelected={onTokenSelected}/>)\n                }\n                {\n                    walls.map( (wall) => <Wall wall={wall}/>  )\n                }     \n            </div>\n        </BoardContext.Provider>\n    )\n}\n\nexport default Board","const debug = (...params) => {\n    //console.log(...params)\n}\n\nconst info = (...params) => {\n    console.log(...params)\n}\n\nconst warn = (...params) => {\n    console.log(...params)\n}\nconst error = (...params) => {\n    console.error(...params)\n}\n\nexport default {\n    debug,\n    info,\n    warn,\n    error\n}","import logger from './logger'\n\nclass GameService {\n\n    constructor(gameId, playerName) {\n        this.handlers = []\n        this.gameId = gameId\n        this.playerName = playerName\n        this.allowedMovements = []\n    }\n\n    addHandler(newHandler) {\n        this.handlers = this.handlers.filter(handler => handler.id !== newHandler.id)\n        this.handlers.push(newHandler)\n    }\n\n    connect() {\n        return new Promise((resolve, reject) => {\n            let websocketURL = process.env.NODE_ENV === 'development' ? 'ws://127.0.0.1:3001' : 'wss://' + window.location.host\n            let finalURL = websocketURL+`?playerName=${this.playerName}`\n            this.connection = new WebSocket(finalURL)\n            logger.debug(\"Connecting to:\" + finalURL)\n            this.connection.onopen = () => {\n                resolve()\n            }\n            this.connection.onerror = (error) => {\n                logger.error(error)\n                logger.error('Sorry, but there\\'s some problem with your '\n                    + 'connection or the server is down.')\n                    reject(error)\n            }\n            \n            // most important part - incoming messages\n            this.connection.onmessage = (message) => {\n                try {\n                    var json = JSON.parse(message.data);\n                } catch (e) {\n                   logger.error('Invalid JSON: ', message.data);\n                    return\n                }\n            \n                if(json.gameId && json.gameId !== this.gameId) {\n                    logger.warn('Sent message for different game')\n                    return\n                }\n\n                for (let handler of this.handlers) {\n                    handler.handle(json)\n                }\n            }\n            setInterval(() => {\n                if (this.connection.readyState !== 1) {\n                    logger.error('Error missing connection');\n                }\n            }, 3000);\n          });\n       \n    }\n\n    getInitialUpdate() { \n        this.sendBasicCommand('INITIAL')\n    }\n\n    send(message) {\n        let messageObject = JSON.parse(message)\n        messageObject.gameId = this.gameId\n        let gameMessage = JSON.stringify(messageObject)\n\n        logger.debug(\"SEND: \" + gameMessage)\n        this.connection.send(gameMessage)\n    }\n\n    select(id) {\n        this.send(JSON.stringify(\n            {\n                type: \"SELECTED\",\n                selected: id\n            }\n        ))\n    }\n\n    setMovements = (movements) => {\n        this.allowedMovements = movements\n    }\n    \n    sendBasicCommand = (command) => {\n        this.send(JSON.stringify(\n            {\n                type: command\n            }\n        ))\n    }\n    \n    sendMovement(command){\n        if (!this.allowedMovements.includes(command)) {\n            return\n        }\n        this.sendBasicCommand(command)\n    }\n    \n    reset = () => {\n        this.sendBasicCommand('RESET')\n    }\n    \n    moveRight = () => {\n       this.sendMovement('RIGHT')\n    }\n    \n    moveLeft = () => {\n        this.sendMovement('LEFT')\n    }\n    \n    moveDown = () => {\n        this.sendMovement('DOWN')\n    }\n    \n    moveUp = () => {\n        this.sendMovement('UP')\n    }\n    \n    doSomething = (playerName) => {\n        this.send(JSON.stringify(\n            {\n                type: 'DO-SOMETHING',\n                player: playerName\n            }\n        ))\n    }\n\n    teleport = (coord) => {\n        this.send(JSON.stringify(\n            {\n                type: \"TELEPORT\",\n                coord: coord\n            }\n        ))\n    }\n\n    escalate = (escalatorId) => {\n        this.send(JSON.stringify(\n            {\n                type: \"ESCALATE\",\n                id: escalatorId\n            }\n        ))\n    }\n\n\n}\n\nexport default GameService","class Coordinate {\n    constructor(x, y) {\n        this.x = x\n        this.y = y\n    }\n\n    toString() {\n        return `(${this.x}, ${this.y})`\n    }\n}\n\nexport default Coordinate","class WallModel {\n    constructor(startCoord, endCoord) {\n        this.startCoord = startCoord\n        this.endCoord = endCoord\n    }\n\n    getStartRow() {\n        return Math.min(this.startCoord.y, this.endCoord.y) + 1\n    }\n\n    getStartCol() {\n        return Math.min(this.startCoord.x, this.endCoord.x) + 1\n    }\n\n    getRowSpan() {\n        return Math.max(1, Math.abs(this.startCoord.y - this.endCoord.y))\n    }\n\n    getColSpan() {\n        return Math.max(1, Math.abs(this.startCoord.x - this.endCoord.x))\n    }\n\n    isHorizontal() {\n        return this.startCoord.y === this.endCoord.y\n    }\n}\n\nexport { WallModel }","class Selection {\n    constructor(selectorName, isSelf) {\n        this.selectorName = selectorName\n        this.isSelf = isSelf\n    }\n\n     getInitials() {\n        const split = this.selectorName.split(\" \")\n        return split.map(substr => substr[0]).join('')\n      }\n}\n\nexport { Selection }","const SelectionState = {\n    INACTIVE: 0,\n    ACTIVE: 1\n}\n\n\nclass PortalSelector {\n    constructor(portals) {\n        this.resetSelection()\n        this.portals = portals\n    }\n\n    resetSelection() {\n        this.state = SelectionState.INACTIVE\n        this.selectedIndex = null\n        this.selectablePortals = []\n    }\n\n    isActive() {\n        return this.state !== SelectionState.INACTIVE\n    }\n\n    handle(selectedToken, currPortal, scrollToTile) {\n        if(selectedToken.type !== currPortal.tokenType) {\n            return\n        }\n\n        if(this.state === SelectionState.INACTIVE) {\n            //initial selection\n            this.selectedIndex = 0\n            this.selectablePortals = this.portals.filter( portal => portal.tokenType === selectedToken.type && portal !== currPortal)\n            this.state = SelectionState.ACTIVE\n        } else if(this.state === SelectionState.ACTIVE) {\n            this.selectedIndex = (this.selectedIndex + 1) % this.selectablePortals.length\n        } else {\n            throw new Error('Cannot handle that state yet')\n        }\n        if(this.selectablePortals.length) {\n            const newSelection = this.selectablePortals[this.selectedIndex]\n            scrollToTile(newSelection.coord)\n        }\n    }\n\n    select() {\n        if(this.state === SelectionState.INACTIVE) {\n            throw new Error('Cannot choose selection while not selecting')\n        } else if(this.state === SelectionState.ACTIVE) {\n            const selection = this.selectablePortals[this.selectedIndex]\n            this.resetSelection()\n            return selection\n        }\n        else {\n            throw new Error('Cannot handle that state yet')\n        }\n    }\n\n    cancel() {\n        if(this.state === SelectionState.ACTIVE) {\n            this.resetSelection()\n        }\n    }\n}\n\nexport { PortalSelector }","import { TileType } from \"./tile\"\nimport { TileDirection } from \"./tileDirection\"\nimport {PortalSelector} from './portalSelector'\nimport Coordinate from \"./coordinate\"\n\nclass BoardModel {\n    constructor(grid) {\n        this.grid = grid\n        this.portalSelector =  new PortalSelector(this.getPortals())\n    }\n\n    getHeight() {\n        return this.grid.length\n    }\n\n    getWidth() {\n       return this.grid.length === 0 ? 0 : this.grid[0].length\n\n    }\n\n    getTile(coord) {\n        if(coord.y < 0 || coord.y >= this.grid.length) {\n            return null\n        }\n        if(coord.x < 0 || coord.x >= this.grid[0].length) {\n            return null\n        }\n        return this.grid[coord.y][coord.x]\n    }\n\n    getPortals() {\n        return this.grid.flatMap(row => row.filter( tile => tile.type === TileType.PORTAL ))\n    }\n\n    \n    getDirection(tile) {\n        if(this.grid.length === 0 ) {\n            return TileDirection.UNKNOWN\n        }\n    \n        const left = this.getTile(new Coordinate(tile.coord.x - 1, tile.coord.y))\n        const right = this.getTile(new Coordinate(tile.coord.x + 1, tile.coord.y))\n        const up = this.getTile(new Coordinate(tile.coord.x, tile.coord.y - 1))\n        const down = this.getTile(new Coordinate(tile.coord.x, tile.coord.y + 1))\n        const onLeftBorder = tile.coord.x === 0\n        const onRightBorder = tile.coord.x === this.grid[0].length - 1\n        const onTopBorder = tile.coord.y === 0\n        const onBottomBorder = tile.coord.y === this.grid.length - 1\n        if( onLeftBorder || (left && left.type === TileType.UNKNOWN)) {\n            return TileDirection.LEFT\n        } else if( onRightBorder || (right && right.type === TileType.UNKNOWN)) {\n            return TileDirection.RIGHT\n        } else if( onTopBorder || (up && up.type === TileType.UNKNOWN)) {\n            return TileDirection.UP\n        } else if( onBottomBorder || (down && down.type === TileType.UNKNOWN)) {\n            return TileDirection.DOWN\n        } else {\n            return TileDirection.UNKNOWN\n        }\n    }\n}\n\nexport { BoardModel }","export default __webpack_public_path__ + \"static/media/staircase.43f64a57.png\";","export default __webpack_public_path__ + \"static/media/selection.bd6de74f.png\";","export default __webpack_public_path__ + \"static/media/portal2.54f430bb.png\";","import up from \"../images/up.png\"\nimport down from \"../images/down.png\"\nimport left from \"../images/left.png\"\nimport right from \"../images/right.png\"\nimport escalate from \"../images/staircase.png\"\nimport select from \"../images/selection.png\"\nimport portal from \"../images/portal2.png\"\n\nconst MoveIndicator = ({ move, isSelf }) => {\n    let imgSrc\n    let keyIcon\n    if(move === 'LEFT') {\n        imgSrc = left\n        keyIcon = 'A'\n    } else if(move ==='RIGHT') {\n        imgSrc = right\n        keyIcon = 'D'\n    } else if(move ==='UP') {\n        imgSrc = up\n        keyIcon = 'W'\n    } else if(move ==='DOWN') {\n        imgSrc = down\n        keyIcon = 'S'\n    } else if(move ==='ESCALATE') {\n        imgSrc = escalate\n        keyIcon = 'E'\n    } else if(move ==='PORTAL') {\n        imgSrc = portal\n        keyIcon = 'E'\n    }\n    else if(move === 'SELECT') {\n        imgSrc = select\n        keyIcon = 'Q'\n    }\n    else {\n        console.log(\"Fail, move: \" + move)\n    }\n    return (\n        < div className ='move-icon'>\n           <img src={imgSrc} alt='move' />\n           {isSelf ? <span>{keyIcon}</span> : \"\"}\n        </div>\n    )\n}\n\nexport default MoveIndicator","import MoveIndicator from './moveIndicator'\n\nconst OtherPlayer = ({ playerName, allowedMoves, doSomething }) => {\n\n    const onClickDoSomething = (_) => {\n        doSomething(playerName)\n    }\n    return (\n        < div className='player-other'>\n            <div className='player-bar'>\n                <label>{playerName}</label>\n                {\n                    allowedMoves.map(move =>  <MoveIndicator key={move} move={move} isSelf={false}></MoveIndicator>)\n                }\n                <button className='doSomethingButton' onClick={onClickDoSomething}>!</button>\n                \n            </div>\n        </div>\n    )\n}\n\nexport default OtherPlayer","import MoveIndicator from './moveIndicator'\n\nconst Moves = ({ playerName, allowedMoves }) => {\n    const allMoves = ([ 'SELECT', 'ESCALATE','PORTAL'].concat(allowedMoves))\n\n    return (\n        < div className='player-self'>\n            <span id='mainPlayer'>{playerName}</span>\n            <h2>Moves</h2>\n            <div className = 'player-moves' >\n                {\n                    allMoves.map(move =>  <MoveIndicator key={move} move={move} isSelf={true}></MoveIndicator>)\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default Moves","import React from 'react'\n\nconst Notification = ({ notification }) => {\n    if (notification === null) {\n        return null\n    }\n\n    return (\n        <div className={notification.isGood ? 'notification' : 'notification-bad'}>\n            {notification.message}\n        </div>\n    )\n}\n\nexport default Notification","import React from 'react'\n\nconst Timer = ({ remainingSeconds }) => {\n    const getTimeStr = (num) => {\n        const paddedString = \"00\" + num\n        return paddedString.substr(paddedString.length - 2)\n    }\n    const minutes = getTimeStr(Math.floor(remainingSeconds / 60))\n    const seconds = getTimeStr(remainingSeconds % 60)\n\n    const criticalTime = 10\n    const className = remainingSeconds > criticalTime ? 'timer' : 'timer-critical'\n    return (\n        <div className={className}>\n            {`${minutes}:${seconds}`}\n        </div>\n    )\n}\n\nexport default Timer","import React from 'react'\nimport { GameStates } from \"../models/gameState\"\nimport Timer from './Timer'\n\nconst Toolbar = ({ gameState, remaining, remainingSeconds }) => {\n\n    let message = \"\"\n    if(gameState !== null) {\n        switch(gameState) {\n            case GameStates.EXPLORE:\n                message = \"Explore the maze! Remaining: \" + remaining\n                break\n            case GameStates.STEAL:\n                message = \"Steal the weapons!\"\n                break\n            case GameStates.ESCAPE:\n                message = \"Escape the Maze!\"\n                break\n            case GameStates.LOSS:\n                message = \"Game Over\"\n                break\n            case GameStates.WIN:\n                message = \"Win!\"\n                break\n            default:\n                throw new Error(\"Invalid game state\")\n        }\n    }\n    \n\n    return (\n        <div className='toolbar'>\n            <Timer remainingSeconds={remainingSeconds} />\n            {message}\n            <div/>\n        </div>\n    )\n}\n\nexport default Toolbar","import '../App.css'\nimport React, { useState, useEffect } from 'react'\nimport Board from './board'\nimport GameService from '../services/gameService'\nimport logger from '../services/logger'\nimport Coordinate from '../models/coordinate'\nimport {GameStates} from '../models/gameState'\nimport {EscalatorModel} from '../models/escalator'\nimport {WallModel} from '../models/wallModel'\nimport {Selection} from '../models/selection'\nimport {BoardModel} from '../models/board'\nimport { Tile, TileType } from '../models/tile'\nimport { Item } from '../models/item'\nimport { Token } from '../models/token'\nimport OtherPlayer from './playerIndicator'\nimport Moves from './moves'\nimport Notification from './notification'\nimport Toolbar from './toolbar'\nimport { useParams } from 'react-router-dom'\n\n\nconst getCoordinate = (pos) => {\n  const x = parseInt(pos.x)\n  const y = parseInt(pos.y)\n  return new Coordinate(x, y)\n}\n\nconst getTileType = (type) => {\n  switch(type) {\n    case 0:\n      return TileType.NORMAL\n    case 1:\n      return TileType.WALL\n    case 2:\n      return TileType.EXIT\n    case 3:\n      return TileType.CONNECT\n    case 4:\n      return TileType.PORTAL\n    default:\n      return TileType.UNKNOWN\n  }\n}\n\nconst getTile = (tileData) => {\n  const itemData = tileData.item\n  let item\n  if(itemData) {\n    item = new Item(itemData.type, itemData.tokenType)\n  }\n\n  return new Tile(getCoordinate(tileData.pos), \n  getTileType(tileData.type), \n  tileData.hasItem, \n  item,\n  tileData.tokenType)\n}\n\nconst getTileRow = (row) => {\n  return row.map(tileData => getTile(tileData))\n}\n\nconst getTiles = (tiles) => {\n  const grid = tiles.map( row => getTileRow(row))\n  return new BoardModel(grid)\n}\n\nconst getEscalators = (escalators) => {\n  return escalators.map( escalator => new EscalatorModel(escalator.id, getCoordinate(escalator.start), getCoordinate(escalator.end)))\n}\n\nconst getWalls = (walls) => {\n  return walls.map( wall => new WallModel(getCoordinate(wall.start), getCoordinate(wall.end)))\n}\n\nconst getSelectedBy = (selections, idx, myPlayerName) => {\n  return selections.filter(selection => selection.selection === idx)\n    .map(selection => new Selection(selection.selectedBy, selection.selectedBy === myPlayerName))\n\n}\n\nconst getTokens = (data, myPlayerName) => {\n  const newTokens = data.tokens.map((tokenData, idx) =>\n  new Token(idx,\n    getCoordinate(tokenData.pos),\n    getSelectedBy(data.selections, idx, myPlayerName),\n    tokenData.escaped,\n    tokenData.type))\n  return newTokens\n}\n\nfunction Game({realPlayerName}) {\n  const [updatedTiles, setTiles] = useState(new BoardModel([]))\n  const [escalators, setEscalators] = useState([])\n  const [walls, setWalls] = useState([])\n  const [tokens, setTokens] = useState([])\n  const [allowedMoves, setMoves] = useState([])\n  const [allPlayers, setAllPlayers] = useState([])\n  const [notificationMessage, setNotificationMessage] = useState(null)\n  const [remainingSeconds, setRemainingSeconds] = useState(null)\n  const [gameService, setGameService] = useState(null)\n  const [remainingSections, setRemainingSections] = useState(0)\n  const [gameState, setGameState] = useState(null)\n\n  const clearNotification = () => {\n    setNotificationMessage(null)\n  }\n  let { gameId } = useParams();\n  useEffect(() => {\n    let service = new GameService(gameId, realPlayerName)\n    const notify = (message, fade, isGood) => {\n      setNotificationMessage({\n        message: message,\n        isGood: isGood\n      })\n      if (!fade) {\n        return\n      }\n      setTimeout(() => {\n        clearNotification()\n      }, 5000)\n    }\n\n    let handler = {\n      id: 'app-updates',\n      handle: (json) => {\n        if (json.type === 'token-update') {\n          setTokens(getTokens(json.data, realPlayerName))\n        } else if (json.type === 'board-update') {\n          logger.debug('Board UPDATE')\n          setTiles(getTiles(json.data.board.tiles))\n          setEscalators(getEscalators(json.data.board.escalators))\n          setWalls(getWalls(json.data.board.walls))\n          setTokens(getTokens(json.data.tokenData))\n          setRemainingSections(json.data.remainingSections)\n          setGameState(json.data.state)\n          clearNotification()\n        } else if (json.type === 'win') {\n          setGameState(GameStates.WIN)\n        } else if (json.type === 'movements') {\n          service.setMovements(json.data.movements)\n          setMoves(json.data.movements)\n        } else if (json.type === 'all-players') {\n          setAllPlayers(json.data)\n        } else if (json.type === 'do-something') {\n          notify(`${json.data.sender} wants you to do something.`, true, true)\n        } else if (json.type === 'timer-update') {\n          // probably can update in a different way \n          //date to finish makes this less chatty\n          //could have an interval here that counts down\n          //timer-update is sent only on time pickups and connections\n          setRemainingSeconds(json.data.seconds)\n        } else if (json.type === 'lose') {\n          setGameState(GameStates.LOSS)\n        }\n      }\n    }\n    service.addHandler(handler)\n    async function initialConnect() {\n      await service.connect()\n      service.getInitialUpdate()\n    }\n    initialConnect()\n    setGameService(service)\n  },\n  [gameId])\n\n\n  const reset = (_) => {\n    gameService.reset()\n  }\n\n  const doSomething = (otherPlayerName) => {\n    gameService.doSomething(otherPlayerName)\n  }\n\n  const otherPlayers = allPlayers.filter(playerInfo => playerInfo.playerName !== realPlayerName)\n  return (\n    <div className=\"App\">\n      <Notification notification={notificationMessage} />\n      <div className=\"board-space\">\n        <Toolbar gameState={gameState} remaining={remainingSections} remainingSeconds={remainingSeconds}/>\n        <div className=\"board-controls\">\n          <Moves playerName={realPlayerName} allowedMoves={allowedMoves} />\n          <h2 hidden={!otherPlayers.length}>Other Players:</h2>\n          {\n            otherPlayers.map(player => <OtherPlayer key={player.playerName}\n              playerName={player.playerName}\n              allowedMoves={player.moves}\n              isSelf={false}\n              doSomething={doSomething} />)\n          }\n          <button className='button' id='reset-button' onClick={reset}>Reset</button>\n        </div>\n        <Board gameState={gameState} board={updatedTiles} tokens={tokens} escalators={escalators} walls={walls} gameService={gameService} />\n      </div>\n\n    </div >\n  );\n}\n\nexport default Game;\n","import React, { useRef } from 'react'\nimport {\n  useNavigate\n} from \"react-router-dom\"\nimport axios from 'axios';\nimport logger from '../services/logger'\n\nfunction Menu({playerName, setPlayerName}) {\n  const navigate = useNavigate();\n  const joinCodeRef = useRef(null)\n\n  const createGameClick = async () => {\n    const response = await axios.post('/games', {gameId: joinCodeRef.current.value});\n\n    logger.debug(response.data)\n    // The server responds with the id of the new user\n    const gameId = response.data.gameId;\n    logger.debug('Game Id response:' + gameId)\n    navigate(`/game/${gameId}`);\n  };\n\n  const joinGameClick = async () => {\n    const gameId = joinCodeRef.current.value\n    navigate(`/game/${gameId}`);\n  };\n\n  const handleNameChange = (event) => {\n    setPlayerName(event.target.value)\n  }\n\n  return (\n    <div className=\"menu\">\n      <h1>Magic Maze</h1>\n      <div className=\"menuSelections\">\n        <div className=\"menuRow\" >\n          <input type=\"text\" value={playerName} onChange={handleNameChange} placeholder='Nickname' className=\"inputText\" />\n        </div>\n        <div className=\"menuRow\" >\n        <input type=\"text\" ref={joinCodeRef} placeholder='Game Code' className=\"inputText\" />\n        </div>\n        <div className =\"menuRow\">\n          <button onClick={() => createGameClick()} className = \"button\" >Create</button>\n          <button onClick={joinGameClick} className = \"button\" >Join</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Menu;\n","import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './components/game';\nimport {\n  BrowserRouter as Router,\n  Routes, Route\n} from \"react-router-dom\"\nimport Menu from './components/menu';\n\n\nfunction App() {\n    const [playerName, setPlayerName] = useState('');\n  \n    return (\n    <Router>\n        <Routes>\n          <Route path=\"/game/:gameId\" element={<Game  realPlayerName = {playerName} />}/>\n          <Route path=\"/\" element={<Menu playerName={playerName} setPlayerName={setPlayerName}/>}/>\n         </Routes>\n      </Router>\n    );\n  }\n  \n  export default App;\nReactDOM.render(\n  <React.StrictMode>\n   \n   \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {\n  BrowserRouter as Router,\n  Routes, Route\n} from \"react-router-dom\"\nimport Menu from './components/menu';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}