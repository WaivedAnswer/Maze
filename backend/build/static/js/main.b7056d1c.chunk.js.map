{"version":3,"sources":["models/tile.js","components/tile.js","services/game.js","components/board.js","models/coordinate.js","models/token.js","components/moveIndicator.js","components/playerIndicator.js","App.js","index.js"],"names":["TileType","Tile","coord","type","this","className","token","onTokenSelected","isSelected","onClick","websocketURL","window","location","host","connection","WebSocket","onopen","console","log","handlers","allowedMovements","onerror","error","onmessage","message","json","JSON","parse","data","e","handle","setInterval","readyState","sendBasicCommand","command","send","stringify","sendMovement","includes","movements","newHandler","filter","handler","id","push","Board","grid","tokens","gameService","selected","onKeyPress","event","key","tabIndex","map","row","rowNum","tile","colNum","tileCoord","isEqual","toString","Coordinate","x","y","Token","MoveIndicator","moves","isSelf","heading","move","PlayerIndicator","playerName","allowedMoves","displayName","getCoordinate","pos","parseInt","getTokens","idx","App","useState","updatedTiles","setTiles","setTokens","setMoves","setPlayerName","otherPlayers","setOtherPlayers","initData","board","exits","exitPos","walls","wallPos","allTiles","tiles","tilePos","height","currPos","some","wall","width","getTiles","alert","name","playerInfo","hidden","length","player","_","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNAAIA,EACQ,EADRA,EAEM,EAFNA,EAGM,EAHNA,EAIS,EAGPC,EACF,WAAYC,EAAOC,GAAO,oBACtBC,KAAKF,MAAQA,EACbE,KAAKD,KAAOA,G,OCoBLF,EA5BF,SAAC,GAAsC,IAC5CI,EADQC,EAAmC,EAAnCA,MAAOH,EAA4B,EAA5BA,KAAMI,EAAsB,EAAtBA,gBAGrBF,EADAC,GAASA,EAAME,WACH,iBACLF,IAAUA,EAAME,WACX,QACLL,IAASH,EACJ,YACLG,IAASH,EACJ,YACLG,IAASH,EACJ,eAEA,OAShB,OACI,qBAAKK,UAAWA,EAAWI,QAPf,WACRH,GACAC,EAAgBD,O,OCnBxBI,EAAgF,SAAWC,OAAOC,SAASC,KAC3GC,EAAa,IAAIC,UAAUL,GAG/BI,EAAWE,OAAS,WAChBC,QAAQC,IAAI,YAGhB,IAAIC,EAAW,GACXC,EAAmB,GAEvBN,EAAWO,QAAU,SAAUC,GAC3BL,QAAQC,IAAI,gFAKhBJ,EAAWS,UAAY,SAAUC,GAC7B,IACI,IAAIC,EAAOC,KAAKC,MAAMH,EAAQI,MAChC,MAAOC,GAEL,YADAZ,QAAQC,IAAI,iBAAkBM,EAAQI,MAJJ,oBAQlBT,GARkB,IAQtC,2BAA8B,SAClBW,OAAOL,IATmB,gCAc1CM,aAAY,WACsB,IAA1BjB,EAAWkB,YACXf,QAAQC,IAAI,8BAEjB,KAEH,IAYMe,EAAmB,SAACC,GACtBpB,EAAWqB,KAAKT,KAAKU,UACjB,CACIjC,KAAM+B,MAKZG,EAAe,SAACH,GACbd,EAAiBkB,SAASJ,IAG/BD,EAAiBC,IAuBN,EA3CF,SAACV,GACVV,EAAWqB,KAAKX,IA0CL,EAhBG,WACda,EAAa,UAeF,EAZE,WACbA,EAAa,SAWF,EARE,WACbA,EAAa,SAOF,EAJA,WACXA,EAAa,OAGF,EAvCM,SAACE,GAClBnB,EAAmBmB,GAsCR,EApBD,WACVN,EAAiB,UAmBN,EA/CI,SAACO,IAChBrB,EAAWA,EAASsB,QAAO,SAAAC,GAAO,OAAIA,EAAQC,KAAOH,EAAWG,OACvDC,KAAKJ,I,gBCeHK,EAlDD,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OAabxC,EAAkB,SAACD,GACrB0C,EAAiBtB,KAAKU,UAClB,CACIjC,KAAM,WACN8C,SAAU3C,EAAMqC,OAS5B,OACI,qBAAKtC,UAAU,aAAa6C,WA1BT,SAACC,GACF,MAAdA,EAAMC,IACNJ,IACqB,MAAdG,EAAMC,IACbJ,IACqB,MAAdG,EAAMC,IACbJ,IACqB,MAAdG,EAAMC,KACbJ,KAkBoDK,SAAU,EAAlE,SACI,gCACI,gCAEQP,EAAKQ,KAAI,SAACC,EAAKC,GAAN,OACL,6BACKD,EAAID,KAAI,SAACG,EAAMC,GAAP,OACL,6BACI,cAAC,EAAD,CACIvD,KAAMsD,EAAKtD,KACXG,OAftBqD,EAesCF,EAAKvD,MAdlD6C,EAAON,QAAO,SAAAnC,GAAK,OAAIsD,IAAQtD,EAAMJ,MAAOyD,MAAY,IAe3BpD,gBAAiBA,GAHVkD,EAAKvD,MAAM2D,cAbzC,IAACF,MAUeH,a,OC1BtBM,E,WAVX,WAAYC,EAAGC,GAAI,oBACf5D,KAAK2D,EAAIA,EACT3D,KAAK4D,EAAIA,E,4CAGb,WACI,MAAM,IAAN,OAAW5D,KAAK2D,EAAhB,aAAsB3D,KAAK4D,EAA3B,S,KCCOC,EAPX,WAAYtB,EAAIzC,EAAOM,GAAa,oBAChCJ,KAAKuC,GAAKA,EACVvC,KAAKF,MAAQA,EACbE,KAAKI,WAAaA,GCeX0D,EAlBO,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OACtBC,EAAU,SAEhB,OACI,gCAEQD,EAAS,6BAAKC,IAAgB,6BAAKA,IAEvC,6BAEQF,EAAMb,KAAI,SAAAgB,GAAI,OAAI,6BAAgBA,GAAPA,YCIhCC,EAbS,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,WAAYC,EAA2B,EAA3BA,aAAcL,EAAa,EAAbA,OAE3CM,EAAcN,EAAS,MAAQI,EACrC,OACI,sBAAMnE,UAAW+D,EAAS,cAAgB,eAA1C,UAEQA,EAAS,GAAK,gCAAQM,IAE1B,cAAC,EAAD,CAAeP,MAAOM,EAAcL,OAAQA,QCClDO,EAAgB,SAACC,GACrB,IAAMb,EAAIc,SAASD,EAAIb,GACjBC,EAAIa,SAASD,EAAIZ,GACvB,OAAO,IAAIF,EAAWC,EAAGC,IAgCrBc,EAAY,SAAClD,GACjB,OAAOA,EAAKmB,OAAOO,KAAI,SAACsB,EAAKG,GAAN,OAAc,IAAId,EAAMc,EAAKJ,EAAcC,GAAMhD,EAAKqB,WAAa8B,OA4D7EC,MAzDf,WACE,MAAiCC,mBAAS,CAAC,KAA3C,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAA4BF,mBAAS,IAArC,mBAAOlC,EAAP,KAAeqC,EAAf,KACA,EAAiCH,mBAAS,IAA1C,mBAAOR,EAAP,KAAqBY,EAArB,KACA,EAAoCJ,mBAAS,IAA7C,mBAAOT,EAAP,KAAmBc,EAAnB,KACA,EAAwCL,mBAAS,IAAjD,mBAAOM,EAAP,KAAqBC,EAArB,KAEI9C,EAAU,CACZC,GAAI,cACJb,OAAQ,SAACL,GACW,iBAAdA,EAAKtB,KACPiF,EAAUN,EAAUrD,EAAKG,OACF,iBAAdH,EAAKtB,MACdgF,EA9CS,SAACM,GAOhB,IANA,IAAI3C,EAAO,GACL4C,EAAQD,EAASC,MACjBC,EAAQD,EAAMC,MAAMrC,KAAI,SAAAsC,GAAO,OAAIjB,EAAciB,MACjDC,EAAQH,EAAMG,MAAMvC,KAAI,SAAAwC,GAAO,OAAInB,EAAcmB,MACjDC,EAAWL,EAAMM,MAAM1C,KAAI,SAAA2C,GAAO,OAAItB,EAAcsB,MAEjDjC,EAAI,EAAGA,EAAI0B,EAAMQ,OAAQlC,IAAK,CAErC,IADA,IAAIT,EAAM,GAD2B,WAE5BQ,GACP,IAAMoC,EAAU,IAAIrC,EAAWC,EAAGC,GAC9B7D,OAAI,EAENA,EADEwF,EAAMS,MAAK,SAAAR,GAAO,OAAIhC,IAAQgC,EAASO,MAClCnG,EACE6F,EAAMO,MAAK,SAAAC,GAAI,OAAIzC,IAAQyC,EAAMF,MACnCnG,EACE+F,EAASK,MAAK,SAAA3C,GAAI,OAAIG,IAAQH,EAAM0C,MACtCnG,EAEAA,EAGTuD,EAAIX,KAAK,IAAI3C,EAAKkG,EAAShG,KAbpB4D,EAAI,EAAGA,EAAI2B,EAAMY,MAAOvC,IAAM,EAA9BA,GAeTjB,EAAKF,KAAKW,GAEZ,OAAOT,EAoBQyD,CAAS9E,EAAKG,OACvBwD,EAAUN,EAAUrD,EAAKG,QACF,QAAdH,EAAKtB,KACdqG,MAAM,0BACiB,cAAd/E,EAAKtB,MACd6C,EAAyBvB,EAAKG,KAAKW,WACnC8C,EAAS5D,EAAKG,KAAKW,YACI,SAAdd,EAAKtB,KACdmF,EAAc7D,EAAKG,KAAK6E,MACD,gBAAdhF,EAAKtB,MACdqF,EAAgB/D,EAAKG,KAAKa,QAAO,SAAAiE,GAAU,OAAIA,EAAWlC,aAAeA,QAY/E,OAPAvD,QAAQC,IAAIqE,GACZvC,EAAuBN,GAOrB,qBAAKrC,UAAU,MAAf,SACE,sBAAKA,UAAU,cAAf,UACE,sBAAKA,UAAU,iBAAf,UACE,cAAC,EAAD,CAAiBmE,WAAYA,EAAYC,aAAcA,EAAcL,QAAQ,IAC7E,uBACA,oBAAIuC,QAASpB,EAAaqB,OAA1B,4BAEErB,EAAajC,KAAI,SAAAuD,GAAM,OAAI,cAAC,EAAD,CACzBrC,WAAYqC,EAAOrC,WACnBC,aAAcoC,EAAO1C,MACrBC,QAAQ,GAHuCyC,EAAOrC,eAK1D,wBAAQ/D,QAjBF,SAACqG,GACb9D,KAgBM,sBAEF,cAAC,EAAD,CAAOF,KAAMoC,EAAcnC,OAAQA,UC/F3CgE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b7056d1c.chunk.js","sourcesContent":["let TileType = {\n    NORMAL: 1,\n    EXIT: 2,\n    WALL: 3,\n    UNKNOWN: 4\n}\n\nclass Tile {\n    constructor(coord, type) {\n        this.coord = coord\n        this.type = type\n    }\n}\n\nexport { Tile, TileType }\n","import { TileType } from \"../models/tile\"\n\nconst Tile = ({ token, type, onTokenSelected }) => {\n    let className\n    if (token && token.isSelected) {\n        className = 'token-selected'\n    } else if (token && !token.isSelected) {\n        className = 'token'\n    } else if (type === TileType.EXIT) {\n        className = 'tile-exit'\n    } else if (type === TileType.WALL) {\n        className = 'tile-wall'\n    } else if (type === TileType.UNKNOWN) {\n        className = 'tile-unknown'\n    } else {\n        className = 'tile'\n    }\n\n    const onClick = () => {\n        if (token) {\n            onTokenSelected(token)\n        }\n    }\n\n    return (\n        <div className={className} onClick={onClick}>\n        </div>\n    )\n}\n\nexport default Tile","// open connection\nlet websocketURL = process.env.NODE_ENV === 'development' ? 'ws://127.0.0.1:3001' : 'wss://' + window.location.host\nvar connection = new WebSocket(websocketURL)\n\n\nconnection.onopen = function () {\n    console.log('Opened!')\n}\n\nlet handlers = []\nlet allowedMovements = []\n\nconnection.onerror = function (error) {\n    console.log('Sorry, but there\\'s some problem with your '\n        + 'connection or the server is down.')\n}\n\n// most important part - incoming messages\nconnection.onmessage = function (message) {\n    try {\n        var json = JSON.parse(message.data);\n    } catch (e) {\n        console.log('Invalid JSON: ', message.data);\n        return\n    }\n\n    for (let handler of handlers) {\n        handler.handle(json)\n    }\n}\n\n\nsetInterval(function () {\n    if (connection.readyState !== 1) {\n        console.log('Error missing connection');\n    }\n}, 3000);\n\nconst addHandler = (newHandler) => {\n    handlers = handlers.filter(handler => handler.id !== newHandler.id)\n    handlers.push(newHandler)\n}\nconst send = (message) => {\n    connection.send(message)\n}\n\nconst setMovements = (movements) => {\n    allowedMovements = movements\n}\n\nconst sendBasicCommand = (command) => {\n    connection.send(JSON.stringify(\n        {\n            type: command\n        }\n    ))\n}\n\nconst sendMovement = (command) => {\n    if (!allowedMovements.includes(command)) {\n        return\n    }\n    sendBasicCommand(command)\n}\n\nconst reset = () => {\n    sendBasicCommand('RESET')\n}\n\nconst moveRight = () => {\n    sendMovement('RIGHT')\n}\n\nconst moveLeft = () => {\n    sendMovement('LEFT')\n}\n\nconst moveDown = () => {\n    sendMovement('DOWN')\n}\n\nconst moveUp = () => {\n    sendMovement('UP')\n}\n\nexport default {\n    send,\n    moveRight,\n    moveLeft,\n    moveDown,\n    moveUp,\n    setMovements,\n    reset,\n    addHandler\n}","import React from 'react'\nimport Tile from './tile'\nimport gameService from './../services/game'\nimport isEqual from \"lodash.isequal\"\n\nconst Board = ({ grid, tokens }) => {\n    const handleKeyPress = (event) => {\n        if (event.key === 's') {\n            gameService.moveDown()\n        } else if (event.key === 'w') {\n            gameService.moveUp()\n        } else if (event.key === 'a') {\n            gameService.moveLeft()\n        } else if (event.key === 'd') {\n            gameService.moveRight()\n        }\n    }\n\n    const onTokenSelected = (token) => {\n        gameService.send(JSON.stringify(\n            {\n                type: \"SELECTED\",\n                selected: token.id\n            }\n        ))\n    }\n\n    const getToken = (tileCoord) => {\n        return tokens.filter(token => isEqual(token.coord, tileCoord))[0]\n    }\n\n    return (\n        <div className=\"game-board\" onKeyPress={handleKeyPress} tabIndex={0}>\n            <table >\n                <tbody>\n                    {\n                        grid.map((row, rowNum) =>\n                            <tr key={rowNum} >\n                                {row.map((tile, colNum) =>\n                                    <td>\n                                        <Tile key={tile.coord.toString()}\n                                            type={tile.type}\n                                            token={getToken(tile.coord)}\n                                            onTokenSelected={onTokenSelected} />\n                                    </td>\n\n                                )}\n                            </tr>\n                        )}\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nexport default Board","class Coordinate {\n    constructor(x, y) {\n        this.x = x\n        this.y = y\n    }\n\n    toString() {\n        return `(${this.x}, ${this.y})`\n    }\n}\n\nexport default Coordinate","class Token {\n    constructor(id, coord, isSelected) {\n        this.id = id\n        this.coord = coord\n        this.isSelected = isSelected\n    }\n}\n\nexport default Token","\nconst MoveIndicator = ({ moves, isSelf }) => {\n    const heading = 'Moves:'\n\n    return (\n        < div >\n            {\n                isSelf ? <h2>{heading}</h2> : <h3>{heading}</h3>\n            }\n            <ul>\n                {\n                    moves.map(move => <li key={move}>{move}</li>)\n                }\n            </ul>\n\n        </div>\n    )\n}\n\nexport default MoveIndicator","import MoveIndicator from './moveIndicator'\n\nconst PlayerIndicator = ({ playerName, allowedMoves, isSelf }) => {\n\n    const displayName = isSelf ? 'ME:' : playerName\n    return (\n        < div className={isSelf ? 'player-self' : 'player-other'}>\n            {\n                isSelf ? \"\" : <label>{displayName}</label>\n            }\n            <MoveIndicator moves={allowedMoves} isSelf={isSelf} />\n        </div>\n    )\n}\n\nexport default PlayerIndicator","import './App.css'\nimport React, { useState } from 'react'\nimport Board from './components/board'\nimport gameService from './services/game'\nimport Coordinate from './models/coordinate'\nimport { Tile, TileType } from './models/tile'\nimport isEqual from \"lodash.isequal\"\nimport Token from './models/token'\nimport PlayerIndicator from './components/playerIndicator.js'\n\n\nconst getCoordinate = (pos) => {\n  const x = parseInt(pos.x)\n  const y = parseInt(pos.y)\n  return new Coordinate(x, y)\n}\n\nconst getTiles = (initData) => {\n  let grid = []\n  const board = initData.board\n  const exits = board.exits.map(exitPos => getCoordinate(exitPos))\n  const walls = board.walls.map(wallPos => getCoordinate(wallPos))\n  const allTiles = board.tiles.map(tilePos => getCoordinate(tilePos))\n\n  for (let y = 0; y < board.height; y++) {\n    let row = []\n    for (let x = 0; x < board.width; x++) {\n      const currPos = new Coordinate(x, y)\n      let type\n      if (exits.some(exitPos => isEqual(exitPos, currPos))) {\n        type = TileType.EXIT\n      } else if (walls.some(wall => isEqual(wall, currPos))) {\n        type = TileType.WALL\n      } else if (allTiles.some(tile => isEqual(tile, currPos))) {\n        type = TileType.NORMAL\n      } else {\n        type = TileType.UNKNOWN\n      }\n\n      row.push(new Tile(currPos, type))\n    }\n    grid.push(row)\n  }\n  return grid\n}\n\nconst getTokens = (data) => {\n  return data.tokens.map((pos, idx) => new Token(idx, getCoordinate(pos), data.selected === idx))\n}\n\nfunction App() {\n  const [updatedTiles, setTiles] = useState([[]])\n  const [tokens, setTokens] = useState([])\n  const [allowedMoves, setMoves] = useState([])\n  const [playerName, setPlayerName] = useState(\"\")\n  const [otherPlayers, setOtherPlayers] = useState([])\n\n  let handler = {\n    id: 'app-updates',\n    handle: (json) => {\n      if (json.type === 'token-update') {\n        setTokens(getTokens(json.data))\n      } else if (json.type === 'board-update') {\n        setTiles(getTiles(json.data))\n        setTokens(getTokens(json.data))\n      } else if (json.type === 'win') {\n        alert(\"You have won the game!\")\n      } else if (json.type === 'movements') {\n        gameService.setMovements(json.data.movements)\n        setMoves(json.data.movements)\n      } else if (json.type === 'name') {\n        setPlayerName(json.data.name)\n      } else if (json.type === 'all-players') {\n        setOtherPlayers(json.data.filter(playerInfo => playerInfo.playerName !== playerName))\n      }\n    }\n  }\n\n  console.log(otherPlayers)\n  gameService.addHandler(handler)\n\n  const reset = (_) => {\n    gameService.reset()\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"board-space\">\n        <div className=\"board-controls\">\n          <PlayerIndicator playerName={playerName} allowedMoves={allowedMoves} isSelf={true} />\n          <br />\n          <h2 hidden={!otherPlayers.length}>Other Players:</h2>\n          {\n            otherPlayers.map(player => <PlayerIndicator key={player.playerName}\n              playerName={player.playerName}\n              allowedMoves={player.moves}\n              isSelf={false} />)\n          }\n          <button onClick={reset}>Reset</button>\n        </div>\n        <Board grid={updatedTiles} tokens={tokens} />\n      </div>\n\n    </div >\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}