{"version":3,"sources":["models/tile.js","components/tile.js","services/game.js","components/board.js","models/coordinate.js","models/token.js","components/moveIndicator.js","App.js","index.js"],"names":["TileType","Tile","coord","type","this","className","token","onTokenSelected","isSelected","onClick","connection","WebSocket","onopen","handlers","allowedMovements","onerror","error","console","log","onmessage","message","json","JSON","parse","data","e","handle","setInterval","readyState","sendBasicCommand","command","send","stringify","sendMovement","includes","movements","newHandler","filter","handler","id","push","Board","grid","tokens","gameService","selected","onKeyPress","event","key","tabIndex","width","length","gap","map","row","tile","tileCoord","isEqual","toString","Coordinate","x","y","Token","MoveIndicator","moves","move","getCoordinate","pos","parseInt","getTokens","idx","App","useState","updatedTiles","setTiles","setTokens","allowedMoves","setMoves","initData","exitPos","exit","height","currPos","getTiles","alert","_","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f1a0faac.chunk.js","sourcesContent":["let TileType = {\n    NORMAL: 1,\n    EXIT: 2\n}\n\nclass Tile {\n    constructor(coord, type) {\n        this.coord = coord\n        this.type = type\n    }\n}\n\nexport { Tile, TileType }\n","import { TileType } from \"../models/tile\"\n\nconst Tile = ({ token, type, onTokenSelected }) => {\n    let className\n    if (token && token.isSelected) {\n        className = 'token-selected'\n    } else if (token && !token.isSelected) {\n        className = 'token'\n    } else if (type === TileType.EXIT) {\n        className = 'tile-exit'\n    } else {\n        className = 'tile'\n    }\n\n    const onClick = () => {\n        if (token) {\n            onTokenSelected(token)\n        }\n    }\n\n    return (\n        <div className={className} onClick={onClick}>\n        </div>\n    )\n}\n\nexport default Tile","import { scryRenderedComponentsWithType } from \"react-dom/test-utils\";\n\n// open connection\nvar connection = new WebSocket('ws://127.0.0.1:3001');\nconnection.onopen = function () {\n};\n\nlet handlers = []\nlet allowedMovements = []\n\nconnection.onerror = function (error) {\n    console.log('Sorry, but there\\'s some problem with your '\n        + 'connection or the server is down.')\n};\n\n// most important part - incoming messages\nconnection.onmessage = function (message) {\n    try {\n        var json = JSON.parse(message.data);\n    } catch (e) {\n        console.log('Invalid JSON: ', message.data);\n        return\n    }\n\n    for (let handler of handlers) {\n        handler.handle(json)\n    }\n};\n\n\nsetInterval(function () {\n    if (connection.readyState !== 1) {\n        console.log('Error missing connection');\n    }\n}, 3000);\n\nconst addHandler = (newHandler) => {\n    handlers = handlers.filter(handler => handler.id !== newHandler.id)\n    handlers.push(newHandler)\n}\nconst send = (message) => {\n    connection.send(message)\n}\n\nconst setMovements = (movements) => {\n    allowedMovements = movements\n}\n\nconst sendBasicCommand = (command) => {\n    connection.send(JSON.stringify(\n        {\n            type: command\n        }\n    ))\n}\n\nconst sendMovement = (command) => {\n    if (!allowedMovements.includes(command)) {\n        return\n    }\n    sendBasicCommand(command)\n}\n\nconst reset = () => {\n    sendBasicCommand('RESET')\n}\n\nconst moveRight = () => {\n    sendMovement('RIGHT')\n}\n\nconst moveLeft = () => {\n    sendMovement('LEFT')\n}\n\nconst moveDown = () => {\n    sendMovement('DOWN')\n}\n\nconst moveUp = () => {\n    sendMovement('UP')\n}\n\nexport default {\n    send,\n    moveRight,\n    moveLeft,\n    moveDown,\n    moveUp,\n    setMovements,\n    reset,\n    addHandler\n}","import React from 'react'\nimport Grid from 'react-css-grid'\nimport Tile from './tile'\nimport gameService from './../services/game'\nimport isEqual from \"lodash.isequal\"\n\nconst Board = ({ grid, tokens }) => {\n    const handleKeyPress = (event) => {\n        if (event.key === 's') {\n            gameService.moveDown()\n        } else if (event.key === 'w') {\n            gameService.moveUp()\n        } else if (event.key === 'a') {\n            gameService.moveLeft()\n        } else if (event.key === 'd') {\n            gameService.moveRight()\n        }\n    }\n\n    const onTokenSelected = (token) => {\n        gameService.send(JSON.stringify(\n            {\n                type: \"SELECTED\",\n                selected: token.id\n            }\n        ))\n    }\n\n    const getToken = (tileCoord) => {\n        return tokens.filter(token => isEqual(token.coord, tileCoord))[0]\n    }\n\n    return (\n        <div className=\"game-board\" onKeyPress={handleKeyPress} tabIndex={0}>\n            <Grid width={600 / grid.length} gap={0}>\n                {grid.map(\n                    row => row.map(tile =>\n                        <Tile key={tile.coord.toString()}\n                            type={tile.type}\n                            token={getToken(tile.coord)}\n                            onTokenSelected={onTokenSelected} />)\n                )}\n            </Grid>\n        </div>\n    )\n}\n\nexport default Board","class Coordinate {\n    constructor(x, y) {\n        this.x = x\n        this.y = y\n    }\n\n    toString() {\n        return `(${this.x}, ${this.y})`\n    }\n}\n\nexport default Coordinate","class Token {\n    constructor(id, coord, isSelected) {\n        this.id = id\n        this.coord = coord\n        this.isSelected = isSelected\n    }\n}\n\nexport default Token","\nconst MoveIndicator = ({ moves }) => {\n    console.log(moves)\n    return (\n        < div >\n            <h2>Moves:</h2>\n            <ul>\n                {\n                    moves.map(move => <li>{move}</li>)\n                }\n            </ul>\n\n        </div>\n    )\n}\n\nexport default MoveIndicator","import './App.css'\nimport React, { useState } from 'react'\nimport Board from './components/board'\nimport gameService from './services/game'\nimport Coordinate from './models/coordinate'\nimport { Tile, TileType } from './models/tile'\nimport isEqual from \"lodash.isequal\"\nimport Token from './models/token'\nimport MoveIndicator from './components/moveIndicator'\n\n\nconst getCoordinate = (pos) => {\n  const x = parseInt(pos.x)\n  const y = parseInt(pos.y)\n  return new Coordinate(x, y)\n}\n\nconst getTiles = (initData) => {\n  let grid = []\n  const exitPos = getCoordinate(initData.exit)\n  for (let y = 0; y < initData.height; y++) {\n    let row = []\n    for (let x = 0; x < initData.width; x++) {\n      const currPos = new Coordinate(x, y)\n      const type = isEqual(exitPos, currPos) ? TileType.EXIT : TileType.NORMAL\n      row.push(new Tile(currPos, type))\n    }\n    grid.push(row)\n  }\n  return grid\n}\n\nconst getTokens = (data) => {\n  return data.tokens.map((pos, idx) => new Token(idx, getCoordinate(pos), data.selected === idx))\n}\n\nfunction App() {\n  const [updatedTiles, setTiles] = useState([[]])\n  const [tokens, setTokens] = useState([])\n  const [allowedMoves, setMoves] = useState([])\n\n  let handler = {\n    id: 'app-updates',\n    handle: (json) => {\n      if (json.type === 'selected-id') {\n        console.log(json)\n        setTokens(getTokens(json.data))\n      } else if (json.type === 'board-update') {\n        setTiles(getTiles(json.data))\n        setTokens(getTokens(json.data))\n      } else if (json.type === 'win') {\n        alert(\"You have won the game!\")\n      } else if (json.type === 'movements') {\n        gameService.setMovements(json.data.movements)\n        setMoves(json.data.movements)\n      }\n    }\n  }\n  gameService.addHandler(handler)\n\n  const reset = (_) => {\n    gameService.reset()\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"board-space\">\n        <div className=\"board-controls\">\n          <MoveIndicator moves={allowedMoves} />\n          <button onClick={reset}>Reset</button>\n        </div>\n        <Board grid={updatedTiles} tokens={tokens} />\n      </div>\n\n    </div >\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}