{"version":3,"sources":["models/tile.js","models/token.js","images/coins_new.png","images/timer.png","images/axe2.png","images/sword.png","images/arrows2.png","images/potion.png","models/item.js","components/item.js","images/rock.png","images/s1.png","images/green-portal.png","images/orange-portal.png","images/yellow-portal.png","images/purple-portal.png","components/tile.js","images/dwarf_right.png","images/warrior.png","images/elf_bow.png","images/mage.png","components/token.js","images/escalator_down.png","images/escalator_up.png","models/escalator.js","components/escalator.js","components/wall.js","components/board.js","services/logger.js","services/gameService.js","models/coordinate.js","models/wallModel.js","images/up.png","images/down.png","images/left.png","images/right.png","components/moveIndicator.js","components/playerIndicator.js","components/moves.js","components/notification.js","components/Timer.js","components/game.js","components/menu.js","App.js","index.js"],"names":["TileType","Tile","coord","type","hasItem","item","tokenType","this","TokenType","Token","id","selectedBy","escaped","ItemType","Item","itemImg","className","style","coinImg","timerImg","weapon","img","axe","color","sword","bow","potion","Error","getWeapon","backgroundColor","JSON","stringify","src","alt","tileImg","tile","onTeleport","exit","rockTile","orangePortal","purplePortal","yellowPortal","greenPortal","onClick","imgClass","token","onTokenSelected","dwarf","elf","warrior","mage","EscalatorOrientation","EscalatorModel","startCoord","endCoord","Math","min","x","y","abs","minX","getMinX","minY","getMinY","Escalator","escImg","escalator","onEscalate","rowStart","colStart","getOrientation","downImg","upImg","tileStyle","gridRow","getRowSpan","gridColumn","getColSpan","Wall","wall","wallStyle","getStartRow","getStartCol","zIndex","isHorizontal","borderTop","height","borderLeft","width","Board","grid","tokens","escalators","walls","gameService","send","selected","teleport","escalatorId","escalate","gridHeight","length","gridWidth","boardStyle","margin","overflow","display","gridTemplateColumns","gridTemplateRows","gap","tileCoord","gridColumnStart","gridRowStart","onKeyPress","event","key","toLowerCase","moveDown","moveUp","moveLeft","moveRight","tabIndex","map","row","rowNum","colNum","toString","console","log","error","GameService","gameId","playerName","setMovements","movements","allowedMovements","sendBasicCommand","command","reset","sendMovement","doSomething","player","handlers","newHandler","filter","handler","push","Promise","resolve","reject","finalURL","window","location","host","connection","WebSocket","logger","onopen","onerror","onmessage","message","json","parse","data","e","handle","setInterval","readyState","messageObject","gameMessage","includes","Coordinate","WallModel","max","MoveIndicator","imgSrc","keyIcon","move","isSelf","left","right","up","down","OtherPlayer","allowedMoves","_","Moves","Notification","notification","isGood","Timer","remainingSeconds","getTimeStr","num","paddedString","substr","minutes","floor","seconds","getCoordinate","pos","parseInt","getTile","tileData","itemData","getTileType","getTiles","tiles","getTileRow","getTokens","tokenData","idx","selections","selection","find","split","join","getSelectedBy","Game","realPlayerName","useState","updatedTiles","setTiles","setEscalators","setWalls","setTokens","setMoves","allPlayers","setAllPlayers","notificationMessage","setNotificationMessage","setRemainingSeconds","setGameService","clearNotification","useParams","useEffect","service","notify","fade","setTimeout","board","start","end","getEscalators","getWalls","sender","a","connect","getInitialUpdate","addHandler","initialConnect","otherPlayerName","otherPlayers","playerInfo","hidden","moves","Menu","setPlayerName","navigate","useNavigate","joinCodeRef","useRef","createGameClick","axios","post","current","value","response","joinGameClick","onChange","target","placeholder","ref","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d2023aa.chunk.js","sourcesContent":["let TileType = {\n    UNKNOWN: -1,\n    NORMAL: 1,\n    EXIT: 2,\n    WALL: 3,\n    CONNECT: 4,\n    PORTAL: 5\n}\n\nclass Tile {\n    constructor(coord, type, hasItem, item, tokenType) {\n        this.coord = coord\n        this.type = type\n        this.hasItem = hasItem\n        this.item = item\n        this.tokenType = tokenType\n    }\n}\n\nexport { Tile, TileType }\n","const TokenType = {\n    DWARF: 1,\n    MAGE: 2,\n    BARBARIAN: 3,\n    ELF: 4\n}\n\nclass Token {\n    constructor(id, coord, selectedBy, escaped, type) {\n        this.id = id\n        this.coord = coord\n        this.selectedBy = selectedBy\n        this.escaped = escaped\n        this.type = type\n    }\n}\n\nexport { Token, TokenType }","export default __webpack_public_path__ + \"static/media/coins_new.2254d122.png\";","export default __webpack_public_path__ + \"static/media/timer.c21cbb42.png\";","export default __webpack_public_path__ + \"static/media/axe2.3337d039.png\";","export default __webpack_public_path__ + \"static/media/sword.003d0d39.png\";","export default __webpack_public_path__ + \"static/media/arrows2.6d27d5a7.png\";","export default __webpack_public_path__ + \"static/media/potion.dc85f7b3.png\";","let ItemType = {\n    COIN: 0,\n    TIMER: 1,\n    WEAPON: 2\n}\n\nclass Item {\n    constructor(type, tokenType) {\n        this.type = type\n        this.tokenType = tokenType\n    }\n}\n\nexport { Item, ItemType }","import React from 'react'\nimport coinImg from \"../images/coins_new.png\"\nimport timerImg from \"../images/timer.png\"\nimport axe from \"../images/axe2.png\"\nimport sword from \"../images/sword.png\"\nimport bow from \"../images/arrows2.png\"\nimport potion from \"../images/potion.png\"\nimport {ItemType} from \"../models/item\"\nimport {TokenType} from \"../models/token\"\n\nconst getWeapon = ( item ) => {\n    switch(item.tokenType) {\n        case TokenType.DWARF:\n            return {\n                img: axe,\n                color: 'orange'\n            }\n        case TokenType.BARBARIAN:\n            return {\n                img: sword,\n                color: 'yellow'\n            }\n        case TokenType.ELF:\n            return {\n                img: bow,\n                color: 'green'\n            }\n        case TokenType.MAGE:\n            return {\n                img: potion,\n                color: 'purple'\n            }\n        default:\n            throw new Error( \"Invalid token type\" )\n    }\n}\n    \nconst Item = ({item}) => {\n    let itemImg\n    let className = 'item'\n    let style = {}\n    switch(item.type) {\n        case ItemType.COIN:\n            itemImg = coinImg\n            className += ' coin'\n            break;\n        case ItemType.TIMER:\n            itemImg = timerImg\n            className += ' time'\n            break;\n        case ItemType.WEAPON:\n            const weapon = getWeapon(item)\n            itemImg = weapon.img\n            className += ' weapon'\n            style.backgroundColor = weapon.color\n            break\n        default:\n            throw new Error('Unknown item type: ' + JSON.stringify(item))\n    }\n\n\n    return (\n        <div className={className} style={style} >\n            <img src={itemImg} alt='item' />\n        </div>\n    )\n}\n\nexport default Item","export default __webpack_public_path__ + \"static/media/rock.3d4d808c.png\";","export default __webpack_public_path__ + \"static/media/s1.cd3f2f2d.png\";","export default __webpack_public_path__ + \"static/media/green-portal.e3d54e5f.png\";","export default __webpack_public_path__ + \"static/media/orange-portal.e0a89eb5.png\";","export default __webpack_public_path__ + \"static/media/yellow-portal.f832ee4b.png\";","export default __webpack_public_path__ + \"static/media/purple-portal.f9f584fe.png\";","import { TileType } from \"../models/tile\"\nimport { TokenType } from \"../models/token\"\n\nimport Item from \"./item\"\n\nimport rockTile from \"../images/rock.png\"\nimport exit from \"../images/s1.png\"\nimport greenPortal from \"../images/green-portal.png\"\nimport orangePortal from \"../images/orange-portal.png\"\nimport yellowPortal from \"../images/yellow-portal.png\"\nimport purplePortal from \"../images/purple-portal.png\"\n\n\nconst Tile = ({tile, onTeleport }) => {\n    let className\n    let tileImg\n    const type = tile.type\n    if (type === TileType.EXIT) {\n        className = 'tile-exit'\n        tileImg = exit\n        switch(tile.tokenType) {\n            case TokenType.DWARF:\n                className += ' exit-dwarf'\n                break;\n            case TokenType.MAGE:\n                className += ' exit-mage'\n                break;\n            case TokenType.BARBARIAN:\n                className += ' exit-barbarian'\n                break;\n            case TokenType.ELF:\n                className += ' exit-elf'\n                break;\n            default:\n                throw new Error('Unknown token type')\n        }\n    } else if (type === TileType.WALL) {\n        className = 'tile-wall'\n        tileImg = rockTile\n    } else if (type === TileType.UNKNOWN) {\n        className = 'tile-unknown'\n    } else if (type === TileType.CONNECT) {\n        className = 'tile-connect'\n        switch(tile.tokenType) {\n            case TokenType.DWARF:\n                className += ' connect-dwarf'\n                break;\n            case TokenType.MAGE:\n                className += ' connect-mage'\n                break;\n            case TokenType.BARBARIAN:\n                className += ' connect-barbarian'\n                break;\n            case TokenType.ELF:\n                className += ' connect-elf'\n                break;\n            default:\n                throw new Error('Unknown token type')\n        }\n    } else if (type === TileType.PORTAL) {\n        className = 'tile-portal'\n        switch(tile.tokenType) {\n            case TokenType.DWARF:\n                tileImg = orangePortal\n                break;\n            case TokenType.MAGE:\n                tileImg = purplePortal\n                break;\n            case TokenType.BARBARIAN:\n                tileImg = yellowPortal\n                break;\n            case TokenType.ELF:\n                tileImg = greenPortal\n                break;\n            default:\n                throw new Error('Unknown token type')\n        }\n    }\n    else {\n        className = 'tile'\n    }\n\n    const handleClick = () => {\n        if(type !== TileType.PORTAL) {\n            return\n        }\n        onTeleport(tile.coord)\n    }\n\n    return (\n        <div className={className}>\n            { tileImg ? <img src={tileImg} className=\"tile-image\" onClick={handleClick} alt='' /> : null}\n            { tile.hasItem ? <Item item={tile.item}/> : null}\n        </div>\n    )\n}\n\nexport default Tile","export default __webpack_public_path__ + \"static/media/dwarf_right.3de0ca4b.png\";","export default __webpack_public_path__ + \"static/media/warrior.94e868cd.png\";","export default __webpack_public_path__ + \"static/media/elf_bow.93f90f79.png\";","export default __webpack_public_path__ + \"static/media/mage.23ebe66e.png\";","import React from 'react'\nimport dwarf from \"../images/dwarf_right.png\"\nimport warrior from \"../images/warrior.png\"\nimport elf from \"../images/elf_bow.png\"\nimport mage from \"../images/mage.png\"\nimport { TokenType } from \"../models/token\"\n\nconst Token = ({ token, onTokenSelected, style}) => {\n    if(!token || token.escaped ) {\n        return ''\n    }\n\n    let imgClass\n    if (token.selectedBy) {\n        imgClass = 'token-selected'\n    } else if (!token.selectedBy) {\n        imgClass = 'token'\n    }\n\n    let img\n    switch(token.type) {\n        case TokenType.DWARF:\n            img = dwarf\n            imgClass += \" token-dwarf\"\n            break;\n        case TokenType.ELF:\n            img = elf\n            imgClass += \" token-elf\"\n            break;\n        case TokenType.BARBARIAN:\n            img = warrior\n            imgClass += \" token-barbarian\"\n            break;\n        case TokenType.MAGE:\n            img = mage\n            imgClass += \" token-mage\"\n            break;\n        default:\n            throw new Error(\"Unknown token type\")\n    }\n    \n    const onClick = () => {\n        if (token) {\n            onTokenSelected(token)\n        }\n    }\n\n\n\n    return (\n        <div className={imgClass} style={style} onClick={onClick}>\n            <img src={img} alt='token' />\n        </div>\n    )\n}\n\nexport default Token","export default __webpack_public_path__ + \"static/media/escalator_down.03b0327b.png\";","export default __webpack_public_path__ + \"static/media/escalator_up.671e7897.png\";","const EscalatorOrientation = {\n    DOWN: 0,\n    UP: 1\n}\n\nclass EscalatorModel {\n    constructor(id, startCoord, endCoord) {\n        this.id = id\n        this.startCoord = startCoord\n        this.endCoord = endCoord\n    }\n\n    getMinX() {\n        return Math.min(this.startCoord.x, this.endCoord.x)\n    }\n\n    getMinY() {\n        return Math.min(this.startCoord.y, this.endCoord.y)\n    }\n\n    getRowSpan() {\n        return Math.abs(this.startCoord.y - this.endCoord.y) + 1\n    }\n\n    getColSpan() {\n       return Math.abs(this.startCoord.x - this.endCoord.x) + 1\n    }\n\n    getOrientation() {\n        const minX = this.getMinX()\n        const minY = this.getMinY()\n        if( (minX === this.startCoord.x && minY === this.startCoord.y) \n            || (minX === this.endCoord.x && minY === this.endCoord.y )) {\n            return EscalatorOrientation.DOWN\n        } else {\n            return EscalatorOrientation.UP\n        }\n    }\n}\n\nexport { EscalatorModel, EscalatorOrientation }","import downImg from \"../images/escalator_down.png\"\nimport upImg from \"../images/escalator_up.png\"\nimport {EscalatorOrientation} from '../models/escalator'\n\nconst Escalator = ({ escalator, onEscalate }) => {\n    const rowStart = escalator.getMinY() + 1\n    const colStart = escalator.getMinX() + 1\n    let escImg\n    switch(escalator.getOrientation()) {\n        case EscalatorOrientation.DOWN:\n            escImg = downImg\n            break;\n        case EscalatorOrientation.UP:\n            escImg = upImg\n            break;\n        default:\n            throw new Error (\"Invalid Orientation\")\n    }\n\n    const tileStyle = {\n        gridRow: `${rowStart} / span ${escalator.getRowSpan()}`,\n        gridColumn: `${colStart} / span ${escalator.getColSpan()}`,\n    }\n\n    const handleClick = () => {\n        onEscalate(escalator.id)\n    }\n\n    return (\n        < div className = 'escalator' style = {tileStyle} >\n            <img className = 'escalator-img' src={escImg} onClick={handleClick} alt='escalator' />\n        </div>\n    )\n}\n\nexport default Escalator","\nconst Wall = ( {wall}) => {\n    const wallStyle = {\n        gridRow: `${wall.getStartRow()} / span ${wall.getRowSpan()}`,\n        gridColumn: `${wall.getStartCol()} / span ${wall.getColSpan()}`,\n        zIndex: 1\n    }\n\n    if(wall.isHorizontal()) {\n        wallStyle.borderTop = '10px solid #000000'\n        wallStyle.height ='0px'\n    } else {\n        wallStyle.borderLeft = '10px solid #000000'\n        wallStyle.width = '0px'\n    }\n\n    return (\n        < div className = 'wall' style = {wallStyle} >\n        </div>\n    )\n}\n\nexport default Wall","import React from 'react'\nimport Tile from './tile'\nimport  Token  from './token'\nimport Escalator from './escalator'\nimport Wall from './wall'\n\nconst Board = ({ grid, tokens, escalators, walls, gameService }) => {\n    const handleKeyPress = (event) => {\n        if (event.key.toLowerCase() === 's') {\n            gameService.moveDown()\n        } else if (event.key.toLowerCase() === 'w') {\n            gameService.moveUp()\n        } else if (event.key.toLowerCase() === 'a') {\n            gameService.moveLeft()\n        } else if (event.key.toLowerCase() === 'd') {\n            gameService.moveRight()\n        }\n    }\n\n    const onTokenSelected = (token) => {\n        //sends with token.id (Where does this come from? is it always populated correctly?)\n        gameService.send(JSON.stringify(\n            {\n                type: \"SELECTED\",\n                selected: token.id\n            }\n        ))\n    }\n\n    const onTeleport = (coord) => {\n        gameService.teleport(coord)\n    }\n\n    const onEscalate = (escalatorId) => {\n        gameService.escalate(escalatorId)\n    }\n\n    const gridHeight = grid.length\n\n    const gridWidth = grid.length === 0 ? 0 : grid[0].length\n\n    const boardStyle = {\n        margin: '48px',\n        overflow: 'auto',\n        display: 'grid',\n        gridTemplateColumns: `repeat(${gridWidth}, 64px)`,\n        gridTemplateRows: `repeat(${gridHeight}, 64px)`,\n        gap: '0px'\n     }\n\n     const tileStyle = (tileCoord) => {\n        const style =  {\n        gridColumnStart: `${tileCoord.x + 1}`,\n        gridRowStart: `${tileCoord.y + 1}`,\n     }\n\n     return style\n    }\n\n    return (\n        <div className=\"game-board\" style= {boardStyle} onKeyPress={handleKeyPress} tabIndex={0}>\n            {\n                grid.map((row, rowNum) =>\n                        row.map((tile, colNum) =>\n                            <div className='tile-container' key={tile.coord.toString()} style={tileStyle(tile.coord)}>\n                                <Tile tile = {tile} onTeleport={onTeleport} />\n                            </div>\n\n                        )\n                )}\n            {\n                escalators.map( (escalator) => <Escalator escalator={escalator} onEscalate={onEscalate}/>)\n            }\n            {\n                tokens.map( (token) => <Token token={token} onTokenSelected={onTokenSelected} style={tileStyle(token.coord)}/>)\n            }\n            {\n                walls.map( (wall) => <Wall wall={wall}/>  )\n            }     \n        </div>\n    )\n}\n\nexport default Board","const debug = (...params) => {\n    //console.log(...params)\n}\n\nconst info = (...params) => {\n    console.log(...params)\n}\n\nconst warn = (...params) => {\n    console.log(...params)\n}\nconst error = (...params) => {\n    console.error(...params)\n}\n\nexport default {\n    debug,\n    info,\n    warn,\n    error\n}","import logger from './logger'\n\nclass GameService {\n\n    constructor(gameId, playerName) {\n        this.handlers = []\n        this.gameId = gameId\n        this.playerName = playerName\n        this.allowedMovements = []\n    }\n\n    addHandler(newHandler) {\n        this.handlers = this.handlers.filter(handler => handler.id !== newHandler.id)\n        this.handlers.push(newHandler)\n    }\n\n    connect() {\n        return new Promise((resolve, reject) => {\n            let websocketURL = process.env.NODE_ENV === 'development' ? 'ws://127.0.0.1:3001' : 'wss://' + window.location.host\n            let finalURL = websocketURL+`?playerName=${this.playerName}`\n            this.connection = new WebSocket(finalURL)\n            logger.debug(\"Connecting to:\" + finalURL)\n            this.connection.onopen = () => {\n                resolve()\n            }\n            this.connection.onerror = (error) => {\n                logger.error(error)\n                logger.error('Sorry, but there\\'s some problem with your '\n                    + 'connection or the server is down.')\n                    reject(error)\n            }\n            \n            // most important part - incoming messages\n            this.connection.onmessage = (message) => {\n                try {\n                    var json = JSON.parse(message.data);\n                } catch (e) {\n                   logger.error('Invalid JSON: ', message.data);\n                    return\n                }\n            \n                if(json.gameId && json.gameId !== this.gameId) {\n                    logger.warn('Sent message for different game')\n                    return\n                }\n\n                for (let handler of this.handlers) {\n                    handler.handle(json)\n                }\n            }\n            setInterval(() => {\n                if (this.connection.readyState !== 1) {\n                    logger.error('Error missing connection');\n                }\n            }, 3000);\n          });\n       \n    }\n\n    getInitialUpdate() { \n        this.sendBasicCommand('INITIAL')\n    }\n\n    send(message) {\n        let messageObject = JSON.parse(message)\n        messageObject.gameId = this.gameId\n        let gameMessage = JSON.stringify(messageObject)\n\n        logger.debug(\"SEND: \" + gameMessage)\n        this.connection.send(gameMessage)\n    }\n\n    setMovements = (movements) => {\n        this.allowedMovements = movements\n    }\n    \n    sendBasicCommand = (command) => {\n        this.send(JSON.stringify(\n            {\n                type: command\n            }\n        ))\n    }\n    \n    sendMovement(command){\n        if (!this.allowedMovements.includes(command)) {\n            return\n        }\n        this.sendBasicCommand(command)\n    }\n    \n    reset = () => {\n        this.sendBasicCommand('RESET')\n    }\n    \n    moveRight = () => {\n       this.sendMovement('RIGHT')\n    }\n    \n    moveLeft = () => {\n        this.sendMovement('LEFT')\n    }\n    \n    moveDown = () => {\n        this.sendMovement('DOWN')\n    }\n    \n    moveUp = () => {\n        this.sendMovement('UP')\n    }\n    \n    doSomething = (playerName) => {\n        this.send(JSON.stringify(\n            {\n                type: 'DO-SOMETHING',\n                player: playerName\n            }\n        ))\n    }\n\n    teleport = (coord) => {\n        this.send(JSON.stringify(\n            {\n                type: \"TELEPORT\",\n                coord: coord\n            }\n        ))\n    }\n\n    escalate = (escalatorId) => {\n        this.send(JSON.stringify(\n            {\n                type: \"ESCALATE\",\n                id: escalatorId\n            }\n        ))\n    }\n\n\n}\n\nexport default GameService","class Coordinate {\n    constructor(x, y) {\n        this.x = x\n        this.y = y\n    }\n\n    toString() {\n        return `(${this.x}, ${this.y})`\n    }\n}\n\nexport default Coordinate","class WallModel {\n    constructor(startCoord, endCoord) {\n        this.startCoord = startCoord\n        this.endCoord = endCoord\n    }\n\n    getStartRow() {\n        return Math.min(this.startCoord.y, this.endCoord.y) + 1\n    }\n\n    getStartCol() {\n        return Math.min(this.startCoord.x, this.endCoord.x) + 1\n    }\n\n    getRowSpan() {\n        return Math.max(1, Math.abs(this.startCoord.y - this.endCoord.y))\n    }\n\n    getColSpan() {\n        return Math.max(1, Math.abs(this.startCoord.x - this.endCoord.x))\n    }\n\n    isHorizontal() {\n        return this.startCoord.y === this.endCoord.y\n    }\n}\n\nexport { WallModel }","export default __webpack_public_path__ + \"static/media/up.552f859e.png\";","export default __webpack_public_path__ + \"static/media/down.40f8ab30.png\";","export default __webpack_public_path__ + \"static/media/left.aa0f5ff4.png\";","export default __webpack_public_path__ + \"static/media/right.9a984c67.png\";","import up from \"../images/up.png\"\nimport down from \"../images/down.png\"\nimport left from \"../images/left.png\"\nimport right from \"../images/right.png\"\nconst MoveIndicator = ({ move, isSelf }) => {\n    let imgSrc\n    let keyIcon\n    if(move === 'LEFT') {\n        imgSrc = left\n        keyIcon = 'A'\n    } else if(move ==='RIGHT') {\n        imgSrc = right\n        keyIcon = 'D'\n    } else if(move ==='UP') {\n        imgSrc = up\n        keyIcon = 'W'\n    } else if(move ==='DOWN') {\n        imgSrc = down\n        keyIcon = 'S'\n    } else {\n        console.log(\"Fail, move: \" + move)\n    }\n    return (\n        < div className ='move-icon'>\n           <img src={imgSrc} alt='move' />\n           {isSelf ? <span>{keyIcon}</span> : \"\"}\n        </div>\n    )\n}\n\nexport default MoveIndicator","import MoveIndicator from './moveIndicator'\n\nconst OtherPlayer = ({ playerName, allowedMoves, doSomething }) => {\n\n    const onClickDoSomething = (_) => {\n        doSomething(playerName)\n    }\n    return (\n        < div className='player-other'>\n            <div className='player-bar'>\n                <label>{playerName}</label>\n                {\n                    allowedMoves.map(move =>  <MoveIndicator key={move} move={move} isSelf={false}></MoveIndicator>)\n                }\n                <button className='doSomethingButton' onClick={onClickDoSomething}>!</button>\n                \n            </div>\n        </div>\n    )\n}\n\nexport default OtherPlayer","import MoveIndicator from './moveIndicator'\n\nconst Moves = ({ playerName, allowedMoves }) => {\n\n    return (\n        < div className='player-self'>\n            <span id='mainPlayer'>{playerName}</span>\n            <h2>Moves</h2>\n            <div className = 'player-moves' >\n                {\n                    allowedMoves.map(move =>  <MoveIndicator key={move} move={move} isSelf={true}></MoveIndicator>)\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default Moves","import React from 'react'\n\nconst Notification = ({ notification }) => {\n    if (notification === null) {\n        return null\n    }\n\n    return (\n        <div className={notification.isGood ? 'notification' : 'notification-bad'}>\n            {notification.message}\n        </div>\n    )\n}\n\nexport default Notification","import React from 'react'\n\nconst Timer = ({ remainingSeconds }) => {\n    if (!remainingSeconds) {\n        return \"\"\n    }\n    const getTimeStr = (num) => {\n        const paddedString = \"00\" + num\n        return paddedString.substr(paddedString.length - 2)\n    }\n    const minutes = getTimeStr(Math.floor(remainingSeconds / 60))\n    const seconds = getTimeStr(remainingSeconds % 60)\n\n    const criticalTime = 10\n    const className = remainingSeconds > criticalTime ? 'timer' : 'timer-critical'\n    return (\n        <div className={className}>\n            {`${minutes}:${seconds}`}\n        </div>\n    )\n}\n\nexport default Timer","import '../App.css'\nimport React, { useState, useEffect } from 'react'\nimport Board from './board'\nimport GameService from '../services/gameService'\nimport logger from '../services/logger'\nimport Coordinate from '../models/coordinate'\nimport {EscalatorModel} from '../models/escalator'\nimport {WallModel} from '../models/wallModel'\nimport { Tile, TileType } from '../models/tile'\nimport { Item } from '../models/item'\nimport { Token } from '../models/token'\nimport OtherPlayer from './playerIndicator'\nimport Moves from './moves'\nimport Notification from './notification'\nimport Timer from './Timer'\nimport { useParams } from 'react-router-dom'\n\n\nconst getCoordinate = (pos) => {\n  const x = parseInt(pos.x)\n  const y = parseInt(pos.y)\n  return new Coordinate(x, y)\n}\n\nconst getTileType = (type) => {\n  switch(type) {\n    case 0:\n      return TileType.NORMAL\n    case 1:\n      return TileType.WALL\n    case 2:\n      return TileType.EXIT\n    case 3:\n      return TileType.CONNECT\n    case 4:\n      return TileType.PORTAL\n    default:\n      return TileType.UNKNOWN\n  }\n}\n\nconst getTile = (tileData) => {\n  const itemData = tileData.item\n  let item\n  if(itemData) {\n    item = new Item(itemData.type, itemData.tokenType)\n  }\n\n  return new Tile(getCoordinate(tileData.pos), \n  getTileType(tileData.type), \n  tileData.hasItem, \n  item,\n  tileData.tokenType)\n}\n\nconst getTileRow = (row) => {\n  return row.map(tileData => getTile(tileData))\n}\n\nconst getTiles = (tiles) => {\n  const grid = tiles.map( row => getTileRow(row))\n  return grid\n}\n\nconst getEscalators = (escalators) => {\n  return escalators.map( escalator => new EscalatorModel(escalator.id, getCoordinate(escalator.start), getCoordinate(escalator.end)))\n}\n\nconst getWalls = (walls) => {\n  return walls.map( wall => new WallModel(getCoordinate(wall.start), getCoordinate(wall.end)))\n}\n\nconst getInitials = (str) => {\n  const split = str.split(\" \")\n  return split.map(substr => substr[0]).join('')\n}\n\nconst getSelectedBy = (selections, idx) => {\n  let selection = selections.find(selection => selection.selection === idx)\n  if (selection) {\n    return getInitials(selection.selectedBy)\n  }\n  return null\n}\n\nconst getTokens = (data) => {\n  console.log(JSON.stringify(data))\n  const newTokens = data.tokens.map((tokenData, idx) =>\n  new Token(idx,\n    getCoordinate(tokenData.pos),\n    getSelectedBy(data.selections, idx),\n    tokenData.escaped,\n    tokenData.type))\n  return newTokens\n}\n\nfunction Game({realPlayerName}) {\n  const [updatedTiles, setTiles] = useState([[]])\n  const [escalators, setEscalators] = useState([])\n  const [walls, setWalls] = useState([])\n  const [tokens, setTokens] = useState([])\n  const [allowedMoves, setMoves] = useState([])\n  const [allPlayers, setAllPlayers] = useState([])\n  const [notificationMessage, setNotificationMessage] = useState(null)\n  const [remainingSeconds, setRemainingSeconds] = useState(null)\n  const [gameService, setGameService] = useState(null)\n\n  const clearNotification = () => {\n    setNotificationMessage(null)\n  }\n  let { gameId } = useParams();\n  useEffect(() => {\n    let service = new GameService(gameId, realPlayerName)\n    const notify = (message, fade, isGood) => {\n      setNotificationMessage({\n        message: message,\n        isGood: isGood\n      })\n      if (!fade) {\n        return\n      }\n      setTimeout(() => {\n        clearNotification()\n      }, 5000)\n    }\n\n    let handler = {\n      id: 'app-updates',\n      handle: (json) => {\n        if (json.type === 'token-update') {\n          logger.debug('Token update!')\n          setTokens(getTokens(json.data))\n        } else if (json.type === 'board-update') {\n          logger.debug('Board UPDATE')\n          setTiles(getTiles(json.data.board.tiles))\n          setEscalators(getEscalators(json.data.board.escalators))\n          setWalls(getWalls(json.data.board.walls))\n          setTokens(getTokens(json.data.tokenData))\n          clearNotification()\n        } else if (json.type === 'win') {\n          notify(\"You have won the game!\", false, true)\n        } else if (json.type === 'movements') {\n          logger.debug(\"Setting movement\")\n          service.setMovements(json.data.movements)\n          setMoves(json.data.movements)\n        } else if (json.type === 'all-players') {\n          setAllPlayers(json.data)\n        } else if (json.type === 'do-something') {\n          notify(`${json.data.sender} wants you to do something.`, true, true)\n        } else if (json.type === 'timer-update') {\n          // probably can update in a different way \n          //date to finish makes this less chatty\n          //could have an interval here that counts down\n          //timer-update is sent only on time pickups and connections\n          setRemainingSeconds(json.data.seconds)\n        } else if (json.type === 'lose') {\n          notify(\"You have lost the game..\", false, false)\n        }\n      }\n    }\n    service.addHandler(handler)\n    async function initialConnect() {\n      await service.connect()\n      service.getInitialUpdate()\n    }\n    initialConnect()\n    setGameService(service)\n  },\n  [gameId])\n\n\n  const reset = (_) => {\n    gameService.reset()\n  }\n\n  const doSomething = (otherPlayerName) => {\n    gameService.doSomething(otherPlayerName)\n  }\n\n  const otherPlayers = allPlayers.filter(playerInfo => playerInfo.playerName !== realPlayerName)\n\n  return (\n    <div className=\"App\">\n      <Notification notification={notificationMessage} />\n      <div className=\"board-space\">\n        <div className=\"board-controls\">\n          <Timer remainingSeconds={remainingSeconds} />\n          <br />\n          <Moves playerName={realPlayerName} allowedMoves={allowedMoves} />\n          <br />\n          <h2 hidden={!otherPlayers.length}>Other Players:</h2>\n          {\n            otherPlayers.map(player => <OtherPlayer key={player.playerName}\n              playerName={player.playerName}\n              allowedMoves={player.moves}\n              isSelf={false}\n              doSomething={doSomething} />)\n          }\n          <button className='button' id='reset-button' onClick={reset}>Reset</button>\n        </div>\n        <Board grid={updatedTiles} tokens={tokens} escalators={escalators} walls={walls} gameService={gameService} />\n      </div>\n\n    </div >\n  );\n}\n\nexport default Game;\n","import React, { useRef } from 'react'\nimport {\n  useNavigate\n} from \"react-router-dom\"\nimport axios from 'axios';\nimport logger from '../services/logger'\n\nfunction Menu({playerName, setPlayerName}) {\n  const navigate = useNavigate();\n  const joinCodeRef = useRef(null)\n\n  const createGameClick = async () => {\n    const response = await axios.post('/games', {gameId: joinCodeRef.current.value});\n\n    logger.debug(response.data)\n    // The server responds with the id of the new user\n    const gameId = response.data.gameId;\n    logger.debug('Game Id response:' + gameId)\n    navigate(`/game/${gameId}`);\n  };\n\n  const joinGameClick = async () => {\n    const gameId = joinCodeRef.current.value\n    navigate(`/game/${gameId}`);\n  };\n\n  const handleNameChange = (event) => {\n    setPlayerName(event.target.value)\n  }\n\n  return (\n    <div className=\"menu\">\n      <h1>Magic Maze</h1>\n      <div className=\"menuSelections\">\n        <div className=\"menuRow\" >\n          <input type=\"text\" value={playerName} onChange={handleNameChange} placeholder='Nickname' className=\"inputText\" />\n        </div>\n        <div className=\"menuRow\" >\n        <input type=\"text\" ref={joinCodeRef} placeholder='Game Code' className=\"inputText\" />\n        </div>\n        <div className =\"menuRow\">\n          <button onClick={() => createGameClick()} className = \"button\" >Create</button>\n          <button onClick={joinGameClick} className = \"button\" >Join</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Menu;\n","import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './components/game';\nimport {\n  BrowserRouter as Router,\n  Routes, Route\n} from \"react-router-dom\"\nimport Menu from './components/menu';\n\n\nfunction App() {\n    const [playerName, setPlayerName] = useState('');\n  \n    return (\n    <Router>\n        <Routes>\n          <Route path=\"/game/:gameId\" element={<Game  realPlayerName = {playerName} />}/>\n          <Route path=\"/\" element={<Menu playerName={playerName} setPlayerName={setPlayerName}/>}/>\n         </Routes>\n      </Router>\n    );\n  }\n  \n  export default App;\nReactDOM.render(\n  <React.StrictMode>\n   \n   \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {\n  BrowserRouter as Router,\n  Routes, Route\n} from \"react-router-dom\"\nimport Menu from './components/menu';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}