{"version":3,"sources":["models/tile.js","images/coins_new.png","images/timer.png","models/item.js","components/item.js","images/rock.png","images/portal.png","components/tile.js","images/dwarf_right.png","components/token.js","images/escalator_down.png","images/escalator_up.png","models/escalator.js","components/escalator.js","components/wall.js","components/board.js","services/logger.js","services/gameService.js","models/coordinate.js","models/wallModel.js","models/token.js","images/up.png","images/down.png","images/left.png","images/right.png","components/moveIndicator.js","components/playerIndicator.js","components/moves.js","components/notification.js","components/Timer.js","components/game.js","components/menu.js","App.js","index.js"],"names":["TileType","Tile","coord","type","hasItem","item","this","ItemType","Item","itemImg","coinImg","timerImg","className","src","alt","tileImg","tile","onTeleport","rockTile","portalTile","onClick","Token","imgClass","token","onTokenSelected","style","selectedBy","tokenImg","EscalatorOrientation","EscalatorModel","id","startCoord","endCoord","Math","min","x","y","abs","minX","getMinX","minY","getMinY","Escalator","escImg","escalator","onEscalate","rowStart","colStart","getOrientation","downImg","upImg","Error","tileStyle","gridRow","getRowSpan","gridColumn","getColSpan","Wall","wall","wallStyle","getStartRow","getStartCol","zIndex","isHorizontal","borderTop","borderLeft","Board","grid","tokens","escalators","walls","gameService","send","JSON","stringify","selected","teleport","escalatorId","escalate","gridHeight","length","gridWidth","boardStyle","margin","overflow","display","gridTemplateColumns","gridTemplateRows","gap","tileCoord","gridColumnStart","gridRowStart","onKeyPress","event","key","toLowerCase","moveDown","moveUp","moveLeft","moveRight","tabIndex","map","row","rowNum","colNum","toString","console","log","error","GameService","gameId","playerName","setMovements","movements","allowedMovements","sendBasicCommand","command","reset","sendMovement","doSomething","player","handlers","newHandler","filter","handler","push","Promise","resolve","reject","finalURL","window","location","host","connection","WebSocket","logger","onopen","onerror","onmessage","message","json","parse","data","e","handle","setInterval","readyState","messageObject","gameMessage","includes","Coordinate","WallModel","max","MoveIndicator","imgSrc","keyIcon","move","isSelf","left","right","up","down","OtherPlayer","allowedMoves","_","Moves","Notification","notification","isGood","Timer","remainingSeconds","getTimeStr","num","paddedString","substr","minutes","floor","seconds","getCoordinate","pos","parseInt","getTile","tileData","itemData","getTileType","getTiles","tiles","getTileRow","getTokens","idx","selections","selection","find","split","join","getSelectedBy","Game","realPlayerName","useState","updatedTiles","setTiles","setEscalators","setWalls","setTokens","setMoves","allPlayers","setAllPlayers","notificationMessage","setNotificationMessage","setRemainingSeconds","setGameService","clearNotification","useParams","useEffect","service","notify","fade","setTimeout","board","start","end","getEscalators","getWalls","tokenData","sender","a","connect","getInitialUpdate","addHandler","initialConnect","otherPlayerName","otherPlayers","playerInfo","hidden","moves","Menu","setPlayerName","navigate","useNavigate","joinCodeRef","useRef","createGameClick","axios","post","current","value","response","joinGameClick","onChange","target","placeholder","ref","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7bc84244.chunk.js","sourcesContent":["let TileType = {\n    UNKNOWN: -1,\n    NORMAL: 1,\n    EXIT: 2,\n    WALL: 3,\n    CONNECT: 4,\n    PORTAL: 5\n}\n\nclass Tile {\n    constructor(coord, type, hasItem, item) {\n        this.coord = coord\n        this.type = type\n        this.hasItem = hasItem\n        this.item = item\n    }\n}\n\nexport { Tile, TileType }\n","export default __webpack_public_path__ + \"static/media/coins_new.2254d122.png\";","export default __webpack_public_path__ + \"static/media/timer.c21cbb42.png\";","let ItemType = {\n    COIN: 0,\n    TIMER: 1\n}\n\nclass Item {\n    constructor(type) {\n        this.type = type\n    }\n}\n\nexport { Item, ItemType }","import React from 'react'\nimport coinImg from \"../images/coins_new.png\"\nimport timerImg from \"../images/timer.png\"\nimport {ItemType} from \"../models/item\"\n\nconst Item = ({item}) => {\n    let itemImg\n    if(item.type === ItemType.COIN) {\n        itemImg = coinImg\n    } else if(item.type === ItemType.TIMER) {\n        itemImg = timerImg\n    }\n    return (\n        <div className='token' >\n            <img src={itemImg} alt='token' />\n        </div>\n    )\n}\n\nexport default Item","export default __webpack_public_path__ + \"static/media/rock.3d4d808c.png\";","export default __webpack_public_path__ + \"static/media/portal.31e8e713.png\";","import { TileType } from \"../models/tile\"\nimport Item from \"./item\"\nimport rockTile from \"../images/rock.png\"\nimport portalTile from \"../images/portal.png\"\n\nconst Tile = ({tile, onTeleport }) => {\n    let className\n    let tileImg\n    const type = tile.type\n    if (type === TileType.EXIT) {\n        className = 'tile-exit'\n    } else if (type === TileType.WALL) {\n        className = 'tile-wall'\n        tileImg = rockTile\n    } else if (type === TileType.UNKNOWN) {\n        className = 'tile-unknown'\n    } else if (type === TileType.CONNECT) {\n        className = 'tile-connect'\n    } else if (type === TileType.PORTAL) {\n        className = 'tile-portal'\n        tileImg = portalTile\n    }\n    else {\n        className = 'tile'\n    }\n\n    const handleClick = () => {\n        if(type !== TileType.PORTAL) {\n            return\n        }\n        onTeleport(tile.coord)\n    }\n\n    return (\n        <div className={className}>\n            { tileImg ? <img src={tileImg} className=\"tile-image\" onClick={handleClick} alt='' /> : null}\n            { tile.hasItem ? <Item item={tile.item}/> : null}\n        </div>\n    )\n}\n\nexport default Tile","export default __webpack_public_path__ + \"static/media/dwarf_right.3de0ca4b.png\";","import React from 'react'\nimport tokenImg from \"../images/dwarf_right.png\"\n\nconst Token = ({ token, onTokenSelected, style}) => {\n    if(!token) {\n        return ''\n    }\n\n    let imgClass\n    if (token.selectedBy) {\n        imgClass = 'token-selected'\n    } else if (!token.selectedBy) {\n        imgClass = 'token'\n    }\n    \n    const onClick = () => {\n        if (token) {\n            onTokenSelected(token)\n        }\n    }\n\n\n\n    return (\n        <div className={imgClass} style={style} onClick={onClick}>\n            <img src={tokenImg} alt='token' />\n        </div>\n    )\n}\n\nexport default Token","export default __webpack_public_path__ + \"static/media/escalator_down.03b0327b.png\";","export default __webpack_public_path__ + \"static/media/escalator_up.671e7897.png\";","const EscalatorOrientation = {\n    DOWN: 0,\n    UP: 1\n}\n\nclass EscalatorModel {\n    constructor(id, startCoord, endCoord) {\n        this.id = id\n        this.startCoord = startCoord\n        this.endCoord = endCoord\n    }\n\n    getMinX() {\n        return Math.min(this.startCoord.x, this.endCoord.x)\n    }\n\n    getMinY() {\n        return Math.min(this.startCoord.y, this.endCoord.y)\n    }\n\n    getRowSpan() {\n        return Math.abs(this.startCoord.y - this.endCoord.y) + 1\n    }\n\n    getColSpan() {\n       return Math.abs(this.startCoord.x - this.endCoord.x) + 1\n    }\n\n    getOrientation() {\n        const minX = this.getMinX()\n        const minY = this.getMinY()\n        if( (minX === this.startCoord.x && minY === this.startCoord.y) \n            || (minX === this.endCoord.x && minY === this.endCoord.y )) {\n            return EscalatorOrientation.DOWN\n        } else {\n            return EscalatorOrientation.UP\n        }\n    }\n}\n\nexport { EscalatorModel, EscalatorOrientation }","import downImg from \"../images/escalator_down.png\"\nimport upImg from \"../images/escalator_up.png\"\nimport {EscalatorOrientation} from '../models/escalator'\n\nconst Escalator = ({ escalator, onEscalate }) => {\n    const rowStart = escalator.getMinY() + 1\n    const colStart = escalator.getMinX() + 1\n    let escImg\n    switch(escalator.getOrientation()) {\n        case EscalatorOrientation.DOWN:\n            escImg = downImg\n            break;\n        case EscalatorOrientation.UP:\n            escImg = upImg\n            break;\n        default:\n            throw new Error (\"Invalid Orientation\")\n    }\n\n    const tileStyle = {\n        gridRow: `${rowStart} / span ${escalator.getRowSpan()}`,\n        gridColumn: `${colStart} / span ${escalator.getColSpan()}`,\n    }\n\n    const handleClick = () => {\n        onEscalate(escalator.id)\n    }\n\n    return (\n        < div className = 'escalator' style = {tileStyle} >\n            <img className = 'escalator-img' src={escImg} onClick={handleClick} alt='escalator' />\n        </div>\n    )\n}\n\nexport default Escalator","\nconst Wall = ( {wall}) => {\n    const wallStyle = {\n        gridRow: `${wall.getStartRow()} / span ${wall.getRowSpan()}`,\n        gridColumn: `${wall.getStartCol()} / span ${wall.getColSpan()}`,\n        zIndex: 1\n    }\n\n    if(wall.isHorizontal()) {\n        wallStyle.borderTop = '10px solid #000000'\n    } else {\n        wallStyle.borderLeft = '10px solid #000000'\n    }\n\n    return (\n        < div className = 'wall' style = {wallStyle} >\n        </div>\n    )\n}\n\nexport default Wall","import React from 'react'\nimport Tile from './tile'\nimport Token from './token'\nimport Escalator from './escalator'\nimport Wall from './wall'\n\nconst Board = ({ grid, tokens, escalators, walls, gameService }) => {\n    const handleKeyPress = (event) => {\n        if (event.key.toLowerCase() === 's') {\n            gameService.moveDown()\n        } else if (event.key.toLowerCase() === 'w') {\n            gameService.moveUp()\n        } else if (event.key.toLowerCase() === 'a') {\n            gameService.moveLeft()\n        } else if (event.key.toLowerCase() === 'd') {\n            gameService.moveRight()\n        }\n    }\n\n    const onTokenSelected = (token) => {\n        //sends with token.id (Where does this come from? is it always populated correctly?)\n        gameService.send(JSON.stringify(\n            {\n                type: \"SELECTED\",\n                selected: token.id\n            }\n        ))\n    }\n\n    const onTeleport = (coord) => {\n        gameService.teleport(coord)\n    }\n\n    const onEscalate = (escalatorId) => {\n        gameService.escalate(escalatorId)\n    }\n\n    const gridHeight = grid.length\n\n    const gridWidth = grid.length === 0 ? 0 : grid[0].length\n\n    const boardStyle = {\n        margin: '48px',\n        overflow: 'auto',\n        display: 'grid',\n        gridTemplateColumns: `repeat(${gridWidth}, 64px)`,\n        gridTemplateRows: `repeat(${gridHeight}, 64px)`,\n        gap: '0px'\n     }\n\n     const tileStyle = (tileCoord) => {\n        const style =  {\n        gridColumnStart: `${tileCoord.x + 1}`,\n        gridRowStart: `${tileCoord.y + 1}`,\n     }\n\n     return style\n    }\n\n    return (\n        <div className=\"game-board\" style= {boardStyle} onKeyPress={handleKeyPress} tabIndex={0}>\n            {\n                grid.map((row, rowNum) =>\n                        row.map((tile, colNum) =>\n                            <div className='tile-container' key={tile.coord.toString()} style={tileStyle(tile.coord)}>\n                                <Tile tile = {tile} onTeleport={onTeleport} />\n                            </div>\n\n                        )\n                )}\n            {\n                escalators.map( (escalator) => <Escalator escalator={escalator} onEscalate={onEscalate}/>)\n            }\n            {\n                tokens.map( (token) => <Token token={token} onTokenSelected={onTokenSelected} style={tileStyle(token.coord)}/>)\n            }\n            {\n                walls.map( (wall) => <Wall wall={wall}/>  )\n            }     \n        </div>\n    )\n}\n\nexport default Board","const debug = (...params) => {\n    console.log(...params)\n}\n\nconst info = (...params) => {\n    console.log(...params)\n}\n\nconst warn = (...params) => {\n    console.log(...params)\n}\nconst error = (...params) => {\n    console.error(...params)\n}\n\nexport default {\n    debug,\n    info,\n    warn,\n    error\n}","import logger from './logger'\n\nclass GameService {\n\n    constructor(gameId, playerName) {\n        this.handlers = []\n        this.gameId = gameId\n        this.playerName = playerName\n        this.allowedMovements = []\n    }\n\n    addHandler(newHandler) {\n        this.handlers = this.handlers.filter(handler => handler.id !== newHandler.id)\n        this.handlers.push(newHandler)\n    }\n\n    connect() {\n        return new Promise((resolve, reject) => {\n            let websocketURL = process.env.NODE_ENV === 'development' ? 'ws://127.0.0.1:3001' : 'wss://' + window.location.host\n            let finalURL = websocketURL+`?playerName=${this.playerName}`\n            this.connection = new WebSocket(finalURL)\n            logger.debug(\"Connecting to:\" + finalURL)\n            this.connection.onopen = () => {\n                resolve()\n            }\n            this.connection.onerror = (error) => {\n                logger.error(error)\n                logger.error('Sorry, but there\\'s some problem with your '\n                    + 'connection or the server is down.')\n                    reject(error)\n            }\n            \n            // most important part - incoming messages\n            this.connection.onmessage = (message) => {\n                try {\n                    var json = JSON.parse(message.data);\n                } catch (e) {\n                   logger.error('Invalid JSON: ', message.data);\n                    return\n                }\n            \n                if(json.gameId && json.gameId !== this.gameId) {\n                    logger.warn('Sent message for different game')\n                    return\n                }\n\n                for (let handler of this.handlers) {\n                    handler.handle(json)\n                }\n            }\n            setInterval(() => {\n                if (this.connection.readyState !== 1) {\n                    logger.error('Error missing connection');\n                }\n            }, 3000);\n          });\n       \n    }\n\n    getInitialUpdate() { \n        this.sendBasicCommand('INITIAL')\n    }\n\n    send(message) {\n        let messageObject = JSON.parse(message)\n        messageObject.gameId = this.gameId\n        let gameMessage = JSON.stringify(messageObject)\n\n        logger.debug(\"SEND: \" + gameMessage)\n        this.connection.send(gameMessage)\n    }\n\n    setMovements = (movements) => {\n        this.allowedMovements = movements\n    }\n    \n    sendBasicCommand = (command) => {\n        this.send(JSON.stringify(\n            {\n                type: command\n            }\n        ))\n    }\n    \n    sendMovement(command){\n        if (!this.allowedMovements.includes(command)) {\n            return\n        }\n        this.sendBasicCommand(command)\n    }\n    \n    reset = () => {\n        this.sendBasicCommand('RESET')\n    }\n    \n    moveRight = () => {\n       this.sendMovement('RIGHT')\n    }\n    \n    moveLeft = () => {\n        this.sendMovement('LEFT')\n    }\n    \n    moveDown = () => {\n        this.sendMovement('DOWN')\n    }\n    \n    moveUp = () => {\n        this.sendMovement('UP')\n    }\n    \n    doSomething = (playerName) => {\n        this.send(JSON.stringify(\n            {\n                type: 'DO-SOMETHING',\n                player: playerName\n            }\n        ))\n    }\n\n    teleport = (coord) => {\n        this.send(JSON.stringify(\n            {\n                type: \"TELEPORT\",\n                coord: coord\n            }\n        ))\n    }\n\n    escalate = (escalatorId) => {\n        this.send(JSON.stringify(\n            {\n                type: \"ESCALATE\",\n                id: escalatorId\n            }\n        ))\n    }\n\n\n}\n\nexport default GameService","class Coordinate {\n    constructor(x, y) {\n        this.x = x\n        this.y = y\n    }\n\n    toString() {\n        return `(${this.x}, ${this.y})`\n    }\n}\n\nexport default Coordinate","class WallModel {\n    constructor(startCoord, endCoord) {\n        this.startCoord = startCoord\n        this.endCoord = endCoord\n    }\n\n    getStartRow() {\n        return Math.min(this.startCoord.y, this.endCoord.y) + 1\n    }\n\n    getStartCol() {\n        return Math.min(this.startCoord.x, this.endCoord.x) + 1\n    }\n\n    getRowSpan() {\n        return Math.max(1, Math.abs(this.startCoord.y - this.endCoord.y))\n    }\n\n    getColSpan() {\n        return Math.max(1, Math.abs(this.startCoord.x - this.endCoord.x))\n    }\n\n    isHorizontal() {\n        return this.startCoord.y === this.endCoord.y\n    }\n}\n\nexport { WallModel }","class Token {\n    constructor(id, coord, selectedBy) {\n        this.id = id\n        this.coord = coord\n        this.selectedBy = selectedBy\n    }\n}\n\nexport default Token","export default __webpack_public_path__ + \"static/media/up.552f859e.png\";","export default __webpack_public_path__ + \"static/media/down.40f8ab30.png\";","export default __webpack_public_path__ + \"static/media/left.aa0f5ff4.png\";","export default __webpack_public_path__ + \"static/media/right.9a984c67.png\";","import up from \"../images/up.png\"\nimport down from \"../images/down.png\"\nimport left from \"../images/left.png\"\nimport right from \"../images/right.png\"\nconst MoveIndicator = ({ move, isSelf }) => {\n    let imgSrc\n    let keyIcon\n    if(move === 'LEFT') {\n        imgSrc = left\n        keyIcon = 'A'\n    } else if(move ==='RIGHT') {\n        imgSrc = right\n        keyIcon = 'D'\n    } else if(move ==='UP') {\n        imgSrc = up\n        keyIcon = 'W'\n    } else if(move ==='DOWN') {\n        imgSrc = down\n        keyIcon = 'S'\n    } else {\n        console.log(\"Fail, move: \" + move)\n    }\n    return (\n        < div className ='move-icon'>\n           <img src={imgSrc} alt='move' />\n           {isSelf ? <span>{keyIcon}</span> : \"\"}\n        </div>\n    )\n}\n\nexport default MoveIndicator","import MoveIndicator from './moveIndicator'\n\nconst OtherPlayer = ({ playerName, allowedMoves, doSomething }) => {\n\n    const onClickDoSomething = (_) => {\n        doSomething(playerName)\n    }\n    return (\n        < div className='player-other'>\n            <div className='player-bar'>\n                <label>{playerName}</label>\n                {\n                    allowedMoves.map(move =>  <MoveIndicator key={move} move={move} isSelf={false}></MoveIndicator>)\n                }\n                <button className='doSomethingButton' onClick={onClickDoSomething}>!</button>\n                \n            </div>\n        </div>\n    )\n}\n\nexport default OtherPlayer","import MoveIndicator from './moveIndicator'\n\nconst Moves = ({ playerName, allowedMoves }) => {\n\n    return (\n        < div className='player-self'>\n            <span id='mainPlayer'>{playerName}</span>\n            <h2>Moves</h2>\n            <div className = 'player-moves' >\n                {\n                    allowedMoves.map(move =>  <MoveIndicator key={move} move={move} isSelf={true}></MoveIndicator>)\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default Moves","import React from 'react'\n\nconst Notification = ({ notification }) => {\n    if (notification === null) {\n        return null\n    }\n\n    return (\n        <div className={notification.isGood ? 'notification' : 'notification-bad'}>\n            {notification.message}\n        </div>\n    )\n}\n\nexport default Notification","import React from 'react'\n\nconst Timer = ({ remainingSeconds }) => {\n    if (!remainingSeconds) {\n        return \"\"\n    }\n    const getTimeStr = (num) => {\n        const paddedString = \"00\" + num\n        return paddedString.substr(paddedString.length - 2)\n    }\n    const minutes = getTimeStr(Math.floor(remainingSeconds / 60))\n    const seconds = getTimeStr(remainingSeconds % 60)\n\n    const criticalTime = 10\n    const className = remainingSeconds > criticalTime ? 'timer' : 'timer-critical'\n    return (\n        <div className={className}>\n            {`${minutes}:${seconds}`}\n        </div>\n    )\n}\n\nexport default Timer","import '../App.css'\nimport React, { useState, useEffect } from 'react'\nimport Board from './board'\nimport GameService from '../services/gameService'\nimport logger from '../services/logger'\nimport Coordinate from '../models/coordinate'\nimport {EscalatorModel} from '../models/escalator'\nimport {WallModel} from '../models/wallModel'\nimport { Tile, TileType } from '../models/tile'\nimport { Item } from '../models/item'\nimport Token from '../models/token'\nimport OtherPlayer from './playerIndicator'\nimport Moves from './moves'\nimport Notification from './notification'\nimport Timer from './Timer'\nimport { useParams } from 'react-router-dom'\n\n\nconst getCoordinate = (pos) => {\n  const x = parseInt(pos.x)\n  const y = parseInt(pos.y)\n  return new Coordinate(x, y)\n}\n\nconst getTileType = (type) => {\n  switch(type) {\n    case 0:\n      return TileType.NORMAL\n    case 1:\n      return TileType.WALL\n    case 2:\n      return TileType.EXIT\n    case 3:\n      return TileType.CONNECT\n    case 4:\n      return TileType.PORTAL\n    default:\n      return TileType.UNKNOWN\n  }\n}\n\nconst getTile = (tileData) => {\n  const itemData = tileData.item\n  let item\n  if(itemData) {\n    item = new Item(itemData.type)\n  }\n  return new Tile(getCoordinate(tileData.pos), getTileType(tileData.type), tileData.hasItem, item)\n}\n\nconst getTileRow = (row) => {\n  return row.map(tileData => getTile(tileData))\n}\n\nconst getTiles = (tiles) => {\n  const grid = tiles.map( row => getTileRow(row))\n  return grid\n}\n\nconst getEscalators = (escalators) => {\n  return escalators.map( escalator => new EscalatorModel(escalator.id, getCoordinate(escalator.start), getCoordinate(escalator.end)))\n}\n\nconst getWalls = (walls) => {\n  return walls.map( wall => new WallModel(getCoordinate(wall.start), getCoordinate(wall.end)))\n}\n\nconst getInitials = (str) => {\n  const split = str.split(\" \")\n  return split.map(substr => substr[0]).join('')\n}\n\nconst getSelectedBy = (selections, idx) => {\n  let selection = selections.find(selection => selection.selection === idx)\n  if (selection) {\n    return getInitials(selection.selectedBy)\n  }\n  return null\n}\n\nconst getTokens = (data) => {\n  const newTokens = data.tokens.map((pos, idx) =>\n  new Token(idx,\n    getCoordinate(pos),\n    getSelectedBy(data.selections, idx)))\n  return newTokens\n}\n\nfunction Game({realPlayerName}) {\n  const [updatedTiles, setTiles] = useState([[]])\n  const [escalators, setEscalators] = useState([])\n  const [walls, setWalls] = useState([])\n  const [tokens, setTokens] = useState([])\n  const [allowedMoves, setMoves] = useState([])\n  const [allPlayers, setAllPlayers] = useState([])\n  const [notificationMessage, setNotificationMessage] = useState(null)\n  const [remainingSeconds, setRemainingSeconds] = useState(null)\n  const [gameService, setGameService] = useState(null)\n\n  const clearNotification = () => {\n    setNotificationMessage(null)\n  }\n  let { gameId } = useParams();\n  useEffect(() => {\n    let service = new GameService(gameId, realPlayerName)\n    const notify = (message, fade, isGood) => {\n      setNotificationMessage({\n        message: message,\n        isGood: isGood\n      })\n      if (!fade) {\n        return\n      }\n      setTimeout(() => {\n        clearNotification()\n      }, 5000)\n    }\n\n    let handler = {\n      id: 'app-updates',\n      handle: (json) => {\n        if (json.type === 'token-update') {\n          logger.debug('Token update!')\n          setTokens(getTokens(json.data))\n        } else if (json.type === 'board-update') {\n          logger.debug('Board UPDATE')\n          setTiles(getTiles(json.data.board.tiles))\n          setEscalators(getEscalators(json.data.board.escalators))\n          setWalls(getWalls(json.data.board.walls))\n          setTokens(getTokens(json.data.tokenData))\n          clearNotification()\n        } else if (json.type === 'win') {\n          notify(\"You have won the game!\", false, true)\n        } else if (json.type === 'movements') {\n          logger.debug(\"Setting movement\")\n          service.setMovements(json.data.movements)\n          setMoves(json.data.movements)\n        } else if (json.type === 'all-players') {\n          setAllPlayers(json.data)\n        } else if (json.type === 'do-something') {\n          notify(`${json.data.sender} wants you to do something.`, true, true)\n        } else if (json.type === 'timer-update') {\n          // probably can update in a different way \n          //date to finish makes this less chatty\n          //could have an interval here that counts down\n          //timer-update is sent only on time pickups and connections\n          setRemainingSeconds(json.data.seconds)\n        } else if (json.type === 'lose') {\n          notify(\"You have lost the game..\", false, false)\n        }\n      }\n    }\n    service.addHandler(handler)\n    async function initialConnect() {\n      await service.connect()\n      service.getInitialUpdate()\n    }\n    initialConnect()\n    setGameService(service)\n  },\n  [gameId])\n\n\n  const reset = (_) => {\n    gameService.reset()\n  }\n\n  const doSomething = (otherPlayerName) => {\n    gameService.doSomething(otherPlayerName)\n  }\n\n  const otherPlayers = allPlayers.filter(playerInfo => playerInfo.playerName !== realPlayerName)\n\n  return (\n    <div className=\"App\">\n      <Notification notification={notificationMessage} />\n      <div className=\"board-space\">\n        <div className=\"board-controls\">\n          <Timer remainingSeconds={remainingSeconds} />\n          <br />\n          <Moves playerName={realPlayerName} allowedMoves={allowedMoves} />\n          <br />\n          <h2 hidden={!otherPlayers.length}>Other Players:</h2>\n          {\n            otherPlayers.map(player => <OtherPlayer key={player.playerName}\n              playerName={player.playerName}\n              allowedMoves={player.moves}\n              isSelf={false}\n              doSomething={doSomething} />)\n          }\n          <button className='button' id='reset-button' onClick={reset}>Reset</button>\n        </div>\n        <Board grid={updatedTiles} tokens={tokens} escalators={escalators} walls={walls} gameService={gameService} />\n      </div>\n\n    </div >\n  );\n}\n\nexport default Game;\n","import React, { useRef } from 'react'\nimport {\n  useNavigate\n} from \"react-router-dom\"\nimport axios from 'axios';\nimport logger from '../services/logger'\n\nfunction Menu({playerName, setPlayerName}) {\n  const navigate = useNavigate();\n  const joinCodeRef = useRef(null)\n\n  const createGameClick = async () => {\n    const response = await axios.post('/games', {gameId: joinCodeRef.current.value});\n\n    logger.debug(response.data)\n    // The server responds with the id of the new user\n    const gameId = response.data.gameId;\n    logger.debug('Game Id response:' + gameId)\n    navigate(`/game/${gameId}`);\n  };\n\n  const joinGameClick = async () => {\n    const gameId = joinCodeRef.current.value\n    navigate(`/game/${gameId}`);\n  };\n\n  const handleNameChange = (event) => {\n    setPlayerName(event.target.value)\n  }\n\n  return (\n    <div className=\"menu\">\n      <h1>Magic Maze</h1>\n      <div className=\"menuSelections\">\n        <div className=\"menuRow\" >\n          <input type=\"text\" value={playerName} onChange={handleNameChange} placeholder='Nickname' className=\"inputText\" />\n        </div>\n        <div className=\"menuRow\" >\n        <input type=\"text\" ref={joinCodeRef} placeholder='Game Code' className=\"inputText\" />\n        </div>\n        <div className =\"menuRow\">\n          <button onClick={() => createGameClick()} className = \"button\" >Create</button>\n          <button onClick={joinGameClick} className = \"button\" >Join</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Menu;\n","import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './components/game';\nimport {\n  BrowserRouter as Router,\n  Routes, Route\n} from \"react-router-dom\"\nimport Menu from './components/menu';\n\n\nfunction App() {\n    const [playerName, setPlayerName] = useState('');\n  \n    return (\n    <Router>\n        <Routes>\n          <Route path=\"/game/:gameId\" element={<Game  realPlayerName = {playerName} />}/>\n          <Route path=\"/\" element={<Menu playerName={playerName} setPlayerName={setPlayerName}/>}/>\n         </Routes>\n      </Router>\n    );\n  }\n  \n  export default App;\nReactDOM.render(\n  <React.StrictMode>\n   \n   \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {\n  BrowserRouter as Router,\n  Routes, Route\n} from \"react-router-dom\"\nimport Menu from './components/menu';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}