{"version":3,"sources":["models/tile.js","models/token.js","models/gameState.js","models/coordinate.js","models/tileDirection.js","images/up.png","images/down.png","images/left.png","images/right.png","images/coins_new.png","images/timer.png","images/axe2.png","images/sword.png","images/arrows2.png","images/potion.png","models/item.js","components/item.js","images/green-portal.png","images/orange-portal.png","images/yellow-portal.png","images/purple-portal.png","components/tilePortal.js","images/s1.png","components/tileExit.js","images/rock.png","components/tileBarrier.js","components/tileNormal.js","components/tileConnect.js","components/tileUnknown.js","components/tile.js","images/dwarf_right.png","images/warrior2.png","images/elf_bow.png","images/mage.png","components/token.js","images/escalator_down.png","images/escalator_up.png","models/escalator.js","components/escalator.js","components/wall.js","components/board.js","services/logger.js","services/gameService.js","models/wallModel.js","components/moveIndicator.js","components/playerIndicator.js","components/moves.js","components/notification.js","components/toolbar.js","components/Timer.js","components/game.js","components/menu.js","App.js","index.js"],"names":["TileType","Tile","coord","type","hasItem","item","tokenType","this","TokenType","Token","id","selectedBy","escaped","GameStates","Coordinate","x","y","TileDirection","getTile","grid","length","ItemType","Item","itemImg","className","style","coinImg","timerImg","weapon","img","axe","color","sword","bow","potion","Error","getWeapon","backgroundColor","JSON","stringify","src","alt","Portal","tile","gameState","onTeleport","tileImg","orangePortal","purplePortal","yellowPortal","greenPortal","onClick","Exit","exit","Barrier","rockTile","NormalTile","Connect","getTileDirection","tileDirection","up","down","left","right","UnknownTile","content","tileCoord","gridColumnStart","gridRowStart","imgClass","token","onTokenSelected","dwarf","elf","warrior","mage","EscalatorOrientation","EscalatorModel","startCoord","endCoord","Math","min","abs","minX","getMinX","minY","getMinY","Escalator","escImg","escalator","onEscalate","rowStart","colStart","getOrientation","downImg","upImg","tileStyle","gridRow","getRowSpan","gridColumn","getColSpan","Wall","wall","wallStyle","getStartRow","getStartCol","zIndex","isHorizontal","borderTop","height","borderLeft","width","Board","tokens","escalators","walls","gameService","send","selected","teleport","escalatorId","escalate","onLeftBorder","onRightBorder","onTopBorder","onBottomBorder","getDirection","gridHeight","gridWidth","boardStyle","marginLeft","marginTop","overflow","display","gridTemplateColumns","gridTemplateRows","gap","onKeyPress","event","key","toLowerCase","moveDown","moveUp","moveLeft","moveRight","tabIndex","map","row","rowNum","colNum","toString","console","log","error","GameService","gameId","playerName","setMovements","movements","allowedMovements","sendBasicCommand","command","reset","sendMovement","doSomething","player","handlers","newHandler","filter","handler","push","Promise","resolve","reject","finalURL","window","location","host","connection","WebSocket","logger","onopen","onerror","onmessage","message","json","parse","data","e","handle","setInterval","readyState","messageObject","gameMessage","includes","WallModel","max","MoveIndicator","imgSrc","keyIcon","move","isSelf","OtherPlayer","allowedMoves","_","Moves","Notification","notification","isGood","Toolbar","remaining","Timer","remainingSeconds","getTimeStr","num","paddedString","substr","minutes","floor","seconds","getCoordinate","pos","parseInt","tileData","itemData","getTileType","getTiles","tiles","getTileRow","getTokens","tokenData","idx","selections","selection","find","split","join","getSelectedBy","Game","realPlayerName","useState","updatedTiles","setTiles","setEscalators","setWalls","setTokens","setMoves","allPlayers","setAllPlayers","notificationMessage","setNotificationMessage","setRemainingSeconds","setGameService","remainingSections","setRemainingSections","setGameState","clearNotification","useParams","useEffect","service","fade","board","start","end","getEscalators","getWalls","state","sender","setTimeout","a","connect","getInitialUpdate","addHandler","initialConnect","otherPlayerName","otherPlayers","playerInfo","hidden","moves","Menu","setPlayerName","navigate","useNavigate","joinCodeRef","useRef","createGameClick","axios","post","current","value","response","joinGameClick","onChange","target","placeholder","ref","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b1a51c68.chunk.js","sourcesContent":["let TileType = {\n    UNKNOWN: -1,\n    NORMAL: 1,\n    EXIT: 2,\n    WALL: 3,\n    CONNECT: 4,\n    PORTAL: 5\n}\n\nclass Tile {\n    constructor(coord, type, hasItem, item, tokenType) {\n        this.coord = coord\n        this.type = type\n        this.hasItem = hasItem\n        this.item = item\n        this.tokenType = tokenType\n    }\n}\n\nexport { Tile, TileType }\n","const TokenType = {\n    DWARF: 1,\n    MAGE: 2,\n    BARBARIAN: 3,\n    ELF: 4\n}\n\nclass Token {\n    constructor(id, coord, selectedBy, escaped, type) {\n        this.id = id\n        this.coord = coord\n        this.selectedBy = selectedBy\n        this.escaped = escaped\n        this.type = type\n    }\n}\n\nexport { Token, TokenType }","const GameStates = {\n    EXPLORE: 0,\n    STEAL: 1,\n    ESCAPE: 2,\n    LOSS: 3,\n    WIN: 4\n}\n\nexport { GameStates }","class Coordinate {\n    constructor(x, y) {\n        this.x = x\n        this.y = y\n    }\n\n    toString() {\n        return `(${this.x}, ${this.y})`\n    }\n}\n\nexport default Coordinate","import { TileType } from \"./tile\"\nimport Coordinate from \"./coordinate\"\n\nconst TileDirection = {\n    UP: 0,\n    DOWN: 1,\n    LEFT: 2,\n    RIGHT: 3,\n    UNKNOWN: 4\n}\n\nconst getTile  = (grid, coord) => {\n    if(coord.y < 0 || coord.y >= grid.length) {\n        return null\n    }\n    if(coord.x < 0 || coord.x >= grid[0].length) {\n        return null\n    }\n    return grid[coord.y][coord.x]\n}\n\nfunction getDirection(tile, grid) {\n    if(grid.length === 0 ) {\n        return TileDirection.UNKNOWN\n    }\n\n    const left = getTile(grid, new Coordinate(tile.coord.x - 1, tile.coord.y))\n    const right = getTile(grid, new Coordinate(tile.coord.x + 1, tile.coord.y))\n    const up = getTile(grid, new Coordinate(tile.coord.x, tile.coord.y - 1))\n    const down = getTile(grid, new Coordinate(tile.coord.x, tile.coord.y + 1))\n    const onLeftBorder = tile.coord.x === 0\n    const onRightBorder = tile.coord.x === grid[0].length - 1\n    const onTopBorder = tile.coord.y === 0\n    const onBottomBorder = tile.coord.y === grid.length - 1\n    if( onLeftBorder || (left && left.type === TileType.UNKNOWN)) {\n        return TileDirection.LEFT\n    } else if( onRightBorder || (right && right.type === TileType.UNKNOWN)) {\n        return TileDirection.RIGHT\n    } else if( onTopBorder || (up && up.type === TileType.UNKNOWN)) {\n        return TileDirection.UP\n    } else if( onBottomBorder || (down && down.type === TileType.UNKNOWN)) {\n        return TileDirection.DOWN\n    } else {\n        return TileDirection.UNKNOWN\n    }\n}\n\nexport { TileDirection, getDirection }\n","export default __webpack_public_path__ + \"static/media/up.552f859e.png\";","export default __webpack_public_path__ + \"static/media/down.40f8ab30.png\";","export default __webpack_public_path__ + \"static/media/left.aa0f5ff4.png\";","export default __webpack_public_path__ + \"static/media/right.9a984c67.png\";","export default __webpack_public_path__ + \"static/media/coins_new.2254d122.png\";","export default __webpack_public_path__ + \"static/media/timer.c21cbb42.png\";","export default __webpack_public_path__ + \"static/media/axe2.3337d039.png\";","export default __webpack_public_path__ + \"static/media/sword.003d0d39.png\";","export default __webpack_public_path__ + \"static/media/arrows2.6d27d5a7.png\";","export default __webpack_public_path__ + \"static/media/potion.dc85f7b3.png\";","let ItemType = {\n    COIN: 0,\n    TIMER: 1,\n    WEAPON: 2\n}\n\nclass Item {\n    constructor(type, tokenType) {\n        this.type = type\n        this.tokenType = tokenType\n    }\n}\n\nexport { Item, ItemType }","import React from 'react'\nimport coinImg from \"../images/coins_new.png\"\nimport timerImg from \"../images/timer.png\"\nimport axe from \"../images/axe2.png\"\nimport sword from \"../images/sword.png\"\nimport bow from \"../images/arrows2.png\"\nimport potion from \"../images/potion.png\"\nimport {ItemType} from \"../models/item\"\nimport {TokenType} from \"../models/token\"\n\nconst getWeapon = ( item ) => {\n    switch(item.tokenType) {\n        case TokenType.DWARF:\n            return {\n                img: axe,\n                color: 'orange'\n            }\n        case TokenType.BARBARIAN:\n            return {\n                img: sword,\n                color: 'yellow'\n            }\n        case TokenType.ELF:\n            return {\n                img: bow,\n                color: 'green'\n            }\n        case TokenType.MAGE:\n            return {\n                img: potion,\n                color: 'purple'\n            }\n        default:\n            throw new Error( \"Invalid token type\" )\n    }\n}\n    \nconst Item = ({item}) => {\n    let itemImg\n    let className = 'item'\n    let style = {}\n    switch(item.type) {\n        case ItemType.COIN:\n            itemImg = coinImg\n            className += ' coin'\n            break;\n        case ItemType.TIMER:\n            itemImg = timerImg\n            className += ' time'\n            break;\n        case ItemType.WEAPON:\n            const weapon = getWeapon(item)\n            itemImg = weapon.img\n            className += ' weapon'\n            style.backgroundColor = weapon.color\n            break\n        default:\n            throw new Error('Unknown item type: ' + JSON.stringify(item))\n    }\n\n\n    return (\n        <div className={className} style={style} >\n            <img src={itemImg} alt='item' />\n        </div>\n    )\n}\n\nexport default Item","export default __webpack_public_path__ + \"static/media/green-portal.e3d54e5f.png\";","export default __webpack_public_path__ + \"static/media/orange-portal.e0a89eb5.png\";","export default __webpack_public_path__ + \"static/media/yellow-portal.f832ee4b.png\";","export default __webpack_public_path__ + \"static/media/purple-portal.f9f584fe.png\";","import { TokenType } from \"../models/token\"\nimport {GameStates} from \"../models/gameState\"\n\nimport greenPortal from \"../images/green-portal.png\"\nimport orangePortal from \"../images/orange-portal.png\"\nimport yellowPortal from \"../images/yellow-portal.png\"\nimport purplePortal from \"../images/purple-portal.png\"\n\nimport NormalTile from \"./tileNormal\"\n\nconst Portal = ({tile, gameState, onTeleport }) => {\n    const show = gameState === GameStates.EXPLORE || gameState === GameStates.STEAL\n    if(!show) {\n        return (<NormalTile tile = {tile}/>)\n    }\n    let className = 'tile-portal'\n    let tileImg\n\n    switch(tile.tokenType) {\n        case TokenType.DWARF:\n            tileImg = orangePortal\n            break;\n        case TokenType.MAGE:\n            tileImg = purplePortal\n            break;\n        case TokenType.BARBARIAN:\n            tileImg = yellowPortal\n            break;\n        case TokenType.ELF:\n            tileImg = greenPortal\n            break;\n        default:\n            throw new Error('Unknown token type')\n    }\n\n    const handleClick = () => {\n        onTeleport(tile.coord)\n    }\n\n    return (\n        <div className={className}>\n            <img src={tileImg} className=\"tile-image\" onClick={handleClick} alt='' /> \n        </div>\n    )\n}\n\nexport default Portal","export default __webpack_public_path__ + \"static/media/s1.cd3f2f2d.png\";","import { TokenType } from \"../models/token\"\n\nimport exit from \"../images/s1.png\"\n\nconst Exit = ({tile, gameState }) => {\n    let className = 'tile-exit'\n    const tileImg = exit\n    switch(tile.tokenType) {\n        case TokenType.DWARF:\n            className += ' exit-dwarf'\n            break;\n        case TokenType.MAGE:\n            className += ' exit-mage'\n            break;\n        case TokenType.BARBARIAN:\n            className += ' exit-barbarian'\n            break;\n        case TokenType.ELF:\n            className += ' exit-elf'\n            break;\n        default:\n            throw new Error('Unknown token type')\n    }\n\n    return (\n        <div className={className}>\n            <img src={tileImg} className=\"tile-image\"  alt='' /> \n        </div>\n    )\n}\n\nexport default Exit","export default __webpack_public_path__ + \"static/media/rock.3d4d808c.png\";","import rockTile from \"../images/rock.png\"\n\nconst Barrier = () => {\n    let className = 'tile-exit'\n    const tileImg = rockTile\n    className = 'tile-wall'\n\n    return (\n        <div className={className}>\n            <img src={tileImg} className=\"tile-image\"  alt='' /> \n        </div>\n    )\n}\n\nexport default Barrier","import { TileType } from \"../models/tile\"\nimport { TokenType } from \"../models/token\"\n\nimport Item from \"./item\"\nimport Connect from \"./tileConnect\"\nimport Portal from \"./tilePortal\"\nimport Exit from \"./tileExit\"\nimport Barrier from \"./tileBarrier\"\n\n\nconst NormalTile = ({tile }) => {\n    let className = 'tile'\n    return (\n        <div className={className}>\n            { tile.hasItem ? <Item item={tile.item}/> : null}\n        </div>\n       \n    )\n}\n\nexport default NormalTile","\nimport { TokenType } from \"../models/token\"\nimport { GameStates } from \"../models/gameState\"\nimport { TileDirection } from \"../models/tileDirection\"\n\nimport up from \"../images/up.png\"\nimport down from \"../images/down.png\"\nimport left from \"../images/left.png\"\nimport right from \"../images/right.png\"\n\nimport NormalTile from \"./tileNormal\"\n\n\nconst Connect = ({tile, getTileDirection, gameState }) => {\n    let className = 'tile-connect'\n    let tileImg\n    const tileDirection = getTileDirection(tile)\n    const show = tileDirection !== TileDirection.UNKNOWN && gameState === GameStates.EXPLORE\n\n    if(!show) {\n        return (<NormalTile tile = {tile}/>)\n    }\n    switch(tileDirection) {\n        case TileDirection.UP:\n            tileImg = up\n            break\n        case TileDirection.DOWN:\n            tileImg = down\n            break\n        case TileDirection.LEFT:\n            tileImg = left\n            break\n        case TileDirection.RIGHT:\n            tileImg = right\n            break\n        default:\n            //do nothing\n    }\n    switch(tile.tokenType) {\n        case TokenType.DWARF:\n            className += ' connect-dwarf'\n            break;\n        case TokenType.MAGE:\n            className += ' connect-mage'\n            break;\n        case TokenType.BARBARIAN:\n            className += ' connect-barbarian'\n            break;\n        case TokenType.ELF:\n            className += ' connect-elf'\n            break;\n        default:\n            throw new Error('Unknown token type')\n    }\n\n\n    //temporary hack, when the tile direction is unknown the connection point must be connected\n\n    return (\n         <div className={className}>\n            <img src={tileImg} className=\"tile-image\"  alt='' />\n        </div>    \n    )\n}\n\nexport default Connect","const UnknownTile = () => {\n    const className = 'tile-unknown'\n    return (\n        <div className={className}>\n        </div>\n    )\n}\n\nexport default UnknownTile","import { TileType } from \"../models/tile\"\n\nimport Connect from \"./tileConnect\"\nimport Portal from \"./tilePortal\"\nimport Exit from \"./tileExit\"\nimport Barrier from \"./tileBarrier\"\nimport NormalTile from \"./tileNormal\"\nimport UnknownTile from \"./tileUnknown\"\n\n\nconst Tile = ({tile, onTeleport, getTileDirection, gameState }) => {\n    let content\n    switch (tile.type) {\n        case TileType.EXIT:\n            content = <Exit tile={tile} gameState={gameState} />\n            break\n        case TileType.WALL:\n            content = <Barrier/>\n            break\n        case TileType.UNKNOWN:\n            content = <UnknownTile />\n            break\n        case TileType.CONNECT:\n            content = <Connect tile={tile} gameState={gameState} getTileDirection={getTileDirection} />\n            break\n        case TileType.PORTAL:\n            content = <Portal tile={tile} gameState={gameState} onTeleport={onTeleport}/>\n            break\n        case TileType.NORMAL:\n            content = <NormalTile tile={tile}/>\n            break\n        default:\n            throw new Error(\"Invalid tile type\")\n    }\n\n    const tileStyle = (tileCoord) => {\n        const style =  {\n        gridColumnStart: `${tileCoord.x + 1}`,\n        gridRowStart: `${tileCoord.y + 1}`,\n     }\n     return style\n    }\n\n    return (\n        <div className='tile-container' style={tileStyle(tile.coord)}>\n            { content }\n           \n        </div>\n       \n    )\n}\n\nexport default Tile","export default __webpack_public_path__ + \"static/media/dwarf_right.3de0ca4b.png\";","export default __webpack_public_path__ + \"static/media/warrior2.a0cb9f8d.png\";","export default __webpack_public_path__ + \"static/media/elf_bow.93f90f79.png\";","export default __webpack_public_path__ + \"static/media/mage.23ebe66e.png\";","import React from 'react'\nimport dwarf from \"../images/dwarf_right.png\"\nimport warrior from \"../images/warrior2.png\"\nimport elf from \"../images/elf_bow.png\"\nimport mage from \"../images/mage.png\"\nimport { TokenType } from \"../models/token\"\n\nconst Token = ({ token, onTokenSelected}) => {\n    if(!token || token.escaped ) {\n        return ''\n    }\n\n    let imgClass\n    if (token.selectedBy) {\n        imgClass = 'token-selected'\n    } else if (!token.selectedBy) {\n        imgClass = 'token'\n    }\n\n    let img\n    switch(token.type) {\n        case TokenType.DWARF:\n            img = dwarf\n            imgClass += \" token-dwarf\"\n            break;\n        case TokenType.ELF:\n            img = elf\n            imgClass += \" token-elf\"\n            break;\n        case TokenType.BARBARIAN:\n            img = warrior\n            imgClass += \" token-barbarian\"\n            break;\n        case TokenType.MAGE:\n            img = mage\n            imgClass += \" token-mage\"\n            break;\n        default:\n            throw new Error(\"Unknown token type\")\n    }\n    \n    const onClick = () => {\n        if (token) {\n            onTokenSelected(token)\n        }\n    }\n\n    const tileStyle = (tileCoord) => {\n        const style =  {\n        gridColumnStart: `${tileCoord.x + 1}`,\n        gridRowStart: `${tileCoord.y + 1}`,\n     }\n     return style\n    }\n\n\n\n    return (\n        <div className={imgClass} style={tileStyle(token.coord)} onClick={onClick}>\n            <img src={img} alt='token' />\n        </div>\n    )\n}\n\nexport default Token","export default __webpack_public_path__ + \"static/media/escalator_down.03b0327b.png\";","export default __webpack_public_path__ + \"static/media/escalator_up.671e7897.png\";","const EscalatorOrientation = {\n    DOWN: 0,\n    UP: 1\n}\n\nclass EscalatorModel {\n    constructor(id, startCoord, endCoord) {\n        this.id = id\n        this.startCoord = startCoord\n        this.endCoord = endCoord\n    }\n\n    getMinX() {\n        return Math.min(this.startCoord.x, this.endCoord.x)\n    }\n\n    getMinY() {\n        return Math.min(this.startCoord.y, this.endCoord.y)\n    }\n\n    getRowSpan() {\n        return Math.abs(this.startCoord.y - this.endCoord.y) + 1\n    }\n\n    getColSpan() {\n       return Math.abs(this.startCoord.x - this.endCoord.x) + 1\n    }\n\n    getOrientation() {\n        const minX = this.getMinX()\n        const minY = this.getMinY()\n        if( (minX === this.startCoord.x && minY === this.startCoord.y) \n            || (minX === this.endCoord.x && minY === this.endCoord.y )) {\n            return EscalatorOrientation.DOWN\n        } else {\n            return EscalatorOrientation.UP\n        }\n    }\n}\n\nexport { EscalatorModel, EscalatorOrientation }","import downImg from \"../images/escalator_down.png\"\nimport upImg from \"../images/escalator_up.png\"\nimport {EscalatorOrientation} from '../models/escalator'\n\nconst Escalator = ({ escalator, onEscalate }) => {\n    const rowStart = escalator.getMinY() + 1\n    const colStart = escalator.getMinX() + 1\n    let escImg\n    switch(escalator.getOrientation()) {\n        case EscalatorOrientation.DOWN:\n            escImg = downImg\n            break;\n        case EscalatorOrientation.UP:\n            escImg = upImg\n            break;\n        default:\n            throw new Error (\"Invalid Orientation\")\n    }\n\n    const tileStyle = {\n        gridRow: `${rowStart} / span ${escalator.getRowSpan()}`,\n        gridColumn: `${colStart} / span ${escalator.getColSpan()}`,\n    }\n\n    const handleClick = () => {\n        onEscalate(escalator.id)\n    }\n\n    return (\n        < div className = 'escalator' style = {tileStyle} >\n            <img className = 'escalator-img' src={escImg} onClick={handleClick} alt='escalator' />\n        </div>\n    )\n}\n\nexport default Escalator","\nconst Wall = ( {wall}) => {\n    const wallStyle = {\n        gridRow: `${wall.getStartRow()} / span ${wall.getRowSpan()}`,\n        gridColumn: `${wall.getStartCol()} / span ${wall.getColSpan()}`,\n        zIndex: 1\n    }\n\n    if(wall.isHorizontal()) {\n        wallStyle.borderTop = '10px solid #000000'\n        wallStyle.height ='0px'\n    } else {\n        wallStyle.borderLeft = '10px solid #000000'\n        wallStyle.width = '0px'\n    }\n\n    return (\n        < div className = 'wall' style = {wallStyle} >\n        </div>\n    )\n}\n\nexport default Wall","import React from 'react'\nimport Tile from './tile'\nimport { getDirection } from '../models/tileDirection'\nimport Token  from './token'\nimport Escalator from './escalator'\nimport Wall from './wall'\n\nconst Board = ({ gameState, grid, tokens, escalators, walls, gameService }) => {\n    const handleKeyPress = (event) => {\n        if (event.key.toLowerCase() === 's') {\n            gameService.moveDown()\n        } else if (event.key.toLowerCase() === 'w') {\n            gameService.moveUp()\n        } else if (event.key.toLowerCase() === 'a') {\n            gameService.moveLeft()\n        } else if (event.key.toLowerCase() === 'd') {\n            gameService.moveRight()\n        }\n    }\n\n    const onTokenSelected = (token) => {\n        //sends with token.id (Where does this come from? is it always populated correctly?)\n        gameService.send(JSON.stringify(\n            {\n                type: \"SELECTED\",\n                selected: token.id\n            }\n        ))\n    }\n\n    const onTeleport = (coord) => {\n        gameService.teleport(coord)\n    }\n\n    const onEscalate = (escalatorId) => {\n        gameService.escalate(escalatorId)\n    }\n\n    const getTileDirection = (tile) => {\n        return getDirection(tile, grid)\n    }\n\n    const gridHeight = grid.length\n\n    const gridWidth = grid.length === 0 ? 0 : grid[0].length\n\n    const boardStyle = {\n        marginLeft: '36px',\n        marginTop: '36px',\n        overflow: 'auto',\n        display: 'grid',\n        gridTemplateColumns: `repeat(${gridWidth}, 64px)`,\n        gridTemplateRows: `repeat(${gridHeight}, 64px)`,\n        gap: '0px'\n     } \n\n    return (\n        <div className=\"game-board\" style= {boardStyle} onKeyPress={handleKeyPress} tabIndex={0}>\n            {\n                grid.map((row, rowNum) =>\n                        row.map((tile, colNum) =>\n                            <Tile key={tile.coord.toString()} tile = {tile} onTeleport={onTeleport} getTileDirection={getTileDirection} gameState={gameState} />\n                        )\n                )}\n            {\n                escalators.map( (escalator) => <Escalator escalator={escalator} onEscalate={onEscalate}/>)\n            }\n            {\n                tokens.map( (token) => <Token token={token} onTokenSelected={onTokenSelected}/>)\n            }\n            {\n                walls.map( (wall) => <Wall wall={wall}/>  )\n            }     \n        </div>\n    )\n}\n\nexport default Board","const debug = (...params) => {\n    //console.log(...params)\n}\n\nconst info = (...params) => {\n    console.log(...params)\n}\n\nconst warn = (...params) => {\n    console.log(...params)\n}\nconst error = (...params) => {\n    console.error(...params)\n}\n\nexport default {\n    debug,\n    info,\n    warn,\n    error\n}","import logger from './logger'\n\nclass GameService {\n\n    constructor(gameId, playerName) {\n        this.handlers = []\n        this.gameId = gameId\n        this.playerName = playerName\n        this.allowedMovements = []\n    }\n\n    addHandler(newHandler) {\n        this.handlers = this.handlers.filter(handler => handler.id !== newHandler.id)\n        this.handlers.push(newHandler)\n    }\n\n    connect() {\n        return new Promise((resolve, reject) => {\n            let websocketURL = process.env.NODE_ENV === 'development' ? 'ws://127.0.0.1:3001' : 'wss://' + window.location.host\n            let finalURL = websocketURL+`?playerName=${this.playerName}`\n            this.connection = new WebSocket(finalURL)\n            logger.debug(\"Connecting to:\" + finalURL)\n            this.connection.onopen = () => {\n                resolve()\n            }\n            this.connection.onerror = (error) => {\n                logger.error(error)\n                logger.error('Sorry, but there\\'s some problem with your '\n                    + 'connection or the server is down.')\n                    reject(error)\n            }\n            \n            // most important part - incoming messages\n            this.connection.onmessage = (message) => {\n                try {\n                    var json = JSON.parse(message.data);\n                } catch (e) {\n                   logger.error('Invalid JSON: ', message.data);\n                    return\n                }\n            \n                if(json.gameId && json.gameId !== this.gameId) {\n                    logger.warn('Sent message for different game')\n                    return\n                }\n\n                for (let handler of this.handlers) {\n                    handler.handle(json)\n                }\n            }\n            setInterval(() => {\n                if (this.connection.readyState !== 1) {\n                    logger.error('Error missing connection');\n                }\n            }, 3000);\n          });\n       \n    }\n\n    getInitialUpdate() { \n        this.sendBasicCommand('INITIAL')\n    }\n\n    send(message) {\n        let messageObject = JSON.parse(message)\n        messageObject.gameId = this.gameId\n        let gameMessage = JSON.stringify(messageObject)\n\n        logger.debug(\"SEND: \" + gameMessage)\n        this.connection.send(gameMessage)\n    }\n\n    setMovements = (movements) => {\n        this.allowedMovements = movements\n    }\n    \n    sendBasicCommand = (command) => {\n        this.send(JSON.stringify(\n            {\n                type: command\n            }\n        ))\n    }\n    \n    sendMovement(command){\n        if (!this.allowedMovements.includes(command)) {\n            return\n        }\n        this.sendBasicCommand(command)\n    }\n    \n    reset = () => {\n        this.sendBasicCommand('RESET')\n    }\n    \n    moveRight = () => {\n       this.sendMovement('RIGHT')\n    }\n    \n    moveLeft = () => {\n        this.sendMovement('LEFT')\n    }\n    \n    moveDown = () => {\n        this.sendMovement('DOWN')\n    }\n    \n    moveUp = () => {\n        this.sendMovement('UP')\n    }\n    \n    doSomething = (playerName) => {\n        this.send(JSON.stringify(\n            {\n                type: 'DO-SOMETHING',\n                player: playerName\n            }\n        ))\n    }\n\n    teleport = (coord) => {\n        this.send(JSON.stringify(\n            {\n                type: \"TELEPORT\",\n                coord: coord\n            }\n        ))\n    }\n\n    escalate = (escalatorId) => {\n        this.send(JSON.stringify(\n            {\n                type: \"ESCALATE\",\n                id: escalatorId\n            }\n        ))\n    }\n\n\n}\n\nexport default GameService","class WallModel {\n    constructor(startCoord, endCoord) {\n        this.startCoord = startCoord\n        this.endCoord = endCoord\n    }\n\n    getStartRow() {\n        return Math.min(this.startCoord.y, this.endCoord.y) + 1\n    }\n\n    getStartCol() {\n        return Math.min(this.startCoord.x, this.endCoord.x) + 1\n    }\n\n    getRowSpan() {\n        return Math.max(1, Math.abs(this.startCoord.y - this.endCoord.y))\n    }\n\n    getColSpan() {\n        return Math.max(1, Math.abs(this.startCoord.x - this.endCoord.x))\n    }\n\n    isHorizontal() {\n        return this.startCoord.y === this.endCoord.y\n    }\n}\n\nexport { WallModel }","import up from \"../images/up.png\"\nimport down from \"../images/down.png\"\nimport left from \"../images/left.png\"\nimport right from \"../images/right.png\"\nconst MoveIndicator = ({ move, isSelf }) => {\n    let imgSrc\n    let keyIcon\n    if(move === 'LEFT') {\n        imgSrc = left\n        keyIcon = 'A'\n    } else if(move ==='RIGHT') {\n        imgSrc = right\n        keyIcon = 'D'\n    } else if(move ==='UP') {\n        imgSrc = up\n        keyIcon = 'W'\n    } else if(move ==='DOWN') {\n        imgSrc = down\n        keyIcon = 'S'\n    } else {\n        console.log(\"Fail, move: \" + move)\n    }\n    return (\n        < div className ='move-icon'>\n           <img src={imgSrc} alt='move' />\n           {isSelf ? <span>{keyIcon}</span> : \"\"}\n        </div>\n    )\n}\n\nexport default MoveIndicator","import MoveIndicator from './moveIndicator'\n\nconst OtherPlayer = ({ playerName, allowedMoves, doSomething }) => {\n\n    const onClickDoSomething = (_) => {\n        doSomething(playerName)\n    }\n    return (\n        < div className='player-other'>\n            <div className='player-bar'>\n                <label>{playerName}</label>\n                {\n                    allowedMoves.map(move =>  <MoveIndicator key={move} move={move} isSelf={false}></MoveIndicator>)\n                }\n                <button className='doSomethingButton' onClick={onClickDoSomething}>!</button>\n                \n            </div>\n        </div>\n    )\n}\n\nexport default OtherPlayer","import MoveIndicator from './moveIndicator'\n\nconst Moves = ({ playerName, allowedMoves }) => {\n\n    return (\n        < div className='player-self'>\n            <span id='mainPlayer'>{playerName}</span>\n            <h2>Moves</h2>\n            <div className = 'player-moves' >\n                {\n                    allowedMoves.map(move =>  <MoveIndicator key={move} move={move} isSelf={true}></MoveIndicator>)\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default Moves","import React from 'react'\n\nconst Notification = ({ notification }) => {\n    if (notification === null) {\n        return null\n    }\n\n    return (\n        <div className={notification.isGood ? 'notification' : 'notification-bad'}>\n            {notification.message}\n        </div>\n    )\n}\n\nexport default Notification","import React from 'react'\nimport { GameStates } from \"../models/gameState\"\n\nconst Toolbar = ({ gameState, remaining }) => {\n\n    let message = \"\"\n    if(gameState !== null) {\n        switch(gameState) {\n            case GameStates.EXPLORE:\n                console.log('Exploring!')\n                message = \"Explore the maze! Remaining: \" + remaining\n                break\n            case GameStates.STEAL:\n                message = \"Steal the weapons!\"\n                break\n            case GameStates.ESCAPE:\n                message = \"Escape the Maze!\"\n                break\n            case GameStates.LOSS:\n                message = \"Game Over\"\n                break\n            case GameStates.WIN:\n                message = \"Win!\"\n                break\n            default:\n                throw new Error(\"Invalid game state\")\n        }\n    }\n    \n\n    return (\n        <div className='toolbar'>\n            {message}\n        </div>\n    )\n}\n\nexport default Toolbar","import React from 'react'\n\nconst Timer = ({ remainingSeconds }) => {\n    if (!remainingSeconds) {\n        return \"\"\n    }\n    const getTimeStr = (num) => {\n        const paddedString = \"00\" + num\n        return paddedString.substr(paddedString.length - 2)\n    }\n    const minutes = getTimeStr(Math.floor(remainingSeconds / 60))\n    const seconds = getTimeStr(remainingSeconds % 60)\n\n    const criticalTime = 10\n    const className = remainingSeconds > criticalTime ? 'timer' : 'timer-critical'\n    return (\n        <div className={className}>\n            {`${minutes}:${seconds}`}\n        </div>\n    )\n}\n\nexport default Timer","import '../App.css'\nimport React, { useState, useEffect } from 'react'\nimport Board from './board'\nimport GameService from '../services/gameService'\nimport logger from '../services/logger'\nimport Coordinate from '../models/coordinate'\nimport {GameStates} from '../models/gameState'\nimport {EscalatorModel} from '../models/escalator'\nimport {WallModel} from '../models/wallModel'\nimport { Tile, TileType } from '../models/tile'\nimport { Item } from '../models/item'\nimport { Token } from '../models/token'\nimport OtherPlayer from './playerIndicator'\nimport Moves from './moves'\nimport Notification from './notification'\nimport Toolbar from './toolbar'\nimport Timer from './Timer'\nimport { useParams } from 'react-router-dom'\n\n\nconst getCoordinate = (pos) => {\n  const x = parseInt(pos.x)\n  const y = parseInt(pos.y)\n  return new Coordinate(x, y)\n}\n\nconst getTileType = (type) => {\n  switch(type) {\n    case 0:\n      return TileType.NORMAL\n    case 1:\n      return TileType.WALL\n    case 2:\n      return TileType.EXIT\n    case 3:\n      return TileType.CONNECT\n    case 4:\n      return TileType.PORTAL\n    default:\n      return TileType.UNKNOWN\n  }\n}\n\nconst getTile = (tileData) => {\n  const itemData = tileData.item\n  let item\n  if(itemData) {\n    item = new Item(itemData.type, itemData.tokenType)\n  }\n\n  return new Tile(getCoordinate(tileData.pos), \n  getTileType(tileData.type), \n  tileData.hasItem, \n  item,\n  tileData.tokenType)\n}\n\nconst getTileRow = (row) => {\n  return row.map(tileData => getTile(tileData))\n}\n\nconst getTiles = (tiles) => {\n  const grid = tiles.map( row => getTileRow(row))\n  return grid\n}\n\nconst getEscalators = (escalators) => {\n  return escalators.map( escalator => new EscalatorModel(escalator.id, getCoordinate(escalator.start), getCoordinate(escalator.end)))\n}\n\nconst getWalls = (walls) => {\n  return walls.map( wall => new WallModel(getCoordinate(wall.start), getCoordinate(wall.end)))\n}\n\nconst getInitials = (str) => {\n  const split = str.split(\" \")\n  return split.map(substr => substr[0]).join('')\n}\n\nconst getSelectedBy = (selections, idx) => {\n  let selection = selections.find(selection => selection.selection === idx)\n  if (selection) {\n    return getInitials(selection.selectedBy)\n  }\n  return null\n}\n\nconst getTokens = (data) => {\n  const newTokens = data.tokens.map((tokenData, idx) =>\n  new Token(idx,\n    getCoordinate(tokenData.pos),\n    getSelectedBy(data.selections, idx),\n    tokenData.escaped,\n    tokenData.type))\n  return newTokens\n}\n\nfunction Game({realPlayerName}) {\n  const [updatedTiles, setTiles] = useState([[]])\n  const [escalators, setEscalators] = useState([])\n  const [walls, setWalls] = useState([])\n  const [tokens, setTokens] = useState([])\n  const [allowedMoves, setMoves] = useState([])\n  const [allPlayers, setAllPlayers] = useState([])\n  const [notificationMessage, setNotificationMessage] = useState(null)\n  const [remainingSeconds, setRemainingSeconds] = useState(null)\n  const [gameService, setGameService] = useState(null)\n  const [remainingSections, setRemainingSections] = useState(0)\n  const [gameState, setGameState] = useState(null)\n\n  const clearNotification = () => {\n    setNotificationMessage(null)\n  }\n  let { gameId } = useParams();\n  useEffect(() => {\n    let service = new GameService(gameId, realPlayerName)\n    const notify = (message, fade, isGood) => {\n      setNotificationMessage({\n        message: message,\n        isGood: isGood\n      })\n      if (!fade) {\n        return\n      }\n      setTimeout(() => {\n        clearNotification()\n      }, 5000)\n    }\n\n    let handler = {\n      id: 'app-updates',\n      handle: (json) => {\n        if (json.type === 'token-update') {\n          logger.debug('Token update!')\n          setTokens(getTokens(json.data))\n        } else if (json.type === 'board-update') {\n          logger.debug('Board UPDATE')\n          setTiles(getTiles(json.data.board.tiles))\n          setEscalators(getEscalators(json.data.board.escalators))\n          setWalls(getWalls(json.data.board.walls))\n          setTokens(getTokens(json.data.tokenData))\n          setRemainingSections(json.data.remainingSections)\n          console.log(json.data.state)\n          setGameState(json.data.state)\n          clearNotification()\n        } else if (json.type === 'win') {\n          setGameState(GameStates.WIN)\n        } else if (json.type === 'movements') {\n          logger.debug(\"Setting movement\")\n          service.setMovements(json.data.movements)\n          setMoves(json.data.movements)\n        } else if (json.type === 'all-players') {\n          setAllPlayers(json.data)\n        } else if (json.type === 'do-something') {\n          notify(`${json.data.sender} wants you to do something.`, true, true)\n        } else if (json.type === 'timer-update') {\n          // probably can update in a different way \n          //date to finish makes this less chatty\n          //could have an interval here that counts down\n          //timer-update is sent only on time pickups and connections\n          setRemainingSeconds(json.data.seconds)\n        } else if (json.type === 'lose') {\n          setGameState(GameStates.LOSS)\n        }\n      }\n    }\n    service.addHandler(handler)\n    async function initialConnect() {\n      await service.connect()\n      service.getInitialUpdate()\n    }\n    initialConnect()\n    setGameService(service)\n  },\n  [gameId])\n\n\n  const reset = (_) => {\n    gameService.reset()\n  }\n\n  const doSomething = (otherPlayerName) => {\n    gameService.doSomething(otherPlayerName)\n  }\n\n  const otherPlayers = allPlayers.filter(playerInfo => playerInfo.playerName !== realPlayerName)\n  const showConnections = remainingSections !== 0\n  return (\n    <div className=\"App\">\n      <Notification notification={notificationMessage} />\n      <div className=\"board-space\">\n        <Toolbar gameState={gameState} remaining={remainingSections}/>\n        <div className=\"board-controls\">\n          <Timer remainingSeconds={remainingSeconds} />\n          <br />\n          <Moves playerName={realPlayerName} allowedMoves={allowedMoves} />\n          <br />\n          <h2 hidden={!otherPlayers.length}>Other Players:</h2>\n          {\n            otherPlayers.map(player => <OtherPlayer key={player.playerName}\n              playerName={player.playerName}\n              allowedMoves={player.moves}\n              isSelf={false}\n              doSomething={doSomething} />)\n          }\n          <button className='button' id='reset-button' onClick={reset}>Reset</button>\n        </div>\n        <Board gameState={gameState} grid={updatedTiles} tokens={tokens} escalators={escalators} walls={walls} gameService={gameService} />\n      </div>\n\n    </div >\n  );\n}\n\nexport default Game;\n","import React, { useRef } from 'react'\nimport {\n  useNavigate\n} from \"react-router-dom\"\nimport axios from 'axios';\nimport logger from '../services/logger'\n\nfunction Menu({playerName, setPlayerName}) {\n  const navigate = useNavigate();\n  const joinCodeRef = useRef(null)\n\n  const createGameClick = async () => {\n    const response = await axios.post('/games', {gameId: joinCodeRef.current.value});\n\n    logger.debug(response.data)\n    // The server responds with the id of the new user\n    const gameId = response.data.gameId;\n    logger.debug('Game Id response:' + gameId)\n    navigate(`/game/${gameId}`);\n  };\n\n  const joinGameClick = async () => {\n    const gameId = joinCodeRef.current.value\n    navigate(`/game/${gameId}`);\n  };\n\n  const handleNameChange = (event) => {\n    setPlayerName(event.target.value)\n  }\n\n  return (\n    <div className=\"menu\">\n      <h1>Magic Maze</h1>\n      <div className=\"menuSelections\">\n        <div className=\"menuRow\" >\n          <input type=\"text\" value={playerName} onChange={handleNameChange} placeholder='Nickname' className=\"inputText\" />\n        </div>\n        <div className=\"menuRow\" >\n        <input type=\"text\" ref={joinCodeRef} placeholder='Game Code' className=\"inputText\" />\n        </div>\n        <div className =\"menuRow\">\n          <button onClick={() => createGameClick()} className = \"button\" >Create</button>\n          <button onClick={joinGameClick} className = \"button\" >Join</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Menu;\n","import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './components/game';\nimport {\n  BrowserRouter as Router,\n  Routes, Route\n} from \"react-router-dom\"\nimport Menu from './components/menu';\n\n\nfunction App() {\n    const [playerName, setPlayerName] = useState('');\n  \n    return (\n    <Router>\n        <Routes>\n          <Route path=\"/game/:gameId\" element={<Game  realPlayerName = {playerName} />}/>\n          <Route path=\"/\" element={<Menu playerName={playerName} setPlayerName={setPlayerName}/>}/>\n         </Routes>\n      </Router>\n    );\n  }\n  \n  export default App;\nReactDOM.render(\n  <React.StrictMode>\n   \n   \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {\n  BrowserRouter as Router,\n  Routes, Route\n} from \"react-router-dom\"\nimport Menu from './components/menu';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}