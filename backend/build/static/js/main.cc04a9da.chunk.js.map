{"version":3,"sources":["models/tile.js","components/tile.js","services/game.js","components/board.js","models/coordinate.js","models/token.js","components/moveIndicator.js","components/playerIndicator.js","components/notification.js","components/Timer.js","App.js","index.js"],"names":["TileType","Tile","coord","type","this","className","content","token","onTokenSelected","isSelected","selectedBy","onClick","websocketURL","window","location","host","connection","WebSocket","onopen","console","log","handlers","allowedMovements","onerror","error","onmessage","message","json","JSON","parse","data","e","handle","setInterval","readyState","send","sendBasicCommand","command","stringify","sendMovement","includes","movements","playerName","player","newHandler","filter","handler","id","push","Board","grid","tokens","gameService","selected","onKeyPress","event","key","tabIndex","map","row","rowNum","tile","colNum","tileCoord","find","isEqual","toString","Coordinate","x","y","Token","MoveIndicator","moves","isSelf","heading","move","PlayerIndicator","allowedMoves","doSomething","_","Notification","notification","isGood","Timer","remainingSeconds","getTimeStr","num","paddedString","substr","length","minutes","Math","floor","seconds","getCoordinate","pos","parseInt","getTokens","idx","selectedTokens","some","selections","selection","split","join","getSelectedBy","App","useState","updatedTiles","setTiles","setTokens","setMoves","setPlayerName","otherPlayers","setOtherPlayers","notificationMessage","setNotificationMessage","setRemainingSeconds","clearNotification","notify","fade","setTimeout","initData","board","exits","exitPos","walls","wallPos","allTiles","tiles","tilePos","height","currPos","wall","width","getTiles","tokenData","name","playerInfo","sender","hidden","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc04a9da.chunk.js","sourcesContent":["let TileType = {\n    NORMAL: 1,\n    EXIT: 2,\n    WALL: 3,\n    UNKNOWN: 4\n}\n\nclass Tile {\n    constructor(coord, type) {\n        this.coord = coord\n        this.type = type\n    }\n}\n\nexport { Tile, TileType }\n","import { TileType } from \"../models/tile\"\n\nconst Tile = ({ token, type, onTokenSelected }) => {\n    let className\n    let content\n\n    if (token && token.isSelected) {\n        className = 'token-selected'\n        content = token.selectedBy\n    } else if (token && !token.isSelected) {\n        className = 'token'\n    } else if (type === TileType.EXIT) {\n        className = 'tile-exit'\n    } else if (type === TileType.WALL) {\n        className = 'tile-wall'\n    } else if (type === TileType.UNKNOWN) {\n        className = 'tile-unknown'\n    } else {\n        className = 'tile'\n    }\n\n    const onClick = () => {\n        if (token) {\n            onTokenSelected(token)\n        }\n    }\n\n    return (\n        <div className={className} onClick={onClick}>\n            {content}\n        </div>\n    )\n}\n\nexport default Tile","// open connection\nlet websocketURL = process.env.NODE_ENV === 'development' ? 'ws://127.0.0.1:3001' : 'wss://' + window.location.host\nvar connection = new WebSocket(websocketURL)\n\n\nconnection.onopen = function () {\n    console.log('Opened!')\n}\n\nlet handlers = []\nlet allowedMovements = []\n\nconnection.onerror = function (error) {\n    console.log('Sorry, but there\\'s some problem with your '\n        + 'connection or the server is down.')\n}\n\n// most important part - incoming messages\nconnection.onmessage = function (message) {\n    try {\n        var json = JSON.parse(message.data);\n    } catch (e) {\n        console.log('Invalid JSON: ', message.data);\n        return\n    }\n\n    for (let handler of handlers) {\n        handler.handle(json)\n    }\n}\n\n\nsetInterval(function () {\n    if (connection.readyState !== 1) {\n        console.log('Error missing connection');\n    }\n}, 3000);\n\nconst addHandler = (newHandler) => {\n    handlers = handlers.filter(handler => handler.id !== newHandler.id)\n    handlers.push(newHandler)\n}\nconst send = (message) => {\n    connection.send(message)\n}\n\nconst setMovements = (movements) => {\n    allowedMovements = movements\n}\n\nconst sendBasicCommand = (command) => {\n    send(JSON.stringify(\n        {\n            type: command\n        }\n    ))\n}\n\nconst sendMovement = (command) => {\n    if (!allowedMovements.includes(command)) {\n        return\n    }\n    sendBasicCommand(command)\n}\n\nconst reset = () => {\n    sendBasicCommand('RESET')\n}\n\nconst moveRight = () => {\n    sendMovement('RIGHT')\n}\n\nconst moveLeft = () => {\n    sendMovement('LEFT')\n}\n\nconst moveDown = () => {\n    sendMovement('DOWN')\n}\n\nconst moveUp = () => {\n    sendMovement('UP')\n}\n\nconst doSomething = (playerName) => {\n    send(JSON.stringify(\n        {\n            type: 'DO-SOMETHING',\n            player: playerName\n        }\n    ))\n}\n\nexport default {\n    send,\n    moveRight,\n    moveLeft,\n    moveDown,\n    moveUp,\n    setMovements,\n    reset,\n    doSomething,\n    addHandler\n}","import React from 'react'\nimport Tile from './tile'\nimport gameService from './../services/game'\nimport isEqual from \"lodash.isequal\"\n\nconst Board = ({ grid, tokens }) => {\n    const handleKeyPress = (event) => {\n        if (event.key === 's') {\n            gameService.moveDown()\n        } else if (event.key === 'w') {\n            gameService.moveUp()\n        } else if (event.key === 'a') {\n            gameService.moveLeft()\n        } else if (event.key === 'd') {\n            gameService.moveRight()\n        }\n    }\n\n    const onTokenSelected = (token) => {\n        gameService.send(JSON.stringify(\n            {\n                type: \"SELECTED\",\n                selected: token.id\n            }\n        ))\n    }\n\n    const getToken = (tileCoord) => {\n        return tokens.find(token => isEqual(token.coord, tileCoord))\n    }\n\n    return (\n        <div className=\"game-board\" onKeyPress={handleKeyPress} tabIndex={0}>\n            <table >\n                <tbody>\n                    {\n                        grid.map((row, rowNum) =>\n                            <tr key={rowNum} >\n                                {row.map((tile, colNum) =>\n                                    <td key={tile.coord.toString()}>\n                                        <Tile\n                                            type={tile.type}\n                                            token={getToken(tile.coord)}\n                                            onTokenSelected={onTokenSelected} />\n                                    </td>\n\n                                )}\n                            </tr>\n                        )}\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nexport default Board","class Coordinate {\n    constructor(x, y) {\n        this.x = x\n        this.y = y\n    }\n\n    toString() {\n        return `(${this.x}, ${this.y})`\n    }\n}\n\nexport default Coordinate","class Token {\n    constructor(id, coord, isSelected, selectedBy) {\n        this.id = id\n        this.coord = coord\n        this.isSelected = isSelected\n        this.selectedBy = selectedBy\n    }\n}\n\nexport default Token","\nconst MoveIndicator = ({ moves, isSelf }) => {\n    const heading = 'Moves:'\n\n    return (\n        < div >\n            {\n                isSelf ? <h2>{heading}</h2> : <h3>{heading}</h3>\n            }\n            <ul>\n                {\n                    moves.map(move => <li key={move}>{move}</li>)\n                }\n            </ul>\n\n        </div>\n    )\n}\n\nexport default MoveIndicator","import MoveIndicator from './moveIndicator'\n\nconst PlayerIndicator = ({ playerName, allowedMoves, isSelf, doSomething }) => {\n\n    const onClickDoSomething = (_) => {\n        doSomething(playerName)\n    }\n    return (\n        < div className={isSelf ? 'player-self' : 'player-other'}>\n            <div className='player-bar'>\n                {\n                    <label>{playerName}</label>\n                }\n                {\n                    isSelf ? \"\" : <button onClick={onClickDoSomething}>Do Something!</button>\n                }\n            </div>\n            <MoveIndicator moves={allowedMoves} isSelf={isSelf} />\n        </div>\n    )\n}\n\nexport default PlayerIndicator","import React from 'react'\n\nconst Notification = ({ notification }) => {\n    if (notification === null) {\n        return null\n    }\n\n    return (\n        <div className={notification.isGood ? 'notification' : 'notification-bad'}>\n            {notification.message}\n        </div>\n    )\n}\n\nexport default Notification","import React from 'react'\n\nconst Timer = ({ remainingSeconds }) => {\n    if (!remainingSeconds) {\n        return \"\"\n    }\n    const getTimeStr = (num) => {\n        const paddedString = \"00\" + num\n        return paddedString.substr(paddedString.length - 2)\n    }\n    const minutes = getTimeStr(Math.floor(remainingSeconds / 60))\n    const seconds = getTimeStr(remainingSeconds % 60)\n\n    const criticalTime = 10\n    const className = remainingSeconds > criticalTime ? 'timer' : 'timer-critical'\n    return (\n        <div className={className}>\n            {`${minutes}:${seconds}`}\n        </div>\n    )\n}\n\nexport default Timer","import './App.css'\nimport React, { useState } from 'react'\nimport Board from './components/board'\nimport gameService from './services/game'\nimport Coordinate from './models/coordinate'\nimport { Tile, TileType } from './models/tile'\nimport isEqual from \"lodash.isequal\"\nimport Token from './models/token'\nimport PlayerIndicator from './components/playerIndicator'\nimport Notification from './components/notification'\nimport Timer from './components/Timer'\n\n\nconst getCoordinate = (pos) => {\n  const x = parseInt(pos.x)\n  const y = parseInt(pos.y)\n  return new Coordinate(x, y)\n}\n\nconst getTiles = (initData) => {\n  let grid = []\n  const board = initData.board\n  const exits = board.exits.map(exitPos => getCoordinate(exitPos))\n  const walls = board.walls.map(wallPos => getCoordinate(wallPos))\n  const allTiles = board.tiles.map(tilePos => getCoordinate(tilePos))\n\n  for (let y = 0; y < board.height; y++) {\n    let row = []\n    for (let x = 0; x < board.width; x++) {\n      const currPos = new Coordinate(x, y)\n      let type\n      if (exits.some(exitPos => isEqual(exitPos, currPos))) {\n        type = TileType.EXIT\n      } else if (walls.some(wall => isEqual(wall, currPos))) {\n        type = TileType.WALL\n      } else if (allTiles.some(tile => isEqual(tile, currPos))) {\n        type = TileType.NORMAL\n      } else {\n        type = TileType.UNKNOWN\n      }\n\n      row.push(new Tile(currPos, type))\n    }\n    grid.push(row)\n  }\n  return grid\n}\n\nconst getInitials = (str) => {\n  const split = str.split(\" \")\n  return split.map(substr => substr[0]).join('')\n}\n\nconst getSelectedBy = (selections, idx) => {\n  let selection = selections.find(selection => selection.selection === idx)\n  if (selection) {\n    return getInitials(selection.selectedBy)\n  }\n  return null\n}\n\nconst getTokens = (data) => {\n  return data.tokens.map((pos, idx) =>\n    new Token(idx,\n      getCoordinate(pos),\n      data.selectedTokens.some(selected => selected === idx),\n      getSelectedBy(data.selections, idx)))\n}\n\nfunction App() {\n  const [updatedTiles, setTiles] = useState([[]])\n  const [tokens, setTokens] = useState([])\n  const [allowedMoves, setMoves] = useState([])\n  const [playerName, setPlayerName] = useState(\"\")\n  const [otherPlayers, setOtherPlayers] = useState([])\n  const [notificationMessage, setNotificationMessage] = useState(null)\n  const [remainingSeconds, setRemainingSeconds] = useState(null)\n\n  const clearNotification = () => {\n    setNotificationMessage(null)\n  }\n  const notify = (message, fade, isGood) => {\n    setNotificationMessage({\n      message: message,\n      isGood: isGood\n    })\n    if (!fade) {\n      return\n    }\n    setTimeout(() => {\n      clearNotification()\n    }, 5000)\n  }\n\n  let handler = {\n    id: 'app-updates',\n    handle: (json) => {\n      if (json.type === 'token-update') {\n        setTokens(getTokens(json.data))\n      } else if (json.type === 'board-update') {\n        setTiles(getTiles(json.data))\n        setTokens(getTokens(json.data.tokenData))\n        clearNotification()\n      } else if (json.type === 'win') {\n        notify(\"You have won the game!\", false, true)\n      } else if (json.type === 'movements') {\n        gameService.setMovements(json.data.movements)\n        setMoves(json.data.movements)\n      } else if (json.type === 'name') {\n        setPlayerName(json.data.name)\n      } else if (json.type === 'all-players') {\n        setOtherPlayers(json.data.filter(playerInfo => playerInfo.playerName !== playerName))\n      } else if (json.type === 'do-something') {\n        notify(`${json.data.sender} wants you to do something.`, true, true)\n      } else if (json.type === 'timer-update') {\n        // probably can update in a different way \n        //date to finish makes this less chatty\n        //could have an interval here that counts down\n        //timer-update is sent only on time pickups and connections\n        setRemainingSeconds(json.data.seconds)\n      } else if (json.type === 'lose') {\n        notify(\"You have lost the game..\", false, false)\n      }\n    }\n  }\n\n  gameService.addHandler(handler)\n\n  const reset = (_) => {\n    gameService.reset()\n  }\n\n  const doSomething = (playerName) => {\n    gameService.doSomething(playerName)\n  }\n\n  return (\n    <div className=\"App\">\n      <Notification notification={notificationMessage} />\n      <div className=\"board-space\">\n        <div className=\"board-controls\">\n          <Timer remainingSeconds={remainingSeconds} />\n          <br />\n          <PlayerIndicator playerName={playerName} allowedMoves={allowedMoves} isSelf={true} />\n          <br />\n          <h2 hidden={!otherPlayers.length}>Other Players:</h2>\n          {\n            otherPlayers.map(player => <PlayerIndicator key={player.playerName}\n              playerName={player.playerName}\n              allowedMoves={player.moves}\n              isSelf={false}\n              doSomething={doSomething} />)\n          }\n          <button onClick={reset}>Reset</button>\n        </div>\n        <Board grid={updatedTiles} tokens={tokens} />\n      </div>\n\n    </div >\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}