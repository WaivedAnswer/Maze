{"version":3,"sources":["models/tile.js","models/token.js","models/coordinate.js","models/tileDirection.js","images/coins_new.png","images/timer.png","images/axe2.png","images/sword.png","images/arrows2.png","images/potion.png","models/item.js","components/item.js","images/rock.png","images/s1.png","images/green-portal.png","images/orange-portal.png","images/yellow-portal.png","images/purple-portal.png","images/up.png","images/down.png","images/left.png","images/right.png","components/tile.js","images/dwarf_right.png","images/warrior.png","images/elf_bow.png","images/mage.png","components/token.js","images/escalator_down.png","images/escalator_up.png","models/escalator.js","components/escalator.js","components/wall.js","components/board.js","services/logger.js","services/gameService.js","models/wallModel.js","components/moveIndicator.js","components/playerIndicator.js","components/moves.js","components/notification.js","components/Timer.js","components/game.js","components/menu.js","App.js","index.js"],"names":["TileType","Tile","coord","type","hasItem","item","tokenType","this","TokenType","Token","id","selectedBy","escaped","Coordinate","x","y","TileDirection","getTile","grid","length","ItemType","Item","itemImg","className","style","coinImg","timerImg","weapon","img","axe","color","sword","bow","potion","Error","getWeapon","backgroundColor","JSON","stringify","src","alt","tileImg","tile","onTeleport","getTileDirection","exit","rockTile","up","down","left","right","orangePortal","purplePortal","yellowPortal","greenPortal","onClick","imgClass","token","onTokenSelected","dwarf","elf","warrior","mage","EscalatorOrientation","EscalatorModel","startCoord","endCoord","Math","min","abs","minX","getMinX","minY","getMinY","Escalator","escImg","escalator","onEscalate","rowStart","colStart","getOrientation","downImg","upImg","tileStyle","gridRow","getRowSpan","gridColumn","getColSpan","Wall","wall","wallStyle","getStartRow","getStartCol","zIndex","isHorizontal","borderTop","height","borderLeft","width","Board","tokens","escalators","walls","gameService","send","selected","teleport","escalatorId","escalate","onLeftBorder","onRightBorder","onTopBorder","onBottomBorder","getDirection","gridHeight","gridWidth","boardStyle","margin","overflow","display","gridTemplateColumns","gridTemplateRows","gap","tileCoord","gridColumnStart","gridRowStart","onKeyPress","event","key","toLowerCase","moveDown","moveUp","moveLeft","moveRight","tabIndex","map","row","rowNum","colNum","toString","console","log","error","GameService","gameId","playerName","setMovements","movements","allowedMovements","sendBasicCommand","command","reset","sendMovement","doSomething","player","handlers","newHandler","filter","handler","push","Promise","resolve","reject","finalURL","window","location","host","connection","WebSocket","logger","onopen","onerror","onmessage","message","json","parse","data","e","handle","setInterval","readyState","messageObject","gameMessage","includes","WallModel","max","MoveIndicator","imgSrc","keyIcon","move","isSelf","OtherPlayer","allowedMoves","_","Moves","Notification","notification","isGood","Timer","remainingSeconds","getTimeStr","num","paddedString","substr","minutes","floor","seconds","getCoordinate","pos","parseInt","tileData","itemData","getTileType","getTiles","tiles","getTileRow","getTokens","tokenData","idx","selections","selection","find","split","join","getSelectedBy","Game","realPlayerName","useState","updatedTiles","setTiles","setEscalators","setWalls","setTokens","setMoves","allPlayers","setAllPlayers","notificationMessage","setNotificationMessage","setRemainingSeconds","setGameService","clearNotification","useParams","useEffect","service","notify","fade","setTimeout","board","start","end","getEscalators","getWalls","sender","a","connect","getInitialUpdate","addHandler","initialConnect","otherPlayerName","otherPlayers","playerInfo","hidden","moves","Menu","setPlayerName","navigate","useNavigate","joinCodeRef","useRef","createGameClick","axios","post","current","value","response","joinGameClick","onChange","target","placeholder","ref","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.05814d30.chunk.js","sourcesContent":["let TileType = {\n    UNKNOWN: -1,\n    NORMAL: 1,\n    EXIT: 2,\n    WALL: 3,\n    CONNECT: 4,\n    PORTAL: 5\n}\n\nclass Tile {\n    constructor(coord, type, hasItem, item, tokenType) {\n        this.coord = coord\n        this.type = type\n        this.hasItem = hasItem\n        this.item = item\n        this.tokenType = tokenType\n    }\n}\n\nexport { Tile, TileType }\n","const TokenType = {\n    DWARF: 1,\n    MAGE: 2,\n    BARBARIAN: 3,\n    ELF: 4\n}\n\nclass Token {\n    constructor(id, coord, selectedBy, escaped, type) {\n        this.id = id\n        this.coord = coord\n        this.selectedBy = selectedBy\n        this.escaped = escaped\n        this.type = type\n    }\n}\n\nexport { Token, TokenType }","class Coordinate {\n    constructor(x, y) {\n        this.x = x\n        this.y = y\n    }\n\n    toString() {\n        return `(${this.x}, ${this.y})`\n    }\n}\n\nexport default Coordinate","import { TileType } from \"./tile\"\nimport Coordinate from \"./coordinate\"\n\nconst TileDirection = {\n    UP: 0,\n    DOWN: 1,\n    LEFT: 2,\n    RIGHT: 3,\n    UNKNOWN: 4\n}\n\nconst getTile  = (grid, coord) => {\n    if(coord.y < 0 || coord.y >= grid.length) {\n        return null\n    }\n    if(coord.x < 0 || coord.x >= grid[0].length) {\n        return null\n    }\n    return grid[coord.y][coord.x]\n}\n\nfunction getDirection(tile, grid) {\n    if(grid.length === 0 ) {\n        return TileDirection.UNKNOWN\n    }\n\n    const left = getTile(grid, new Coordinate(tile.coord.x - 1, tile.coord.y))\n    const right = getTile(grid, new Coordinate(tile.coord.x + 1, tile.coord.y))\n    const up = getTile(grid, new Coordinate(tile.coord.x, tile.coord.y - 1))\n    const down = getTile(grid, new Coordinate(tile.coord.x, tile.coord.y + 1))\n    const onLeftBorder = tile.coord.x === 0\n    const onRightBorder = tile.coord.x === grid[0].length - 1\n    const onTopBorder = tile.coord.y === 0\n    const onBottomBorder = tile.coord.y === grid.length - 1\n    if( onLeftBorder || (left && left.type === TileType.UNKNOWN)) {\n        return TileDirection.LEFT\n    } else if( onRightBorder || (right && right.type === TileType.UNKNOWN)) {\n        return TileDirection.RIGHT\n    } else if( onTopBorder || (up && up.type === TileType.UNKNOWN)) {\n        return TileDirection.UP\n    } else if( onBottomBorder || (down && down.type === TileType.UNKNOWN)) {\n        return TileDirection.DOWN\n    } else {\n        return TileDirection.UNKNOWN\n    }\n}\n\nexport { TileDirection, getDirection }\n","export default __webpack_public_path__ + \"static/media/coins_new.2254d122.png\";","export default __webpack_public_path__ + \"static/media/timer.c21cbb42.png\";","export default __webpack_public_path__ + \"static/media/axe2.3337d039.png\";","export default __webpack_public_path__ + \"static/media/sword.003d0d39.png\";","export default __webpack_public_path__ + \"static/media/arrows2.6d27d5a7.png\";","export default __webpack_public_path__ + \"static/media/potion.dc85f7b3.png\";","let ItemType = {\n    COIN: 0,\n    TIMER: 1,\n    WEAPON: 2\n}\n\nclass Item {\n    constructor(type, tokenType) {\n        this.type = type\n        this.tokenType = tokenType\n    }\n}\n\nexport { Item, ItemType }","import React from 'react'\nimport coinImg from \"../images/coins_new.png\"\nimport timerImg from \"../images/timer.png\"\nimport axe from \"../images/axe2.png\"\nimport sword from \"../images/sword.png\"\nimport bow from \"../images/arrows2.png\"\nimport potion from \"../images/potion.png\"\nimport {ItemType} from \"../models/item\"\nimport {TokenType} from \"../models/token\"\n\nconst getWeapon = ( item ) => {\n    switch(item.tokenType) {\n        case TokenType.DWARF:\n            return {\n                img: axe,\n                color: 'orange'\n            }\n        case TokenType.BARBARIAN:\n            return {\n                img: sword,\n                color: 'yellow'\n            }\n        case TokenType.ELF:\n            return {\n                img: bow,\n                color: 'green'\n            }\n        case TokenType.MAGE:\n            return {\n                img: potion,\n                color: 'purple'\n            }\n        default:\n            throw new Error( \"Invalid token type\" )\n    }\n}\n    \nconst Item = ({item}) => {\n    let itemImg\n    let className = 'item'\n    let style = {}\n    switch(item.type) {\n        case ItemType.COIN:\n            itemImg = coinImg\n            className += ' coin'\n            break;\n        case ItemType.TIMER:\n            itemImg = timerImg\n            className += ' time'\n            break;\n        case ItemType.WEAPON:\n            const weapon = getWeapon(item)\n            itemImg = weapon.img\n            className += ' weapon'\n            style.backgroundColor = weapon.color\n            break\n        default:\n            throw new Error('Unknown item type: ' + JSON.stringify(item))\n    }\n\n\n    return (\n        <div className={className} style={style} >\n            <img src={itemImg} alt='item' />\n        </div>\n    )\n}\n\nexport default Item","export default __webpack_public_path__ + \"static/media/rock.3d4d808c.png\";","export default __webpack_public_path__ + \"static/media/s1.cd3f2f2d.png\";","export default __webpack_public_path__ + \"static/media/green-portal.e3d54e5f.png\";","export default __webpack_public_path__ + \"static/media/orange-portal.e0a89eb5.png\";","export default __webpack_public_path__ + \"static/media/yellow-portal.f832ee4b.png\";","export default __webpack_public_path__ + \"static/media/purple-portal.f9f584fe.png\";","export default __webpack_public_path__ + \"static/media/up.552f859e.png\";","export default __webpack_public_path__ + \"static/media/down.40f8ab30.png\";","export default __webpack_public_path__ + \"static/media/left.aa0f5ff4.png\";","export default __webpack_public_path__ + \"static/media/right.9a984c67.png\";","import { TileType } from \"../models/tile\"\nimport { TokenType } from \"../models/token\"\nimport { TileDirection } from \"../models/tileDirection\"\n\nimport Item from \"./item\"\n\nimport rockTile from \"../images/rock.png\"\nimport exit from \"../images/s1.png\"\nimport greenPortal from \"../images/green-portal.png\"\nimport orangePortal from \"../images/orange-portal.png\"\nimport yellowPortal from \"../images/yellow-portal.png\"\nimport purplePortal from \"../images/purple-portal.png\"\nimport up from \"../images/up.png\"\nimport down from \"../images/down.png\"\nimport left from \"../images/left.png\"\nimport right from \"../images/right.png\"\n\nconst Tile = ({tile, onTeleport, getTileDirection }) => {\n    let className\n    let tileImg\n    const type = tile.type\n    if (type === TileType.EXIT) {\n        className = 'tile-exit'\n        tileImg = exit\n        switch(tile.tokenType) {\n            case TokenType.DWARF:\n                className += ' exit-dwarf'\n                break;\n            case TokenType.MAGE:\n                className += ' exit-mage'\n                break;\n            case TokenType.BARBARIAN:\n                className += ' exit-barbarian'\n                break;\n            case TokenType.ELF:\n                className += ' exit-elf'\n                break;\n            default:\n                throw new Error('Unknown token type')\n        }\n    } else if (type === TileType.WALL) {\n        className = 'tile-wall'\n        tileImg = rockTile\n    } else if (type === TileType.UNKNOWN) {\n        className = 'tile-unknown'\n    } else if (type === TileType.CONNECT) {\n        className = 'tile-connect'\n        const tileDirection = getTileDirection(tile)\n        switch(tileDirection) {\n            case TileDirection.UP:\n                tileImg = up\n                break\n            case TileDirection.DOWN:\n                tileImg = down\n                break\n            case TileDirection.LEFT:\n                tileImg = left\n                break\n            case TileDirection.RIGHT:\n                tileImg = right\n                break\n            default:\n                //do nothing\n        }\n        switch(tile.tokenType) {\n            case TokenType.DWARF:\n                className += ' connect-dwarf'\n                break;\n            case TokenType.MAGE:\n                className += ' connect-mage'\n                break;\n            case TokenType.BARBARIAN:\n                className += ' connect-barbarian'\n                break;\n            case TokenType.ELF:\n                className += ' connect-elf'\n                break;\n            default:\n                throw new Error('Unknown token type')\n        }\n    } else if (type === TileType.PORTAL) {\n        className = 'tile-portal'\n        switch(tile.tokenType) {\n            case TokenType.DWARF:\n                tileImg = orangePortal\n                break;\n            case TokenType.MAGE:\n                tileImg = purplePortal\n                break;\n            case TokenType.BARBARIAN:\n                tileImg = yellowPortal\n                break;\n            case TokenType.ELF:\n                tileImg = greenPortal\n                break;\n            default:\n                throw new Error('Unknown token type')\n        }\n    }\n    else {\n        className = 'tile'\n    }\n\n    const handleClick = () => {\n        if(type !== TileType.PORTAL) {\n            return\n        }\n        onTeleport(tile.coord)\n    }\n\n    return (\n        <div className={className}>\n            { tileImg ? <img src={tileImg} className=\"tile-image\" onClick={handleClick} alt='' /> : null}\n            { tile.hasItem ? <Item item={tile.item}/> : null}\n        </div>\n    )\n}\n\nexport default Tile","export default __webpack_public_path__ + \"static/media/dwarf_right.3de0ca4b.png\";","export default __webpack_public_path__ + \"static/media/warrior.94e868cd.png\";","export default __webpack_public_path__ + \"static/media/elf_bow.93f90f79.png\";","export default __webpack_public_path__ + \"static/media/mage.23ebe66e.png\";","import React from 'react'\nimport dwarf from \"../images/dwarf_right.png\"\nimport warrior from \"../images/warrior.png\"\nimport elf from \"../images/elf_bow.png\"\nimport mage from \"../images/mage.png\"\nimport { TokenType } from \"../models/token\"\n\nconst Token = ({ token, onTokenSelected, style}) => {\n    if(!token || token.escaped ) {\n        return ''\n    }\n\n    let imgClass\n    if (token.selectedBy) {\n        imgClass = 'token-selected'\n    } else if (!token.selectedBy) {\n        imgClass = 'token'\n    }\n\n    let img\n    switch(token.type) {\n        case TokenType.DWARF:\n            img = dwarf\n            imgClass += \" token-dwarf\"\n            break;\n        case TokenType.ELF:\n            img = elf\n            imgClass += \" token-elf\"\n            break;\n        case TokenType.BARBARIAN:\n            img = warrior\n            imgClass += \" token-barbarian\"\n            break;\n        case TokenType.MAGE:\n            img = mage\n            imgClass += \" token-mage\"\n            break;\n        default:\n            throw new Error(\"Unknown token type\")\n    }\n    \n    const onClick = () => {\n        if (token) {\n            onTokenSelected(token)\n        }\n    }\n\n\n\n    return (\n        <div className={imgClass} style={style} onClick={onClick}>\n            <img src={img} alt='token' />\n        </div>\n    )\n}\n\nexport default Token","export default __webpack_public_path__ + \"static/media/escalator_down.03b0327b.png\";","export default __webpack_public_path__ + \"static/media/escalator_up.671e7897.png\";","const EscalatorOrientation = {\n    DOWN: 0,\n    UP: 1\n}\n\nclass EscalatorModel {\n    constructor(id, startCoord, endCoord) {\n        this.id = id\n        this.startCoord = startCoord\n        this.endCoord = endCoord\n    }\n\n    getMinX() {\n        return Math.min(this.startCoord.x, this.endCoord.x)\n    }\n\n    getMinY() {\n        return Math.min(this.startCoord.y, this.endCoord.y)\n    }\n\n    getRowSpan() {\n        return Math.abs(this.startCoord.y - this.endCoord.y) + 1\n    }\n\n    getColSpan() {\n       return Math.abs(this.startCoord.x - this.endCoord.x) + 1\n    }\n\n    getOrientation() {\n        const minX = this.getMinX()\n        const minY = this.getMinY()\n        if( (minX === this.startCoord.x && minY === this.startCoord.y) \n            || (minX === this.endCoord.x && minY === this.endCoord.y )) {\n            return EscalatorOrientation.DOWN\n        } else {\n            return EscalatorOrientation.UP\n        }\n    }\n}\n\nexport { EscalatorModel, EscalatorOrientation }","import downImg from \"../images/escalator_down.png\"\nimport upImg from \"../images/escalator_up.png\"\nimport {EscalatorOrientation} from '../models/escalator'\n\nconst Escalator = ({ escalator, onEscalate }) => {\n    const rowStart = escalator.getMinY() + 1\n    const colStart = escalator.getMinX() + 1\n    let escImg\n    switch(escalator.getOrientation()) {\n        case EscalatorOrientation.DOWN:\n            escImg = downImg\n            break;\n        case EscalatorOrientation.UP:\n            escImg = upImg\n            break;\n        default:\n            throw new Error (\"Invalid Orientation\")\n    }\n\n    const tileStyle = {\n        gridRow: `${rowStart} / span ${escalator.getRowSpan()}`,\n        gridColumn: `${colStart} / span ${escalator.getColSpan()}`,\n    }\n\n    const handleClick = () => {\n        onEscalate(escalator.id)\n    }\n\n    return (\n        < div className = 'escalator' style = {tileStyle} >\n            <img className = 'escalator-img' src={escImg} onClick={handleClick} alt='escalator' />\n        </div>\n    )\n}\n\nexport default Escalator","\nconst Wall = ( {wall}) => {\n    const wallStyle = {\n        gridRow: `${wall.getStartRow()} / span ${wall.getRowSpan()}`,\n        gridColumn: `${wall.getStartCol()} / span ${wall.getColSpan()}`,\n        zIndex: 1\n    }\n\n    if(wall.isHorizontal()) {\n        wallStyle.borderTop = '10px solid #000000'\n        wallStyle.height ='0px'\n    } else {\n        wallStyle.borderLeft = '10px solid #000000'\n        wallStyle.width = '0px'\n    }\n\n    return (\n        < div className = 'wall' style = {wallStyle} >\n        </div>\n    )\n}\n\nexport default Wall","import React from 'react'\nimport Tile from './tile'\nimport { getDirection } from '../models/tileDirection'\nimport Token  from './token'\nimport Escalator from './escalator'\nimport Wall from './wall'\n\nconst Board = ({ grid, tokens, escalators, walls, gameService }) => {\n    const handleKeyPress = (event) => {\n        if (event.key.toLowerCase() === 's') {\n            gameService.moveDown()\n        } else if (event.key.toLowerCase() === 'w') {\n            gameService.moveUp()\n        } else if (event.key.toLowerCase() === 'a') {\n            gameService.moveLeft()\n        } else if (event.key.toLowerCase() === 'd') {\n            gameService.moveRight()\n        }\n    }\n\n    const onTokenSelected = (token) => {\n        //sends with token.id (Where does this come from? is it always populated correctly?)\n        gameService.send(JSON.stringify(\n            {\n                type: \"SELECTED\",\n                selected: token.id\n            }\n        ))\n    }\n\n    const onTeleport = (coord) => {\n        gameService.teleport(coord)\n    }\n\n    const onEscalate = (escalatorId) => {\n        gameService.escalate(escalatorId)\n    }\n\n    const getTileDirection = (tile) => {\n        return getDirection(tile, grid)\n    }\n\n    const gridHeight = grid.length\n\n    const gridWidth = grid.length === 0 ? 0 : grid[0].length\n\n    const boardStyle = {\n        margin: '48px',\n        overflow: 'auto',\n        display: 'grid',\n        gridTemplateColumns: `repeat(${gridWidth}, 64px)`,\n        gridTemplateRows: `repeat(${gridHeight}, 64px)`,\n        gap: '0px'\n     }\n\n     const tileStyle = (tileCoord) => {\n        const style =  {\n        gridColumnStart: `${tileCoord.x + 1}`,\n        gridRowStart: `${tileCoord.y + 1}`,\n     }\n\n     return style\n    }\n\n    return (\n        <div className=\"game-board\" style= {boardStyle} onKeyPress={handleKeyPress} tabIndex={0}>\n            {\n                grid.map((row, rowNum) =>\n                        row.map((tile, colNum) =>\n                            <div className='tile-container' key={tile.coord.toString()} style={tileStyle(tile.coord)}>\n                                <Tile tile = {tile} onTeleport={onTeleport} getTileDirection={getTileDirection} />\n                            </div>\n\n                        )\n                )}\n            {\n                escalators.map( (escalator) => <Escalator escalator={escalator} onEscalate={onEscalate}/>)\n            }\n            {\n                tokens.map( (token) => <Token token={token} onTokenSelected={onTokenSelected} style={tileStyle(token.coord)}/>)\n            }\n            {\n                walls.map( (wall) => <Wall wall={wall}/>  )\n            }     \n        </div>\n    )\n}\n\nexport default Board","const debug = (...params) => {\n    //console.log(...params)\n}\n\nconst info = (...params) => {\n    console.log(...params)\n}\n\nconst warn = (...params) => {\n    console.log(...params)\n}\nconst error = (...params) => {\n    console.error(...params)\n}\n\nexport default {\n    debug,\n    info,\n    warn,\n    error\n}","import logger from './logger'\n\nclass GameService {\n\n    constructor(gameId, playerName) {\n        this.handlers = []\n        this.gameId = gameId\n        this.playerName = playerName\n        this.allowedMovements = []\n    }\n\n    addHandler(newHandler) {\n        this.handlers = this.handlers.filter(handler => handler.id !== newHandler.id)\n        this.handlers.push(newHandler)\n    }\n\n    connect() {\n        return new Promise((resolve, reject) => {\n            let websocketURL = process.env.NODE_ENV === 'development' ? 'ws://127.0.0.1:3001' : 'wss://' + window.location.host\n            let finalURL = websocketURL+`?playerName=${this.playerName}`\n            this.connection = new WebSocket(finalURL)\n            logger.debug(\"Connecting to:\" + finalURL)\n            this.connection.onopen = () => {\n                resolve()\n            }\n            this.connection.onerror = (error) => {\n                logger.error(error)\n                logger.error('Sorry, but there\\'s some problem with your '\n                    + 'connection or the server is down.')\n                    reject(error)\n            }\n            \n            // most important part - incoming messages\n            this.connection.onmessage = (message) => {\n                try {\n                    var json = JSON.parse(message.data);\n                } catch (e) {\n                   logger.error('Invalid JSON: ', message.data);\n                    return\n                }\n            \n                if(json.gameId && json.gameId !== this.gameId) {\n                    logger.warn('Sent message for different game')\n                    return\n                }\n\n                for (let handler of this.handlers) {\n                    handler.handle(json)\n                }\n            }\n            setInterval(() => {\n                if (this.connection.readyState !== 1) {\n                    logger.error('Error missing connection');\n                }\n            }, 3000);\n          });\n       \n    }\n\n    getInitialUpdate() { \n        this.sendBasicCommand('INITIAL')\n    }\n\n    send(message) {\n        let messageObject = JSON.parse(message)\n        messageObject.gameId = this.gameId\n        let gameMessage = JSON.stringify(messageObject)\n\n        logger.debug(\"SEND: \" + gameMessage)\n        this.connection.send(gameMessage)\n    }\n\n    setMovements = (movements) => {\n        this.allowedMovements = movements\n    }\n    \n    sendBasicCommand = (command) => {\n        this.send(JSON.stringify(\n            {\n                type: command\n            }\n        ))\n    }\n    \n    sendMovement(command){\n        if (!this.allowedMovements.includes(command)) {\n            return\n        }\n        this.sendBasicCommand(command)\n    }\n    \n    reset = () => {\n        this.sendBasicCommand('RESET')\n    }\n    \n    moveRight = () => {\n       this.sendMovement('RIGHT')\n    }\n    \n    moveLeft = () => {\n        this.sendMovement('LEFT')\n    }\n    \n    moveDown = () => {\n        this.sendMovement('DOWN')\n    }\n    \n    moveUp = () => {\n        this.sendMovement('UP')\n    }\n    \n    doSomething = (playerName) => {\n        this.send(JSON.stringify(\n            {\n                type: 'DO-SOMETHING',\n                player: playerName\n            }\n        ))\n    }\n\n    teleport = (coord) => {\n        this.send(JSON.stringify(\n            {\n                type: \"TELEPORT\",\n                coord: coord\n            }\n        ))\n    }\n\n    escalate = (escalatorId) => {\n        this.send(JSON.stringify(\n            {\n                type: \"ESCALATE\",\n                id: escalatorId\n            }\n        ))\n    }\n\n\n}\n\nexport default GameService","class WallModel {\n    constructor(startCoord, endCoord) {\n        this.startCoord = startCoord\n        this.endCoord = endCoord\n    }\n\n    getStartRow() {\n        return Math.min(this.startCoord.y, this.endCoord.y) + 1\n    }\n\n    getStartCol() {\n        return Math.min(this.startCoord.x, this.endCoord.x) + 1\n    }\n\n    getRowSpan() {\n        return Math.max(1, Math.abs(this.startCoord.y - this.endCoord.y))\n    }\n\n    getColSpan() {\n        return Math.max(1, Math.abs(this.startCoord.x - this.endCoord.x))\n    }\n\n    isHorizontal() {\n        return this.startCoord.y === this.endCoord.y\n    }\n}\n\nexport { WallModel }","import up from \"../images/up.png\"\nimport down from \"../images/down.png\"\nimport left from \"../images/left.png\"\nimport right from \"../images/right.png\"\nconst MoveIndicator = ({ move, isSelf }) => {\n    let imgSrc\n    let keyIcon\n    if(move === 'LEFT') {\n        imgSrc = left\n        keyIcon = 'A'\n    } else if(move ==='RIGHT') {\n        imgSrc = right\n        keyIcon = 'D'\n    } else if(move ==='UP') {\n        imgSrc = up\n        keyIcon = 'W'\n    } else if(move ==='DOWN') {\n        imgSrc = down\n        keyIcon = 'S'\n    } else {\n        console.log(\"Fail, move: \" + move)\n    }\n    return (\n        < div className ='move-icon'>\n           <img src={imgSrc} alt='move' />\n           {isSelf ? <span>{keyIcon}</span> : \"\"}\n        </div>\n    )\n}\n\nexport default MoveIndicator","import MoveIndicator from './moveIndicator'\n\nconst OtherPlayer = ({ playerName, allowedMoves, doSomething }) => {\n\n    const onClickDoSomething = (_) => {\n        doSomething(playerName)\n    }\n    return (\n        < div className='player-other'>\n            <div className='player-bar'>\n                <label>{playerName}</label>\n                {\n                    allowedMoves.map(move =>  <MoveIndicator key={move} move={move} isSelf={false}></MoveIndicator>)\n                }\n                <button className='doSomethingButton' onClick={onClickDoSomething}>!</button>\n                \n            </div>\n        </div>\n    )\n}\n\nexport default OtherPlayer","import MoveIndicator from './moveIndicator'\n\nconst Moves = ({ playerName, allowedMoves }) => {\n\n    return (\n        < div className='player-self'>\n            <span id='mainPlayer'>{playerName}</span>\n            <h2>Moves</h2>\n            <div className = 'player-moves' >\n                {\n                    allowedMoves.map(move =>  <MoveIndicator key={move} move={move} isSelf={true}></MoveIndicator>)\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default Moves","import React from 'react'\n\nconst Notification = ({ notification }) => {\n    if (notification === null) {\n        return null\n    }\n\n    return (\n        <div className={notification.isGood ? 'notification' : 'notification-bad'}>\n            {notification.message}\n        </div>\n    )\n}\n\nexport default Notification","import React from 'react'\n\nconst Timer = ({ remainingSeconds }) => {\n    if (!remainingSeconds) {\n        return \"\"\n    }\n    const getTimeStr = (num) => {\n        const paddedString = \"00\" + num\n        return paddedString.substr(paddedString.length - 2)\n    }\n    const minutes = getTimeStr(Math.floor(remainingSeconds / 60))\n    const seconds = getTimeStr(remainingSeconds % 60)\n\n    const criticalTime = 10\n    const className = remainingSeconds > criticalTime ? 'timer' : 'timer-critical'\n    return (\n        <div className={className}>\n            {`${minutes}:${seconds}`}\n        </div>\n    )\n}\n\nexport default Timer","import '../App.css'\nimport React, { useState, useEffect } from 'react'\nimport Board from './board'\nimport GameService from '../services/gameService'\nimport logger from '../services/logger'\nimport Coordinate from '../models/coordinate'\nimport {EscalatorModel} from '../models/escalator'\nimport {WallModel} from '../models/wallModel'\nimport { Tile, TileType } from '../models/tile'\nimport { Item } from '../models/item'\nimport { Token } from '../models/token'\nimport OtherPlayer from './playerIndicator'\nimport Moves from './moves'\nimport Notification from './notification'\nimport Timer from './Timer'\nimport { useParams } from 'react-router-dom'\n\n\nconst getCoordinate = (pos) => {\n  const x = parseInt(pos.x)\n  const y = parseInt(pos.y)\n  return new Coordinate(x, y)\n}\n\nconst getTileType = (type) => {\n  switch(type) {\n    case 0:\n      return TileType.NORMAL\n    case 1:\n      return TileType.WALL\n    case 2:\n      return TileType.EXIT\n    case 3:\n      return TileType.CONNECT\n    case 4:\n      return TileType.PORTAL\n    default:\n      return TileType.UNKNOWN\n  }\n}\n\nconst getTile = (tileData) => {\n  const itemData = tileData.item\n  let item\n  if(itemData) {\n    item = new Item(itemData.type, itemData.tokenType)\n  }\n\n  return new Tile(getCoordinate(tileData.pos), \n  getTileType(tileData.type), \n  tileData.hasItem, \n  item,\n  tileData.tokenType)\n}\n\nconst getTileRow = (row) => {\n  return row.map(tileData => getTile(tileData))\n}\n\nconst getTiles = (tiles) => {\n  const grid = tiles.map( row => getTileRow(row))\n  return grid\n}\n\nconst getEscalators = (escalators) => {\n  return escalators.map( escalator => new EscalatorModel(escalator.id, getCoordinate(escalator.start), getCoordinate(escalator.end)))\n}\n\nconst getWalls = (walls) => {\n  return walls.map( wall => new WallModel(getCoordinate(wall.start), getCoordinate(wall.end)))\n}\n\nconst getInitials = (str) => {\n  const split = str.split(\" \")\n  return split.map(substr => substr[0]).join('')\n}\n\nconst getSelectedBy = (selections, idx) => {\n  let selection = selections.find(selection => selection.selection === idx)\n  if (selection) {\n    return getInitials(selection.selectedBy)\n  }\n  return null\n}\n\nconst getTokens = (data) => {\n  const newTokens = data.tokens.map((tokenData, idx) =>\n  new Token(idx,\n    getCoordinate(tokenData.pos),\n    getSelectedBy(data.selections, idx),\n    tokenData.escaped,\n    tokenData.type))\n  return newTokens\n}\n\nfunction Game({realPlayerName}) {\n  const [updatedTiles, setTiles] = useState([[]])\n  const [escalators, setEscalators] = useState([])\n  const [walls, setWalls] = useState([])\n  const [tokens, setTokens] = useState([])\n  const [allowedMoves, setMoves] = useState([])\n  const [allPlayers, setAllPlayers] = useState([])\n  const [notificationMessage, setNotificationMessage] = useState(null)\n  const [remainingSeconds, setRemainingSeconds] = useState(null)\n  const [gameService, setGameService] = useState(null)\n\n  const clearNotification = () => {\n    setNotificationMessage(null)\n  }\n  let { gameId } = useParams();\n  useEffect(() => {\n    let service = new GameService(gameId, realPlayerName)\n    const notify = (message, fade, isGood) => {\n      setNotificationMessage({\n        message: message,\n        isGood: isGood\n      })\n      if (!fade) {\n        return\n      }\n      setTimeout(() => {\n        clearNotification()\n      }, 5000)\n    }\n\n    let handler = {\n      id: 'app-updates',\n      handle: (json) => {\n        if (json.type === 'token-update') {\n          logger.debug('Token update!')\n          setTokens(getTokens(json.data))\n        } else if (json.type === 'board-update') {\n          logger.debug('Board UPDATE')\n          setTiles(getTiles(json.data.board.tiles))\n          setEscalators(getEscalators(json.data.board.escalators))\n          setWalls(getWalls(json.data.board.walls))\n          setTokens(getTokens(json.data.tokenData))\n          clearNotification()\n        } else if (json.type === 'win') {\n          notify(\"You have won the game!\", false, true)\n        } else if (json.type === 'movements') {\n          logger.debug(\"Setting movement\")\n          service.setMovements(json.data.movements)\n          setMoves(json.data.movements)\n        } else if (json.type === 'all-players') {\n          setAllPlayers(json.data)\n        } else if (json.type === 'do-something') {\n          notify(`${json.data.sender} wants you to do something.`, true, true)\n        } else if (json.type === 'timer-update') {\n          // probably can update in a different way \n          //date to finish makes this less chatty\n          //could have an interval here that counts down\n          //timer-update is sent only on time pickups and connections\n          setRemainingSeconds(json.data.seconds)\n        } else if (json.type === 'lose') {\n          notify(\"You have lost the game..\", false, false)\n        }\n      }\n    }\n    service.addHandler(handler)\n    async function initialConnect() {\n      await service.connect()\n      service.getInitialUpdate()\n    }\n    initialConnect()\n    setGameService(service)\n  },\n  [gameId])\n\n\n  const reset = (_) => {\n    gameService.reset()\n  }\n\n  const doSomething = (otherPlayerName) => {\n    gameService.doSomething(otherPlayerName)\n  }\n\n  const otherPlayers = allPlayers.filter(playerInfo => playerInfo.playerName !== realPlayerName)\n\n  return (\n    <div className=\"App\">\n      <Notification notification={notificationMessage} />\n      <div className=\"board-space\">\n        <div className=\"board-controls\">\n          <Timer remainingSeconds={remainingSeconds} />\n          <br />\n          <Moves playerName={realPlayerName} allowedMoves={allowedMoves} />\n          <br />\n          <h2 hidden={!otherPlayers.length}>Other Players:</h2>\n          {\n            otherPlayers.map(player => <OtherPlayer key={player.playerName}\n              playerName={player.playerName}\n              allowedMoves={player.moves}\n              isSelf={false}\n              doSomething={doSomething} />)\n          }\n          <button className='button' id='reset-button' onClick={reset}>Reset</button>\n        </div>\n        <Board grid={updatedTiles} tokens={tokens} escalators={escalators} walls={walls} gameService={gameService} />\n      </div>\n\n    </div >\n  );\n}\n\nexport default Game;\n","import React, { useRef } from 'react'\nimport {\n  useNavigate\n} from \"react-router-dom\"\nimport axios from 'axios';\nimport logger from '../services/logger'\n\nfunction Menu({playerName, setPlayerName}) {\n  const navigate = useNavigate();\n  const joinCodeRef = useRef(null)\n\n  const createGameClick = async () => {\n    const response = await axios.post('/games', {gameId: joinCodeRef.current.value});\n\n    logger.debug(response.data)\n    // The server responds with the id of the new user\n    const gameId = response.data.gameId;\n    logger.debug('Game Id response:' + gameId)\n    navigate(`/game/${gameId}`);\n  };\n\n  const joinGameClick = async () => {\n    const gameId = joinCodeRef.current.value\n    navigate(`/game/${gameId}`);\n  };\n\n  const handleNameChange = (event) => {\n    setPlayerName(event.target.value)\n  }\n\n  return (\n    <div className=\"menu\">\n      <h1>Magic Maze</h1>\n      <div className=\"menuSelections\">\n        <div className=\"menuRow\" >\n          <input type=\"text\" value={playerName} onChange={handleNameChange} placeholder='Nickname' className=\"inputText\" />\n        </div>\n        <div className=\"menuRow\" >\n        <input type=\"text\" ref={joinCodeRef} placeholder='Game Code' className=\"inputText\" />\n        </div>\n        <div className =\"menuRow\">\n          <button onClick={() => createGameClick()} className = \"button\" >Create</button>\n          <button onClick={joinGameClick} className = \"button\" >Join</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Menu;\n","import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './components/game';\nimport {\n  BrowserRouter as Router,\n  Routes, Route\n} from \"react-router-dom\"\nimport Menu from './components/menu';\n\n\nfunction App() {\n    const [playerName, setPlayerName] = useState('');\n  \n    return (\n    <Router>\n        <Routes>\n          <Route path=\"/game/:gameId\" element={<Game  realPlayerName = {playerName} />}/>\n          <Route path=\"/\" element={<Menu playerName={playerName} setPlayerName={setPlayerName}/>}/>\n         </Routes>\n      </Router>\n    );\n  }\n  \n  export default App;\nReactDOM.render(\n  <React.StrictMode>\n   \n   \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {\n  BrowserRouter as Router,\n  Routes, Route\n} from \"react-router-dom\"\nimport Menu from './components/menu';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}